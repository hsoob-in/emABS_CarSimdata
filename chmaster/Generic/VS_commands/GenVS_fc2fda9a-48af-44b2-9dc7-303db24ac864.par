PARSFILE
#FullDataName Generic VS Commands`FCW-AEB Tuning: AEB Off`Pedestrian Euro NCAP
#VehCode AEB, FCW Euro NCAP

#MiscYellow0
*************** AEB Tuning Parameters (refined for speeds from 10-60 kph) *************** 
DEFINE_PARAMETER TTC_THRESH_FCW = 2.3; s; TTC threshold for the FCW Alert
DEFINE_PARAMETER TTC_BRAKE_THRESH_TIME = 1.3; s; TTC threshold for the AEB application
DEFINE_PARAMETER AEB_THRESH_BRAKE_DIST = 7.25; m; Long. distance threshold
DEFINE_PARAMETER PED_LAT_THRESH = 2.2; m ; lateral distance threshold

DEFINE_PARAMETER MIN_THRESH = 0.05; - ; Minimum threshold for x-distance between ...
the pedestrian and the vehicle = value just greater than 0
DEFINE_PARAMETER AEB_MAX_BK_REQ = 5; MPa; AEB max brake pressure request
DEFINE_PARAMETER AEB_MAX_REL_SPD = 100; km/h; max allowable relative speed calc.
DEFINE_PARAMETER AEB_Min_Stop_Speed = 5; km/h; threshold speed to cause a complete stop

******************************** AEB Logic ********************************
define_output PedMag = DETECT_MAG(ID_CAM, OBJ_NEAR) ; - ; camera sensor detection boolean
define_output PedDistDetect = DETECT_DIST(ID_CAM,OBJ_NEAR); m ; camera sensor relative distance
define_output PedSpdDetect = DETECT_SPD(ID_CAM,OBJ_NEAR); km/h ; camera sensor relative speed
define_output PedBrDetect = DETECT_BR_CP(ID_CAM,OBJ_NEAR); deg ; camera sensor relative bearing

! Object height is important for the child pedestrian espeically
define_output ObjHeight = if(PedMag, DETECT_Z(ID_CAM,OBJ_NEAR), 0); m; camera sensor relative height
define_output HeightAngle = if(abs(PedDistDetect)>0, asin(ObjHeight/PedDistDetect), 0); deg; ...
vert. ang. btw. x-y plane & obj. 
define_output xyDistSens = if(PedMag, PedDistDetect*cos(HeightAngle), 0); m; x-y plane project. of...
 camera dist.

define_output xDistAct = xyDistSens*cos(PedBrDetect)-LxBumper; m; x-sensor dist. from fr. bumper
define_output yDistAct = xyDistSens*sin(PedBrDetect); m; y-sensor dist. from fr. bumper

define_output Long_Ped_Rel = if( PedMag, xDistAct, 0) ; m; x-relative dist. to pedestrian
define_output Lat_Ped_Rel = if(PedMag,  yDistAct , 0) ; m; y-relative dist. to pedestrian

define_output RelBearingBumper = if(abs(Lat_Ped_Rel) > MIN_THRESH,...
 atan(Lat_Ped_Rel/Long_Ped_Rel), 0); deg; rel. bearing from fr. bumper

define_output RelDistFrontBump = if(abs(RelBearingBumper) > 0, ...
Lat_Ped_Rel/(sin(RelBearingBumper)), 0); m; rel. dist. from from fr. bumper

!Saturation for relative speed, after the instance a relative distance value goes from -1 to
! a value greater than zero in the smallest time interval
define_output RelSpeedOk = if( abs(PedSpdDetect) < AEB_MAX_REL_SPD , ...
PedSpdDetect, 0); -; rel. spd w/init val. saturation

! Time to collision is the relative distance / relative speed between the ego vehicle and 
! the closest detected object
define_output TTC_AEB = if(PedMag & (RelSpeedOk*3.6 < -MIN_THRESH), ...
abs(RelDistFrontBump/ PedSpdDetect) , 0); s; time-to-collision

define_output AEB_On = 0; - ;  Boolean to activate system AEB

define_output AEB_TimeThresh = (TTC_AEB < TTC_BRAKE_THRESH_TIME) & ...
(TTC_AEB > MIN_THRESH) & (abs(Lat_Ped_Rel) < PED_LAT_THRESH); - ; bool. for AEB time criteria met
define_output AEB_DistThresh = PedMag & Long_Ped_Rel < AEB_THRESH_BRAKE_DIST ...
& abs(Lat_Ped_Rel) < PED_LAT_THRESH; - ; bool. for AEB dist. criteria met

!AEB Output
define_output ApplyAEB_FullStop = if(AEB_On & PedMag , AEB_TimeThresh  | AEB_DistThresh...
  | abs(Vxz_Fwd) <AEB_Min_Stop_Speed, 0); - ; Bool. to apply brakes from AEB

!FCW Warning Output
define_output Show_FCW = 0 ; - ; bool for FCW activation on HUD

! When AEB is requested, replace master cylinder pressure with AEB requested pressure
PBK_CON_EQUATION AEB_MAX_BK_REQ*ApplyAEB_FullStop 

EQ_OUT OPT_SC = if(ApplyAEB_FullStop, 0, 3) ! cancel driver model speed 
! control, and apply brakes for AEB
OPT_VMIN -1 ! never stop
#ENDMYellow

*MODELCODE AEB, FCW Euro NCAP
PARSFILE Animator\HUD\HUD_ba3324b0-fcb9-45f8-abcd-5ab3d2d1a3cd.par
#BlueLink0 Animator: HUD`FCW Alert (small - right side)` Euro NCAP` , Miscellaneous`HUD_ba3324b0-fcb9-45f8-abcd-5ab3d2d1a3cd


#EMBEDDED_NOTES
#Logic to generate a forward collision warning (FCW) and AEB activation using the current sensor and the closest detectd object,
#
#An equation is included for open-loop brake pressure via the configurable function PBK_CON, once AEB is engaged.
#
#AEB_On and Show_FCW  are set to = 0, since AEB and FCW are not ment to be engaged in this example
#
#END_EMBEDDED_NOTES

LOG_ENTRY Used Dataset: Generic VS Commands; { Pedestrian Euro NCAP } FCW-AEB Tuning: AEB Off
#Library : Generic VS Commands
#DataSet : FCW-AEB Tuning: AEB Off
#Category: Pedestrian Euro NCAP
#FileID  : GenVS_fc2fda9a-48af-44b2-9dc7-303db24ac864
#Product : CarSim 2021.0
#VehCode AEB, FCW Euro NCAP

END
