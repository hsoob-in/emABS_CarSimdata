PARSFILE
! CarSim 2021.0
! Revision 153671, December 9, 2020
MODEL_LAYOUT I_I I_S__S

DATASET_TITLE Roundabout, 2 Veh, 1 w/ Trailer, 1 Solver
CATEGORY Multiple Vehicles, Single Solver
TITLE Roundabout, 2 Veh, 1 w/ Trailer, 1 Solver <Multiple Vehicles, Single Solver>

! Echo: Results\Run_f2e2b3b0-d830-4443-98b1-da616de8236d\LastRun_echo.par
! This run was made 19:19 on December 10, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   107 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      118 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! [D] Option for stopping the run: 0 -> stop when T reaches
                      ! TSTOP; 1 -> stop when T reaches TSTOP or station reaches
                      ! SSTOP; -1 -> run until stopped using VS Commands or
                      ! external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! [D] Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! [D] Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              15 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    1 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG(1)  1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is', vehicle 1 [I]
OPT_INIT_SPEED(1)   1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is', vehicle 1 [I]
ROLL_MAX_STOP(1)   80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached, vehicle 1
VLOW_STOP(1)       -1 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable, vehicle 1

OPT_INIT_CONFIG(2)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 2 [I]
OPT_INIT_SPEED(2)   1 ! [D] Initialize speed variables, vehicle 2 [I]
ROLL_MAX_STOP(2)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 2
VLOW_STOP(2)       -1 ; km/h ! Minimum allowed absolute speed, vehicle 2

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATIONS
!------------------------------------------------------------------------------------
! N_VEHICLES        2 ! Number of vehicles (lead units) (read-only)
! VEHICLE_UNITS_MAP(1) 1 ! Number of units in vehicle 1 (read-only)
! VEHICLE_UNITS_MAP(2) 2 ! Number of units in vehicle 2 (read-only)
! VEHICLE_LEAD_UNIT(1) 1 ! Lead unit for vehicle 1 (read-only)
! VEHICLE_LEAD_UNIT(2) 2 ! Lead unit for vehicle 2 (read-only)
! VEHICLE_NUNITS    3 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    5 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 2 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 1 ! Number of axles on unit 3 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! Unit 1 is the lead unit for vehicle 1
! H_CG_TL(1) 506.9120586 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1049.562958 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) 2.474962509e-13 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        1501 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 712.7028188 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 2044.3154 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 2192.089539 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! Unit 2 is the lead unit for vehicle 2
! H_CG_TL(2) 546.4718485 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 1852.878013 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(2) 1.110223025e-13 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        3754 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 1649.271892 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 7610.282579 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 7609.866445 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! Unit 3 is trailer #1 for vehicle 2
! H_CG_TL(3) 910.5549613 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 2249.667995 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(3) 1.33226763e-12 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)         753 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 746.1525152 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 1932.218693 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 1891.796178 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

! Unit 1 is the lead unit for vehicle 1
H_CG_SU(1)        540 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1015 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          1270 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)       536.6 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)      1536.7 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)      1536.7 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)           0 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1405 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(1)        4600 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(1)        2082 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(1)        800 ; mm ! Length from front to control pt (maybe for target)

! Unit 2 is the lead unit for vehicle 2
H_CG_SU(2)        710 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      1350 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          2100 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)        1029 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)        4116 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)        4116 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(2) 562.6119403 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 2
! LX_CG_SL(2) 1872.38806 ; mm ! CALC -- X distance SL CG is behind origin
! Y_CG_SL(2)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 2
! M_SL(2)        3350 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 2
! IXX_SL(2) 1484.258396 ; kg-m2 ! CALC -- Roll inertia for SL, unit 2
! IYY_SL(2) 6607.079291 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 2
! IZZ_SL(2) 6484.820896 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 2
! IXY_SL(2)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 2
! IXZ_SL(2) -433.3208955 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 2
! IYZ_SL(2)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 2

HT_SM(2)         1960 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        4900 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(2)        2262 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)        900 ; mm ! Length from front to control pt (maybe for target)

! Unit 3 is trailer #1 for vehicle 2
H_H_FRONT(3)      675 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(3)        970 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)      2000 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)           465 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)         710 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)        1810 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)        1764 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
IXZ_SU(3)           0 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(3) 948.9473684 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 3
! LX_CG_SL(3) 2150.37594 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(3)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 3
! M_SL(3)         665 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 3
! IXX_SL(3) 724.0152632 ; kg-m2 ! CALC -- Roll inertia for SL, unit 3
! IYY_SL(3) 1854.317669 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 3
! IZZ_SL(3) 1815.632406 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 3
! IXY_SL(3)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 3
! IXZ_SL(3) -4.894736842 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 3
! IYZ_SL(3)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 3

HT_SM(3)         1757 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(3)        3005 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(3)        2024 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(3)      -1300 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             2 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     2 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; Crate for Large Euro. Van
OPT_PL_BODY_ID(1)   2 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(1)      2750 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)        315 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)          1250 ; kg ! Mass of payload [I]
IXX_PL(1)         333 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)         833 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)         833 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(2)     2 ; Rental Trailer
OPT_PL_BODY_ID(2)   3 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(2)      2500 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(2)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(2)        900 ; mm ! Z coordinate of payload mass center [I]
M_PL(2)           200 ; kg ! Mass of payload [I]
IXX_PL(2)       13.33 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(2)        8.67 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(2)       16.67 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(2)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(2)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(2)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.


! FZH_L(2) 1846.919083 ; N ! CALC -- Static load, laden vehicle, hitch 2
! FZH_UL(2) 1520.03075 ; N ! CALC -- Static load, unladen vehicle, hitch 2
HITCH_DMP_X(2)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 2
HITCH_DMP_Y(2)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 2
HITCH_DMP_Z(2)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 2
HITCH_FRIC_X(2)     0 ; N-m ! [D] Roll friction, hitch 2
HITCH_FRIC_Y(2)     0 ; N-m ! [D] Pitch friction, hitch 2
HITCH_FRIC_Z(2)     0 ; N-m ! [D] Articulation friction, hitch 2
HITCH_FREQ(2)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 2 [I]
HITCH_ZETA(2)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 2 [I]
H_H(2)            355 ; mm ! Hitch point height (Z coord.), sprung mass 2 [I]
LX_H(2)          4150 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(2)              0 ; mm ! Y coordinate, hitch point 2 [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      2.2 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    2910 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -1455 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)      2.5 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)    3100 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)   -1550 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)        0 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)       0 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)       0 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. For solid-axle
! suspensions, these include the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE,
! SUSP_X_AXLE, and SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the
! origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1,1)       325 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       325 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1,1)    1.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,1,2)    1.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1,1) 0.85 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,1,2) 0.85 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1,1)         0.1 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)         0.1 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)   0.05 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)   0.05 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     1675 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1,1) 12.13 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,1,2) 12.13 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1,1) 32.17 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2) 32.17 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)     132.6 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.8170437406 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_WC(1,2,1)       325 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       325 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(1,2,1)    1.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(1,2,2)    1.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(1,2,1) 0.85 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(1,2,2) 0.85 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(1,2,1)         0.1 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)         0.1 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)   0.05 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)   0.05 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1675 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     2910 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(1,2,1)  27.2 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(1,2,2)  27.2 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      98.4 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.4471544715 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Generic/independent suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R3 [I]
H_WC(2,1,1)       355 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(2,1,2)       355 ; mm ! Reference Z coordinate of wheel center R3 [I]
! ISPIN(2,1,1)   5.49 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L3 [I]
! ISPIN(2,1,2)   5.49 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R3 [I]
! ISPIN_XXZZ(2,1,1) 2.96 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L3 [I]
! ISPIN_XXZZ(2,1,2) 2.96 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R3 [I]
IW(2,1,1)        2.69 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(2,1,2)        2.69 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(2,1,1)   1.36 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(2,1,2)   1.36 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(2,1)     1550 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(2,1)        0 ; mm ! [D] X dist. axle 3 is behind the sprung-mass origin [I]
M_US_IND(2,1,1) 19.04 ; kg ! Unsteered suspension mass for wheel L3 [I]
M_US_IND(2,1,2) 19.04 ; kg ! Unsteered suspension mass for wheel R3 [I]
M_US_STR(2,1,1) 44.46 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(2,1,2) 44.46 ; kg ! Steered mass for wheel R3 [I]
! M_US(2,1)       183 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(2,1) 0.7919125683 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(2,2)    400 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(2,2,1)       355 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,2,2)       355 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(2,2)            33 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
! ISPIN(2,2,1)    5.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L4 [I]
! ISPIN(2,2,2)    5.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R4 [I]
! ISPIN_XXZZ(2,2,1) 3.12 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L4 [I]
! ISPIN_XXZZ(2,2,2) 3.12 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R4 [I]
IW(2,2,1)           3 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,2,2)           3 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,2,1)   1.52 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,2,2)   1.52 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,2)     1550 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,2)     3100 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    165 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,2)       221 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,2) 0.2533936652 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
Y_CG_AXLE(2,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
A_CAMBER(3,1,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(3,1,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(3,1,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(3,1,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(3,1)    600 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(3,1,1)       600 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(3,1,2)       600 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(3,1)            10 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
! ISPIN(3,1,1)   2.44 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L5 [I]
! ISPIN(3,1,2)   2.44 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R5 [I]
! ISPIN_XXZZ(3,1,1) 1.32 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L5 [I]
! ISPIN_XXZZ(3,1,2) 1.32 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R5 [I]
IW(3,1,1)        0.04 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(3,1,2)        0.04 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(3,1,1)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(3,1,2)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(3,1)     1800 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(3,1)     3000 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(3,1)     36 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(3,1,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(3,1,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(3,1)        88 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(3,1) 0.5909090909 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
Y_CG_AXLE(3,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Generic/independent suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 156.6131609 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 156.6131609 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1,1) 8110.369149 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 8110.369149 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 4228.555343 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 4228.555343 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 9410.730939 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 9410.730939 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 4705.365469 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 4705.365469 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 1045.059817 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) -11.2576049 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) -11.2576049 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(1,2) 4344.076351 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 4344.076351 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 2725.267473 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 2725.267473 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 5309.050711 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 5309.050711 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 2654.525356 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 2654.525356 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 1092.583222 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Generic/independent suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(2,1,1) 48.04851049 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(2,1,2) 48.04851049 ; mm ! CALC -- Compression at design load, spring R3
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
! FSA_DESIGN(2,1) 11625.6254 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(2,1) 12384.05906 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(2,1,1) 10134.25455 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(2,1,2) 10134.25455 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(2,1) 14178.67601 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(2,1) 13420.24235 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(2,1,1) 7089.338005 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(2,1,2) 7089.338005 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(2,1) 4661.221993 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R4 [I]
! CMP_DESIGN(2,2,1) -53.95843629 ; mm ! CALC -- Compression at design load, spring
                                 ! L4
! CMP_DESIGN(2,2,2) -53.95843629 ; mm ! CALC -- Compression at design load, spring
                                 ! R4
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(2,2) 8968.339597 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,2) 22315.13752 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,2,1) 11157.56876 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,2,2) 11157.56876 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,2) 24482.40717 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,2) 11135.60925 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,2,1) 12241.20359 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,2,2) 12241.20359 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,2) 1964.953516 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(2,2)   1100 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(2,2) 1200 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(2,2) 1200 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(2,2)   1200 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R5 [I]
! CMP_DESIGN(3,1,1) 38.00076875 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(3,1,2) 38.00076875 ; mm ! CALC -- Compression at design load, spring R5
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(3,1,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(3,1,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(3,1,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(3,1,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(3,1) 3040.0615 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(3,1) 4674.503167 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(3,1,1) 2337.251583 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(3,1,2) 2337.251583 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(3,1) 5537.488367 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(3,1) 3903.0467 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(3,1,1) 2768.744183 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(3,1,2) 2768.744183 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(3,1) 1108.145492 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(3,1)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(3,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(3,1) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(3,1) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(3,1)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(3,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC(1)    1 ! Option for calculating steering wheel torque when the angle
                      ! is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table, 1 ->
                      ! calculated (see the steering Help document for details),
                      ! vehicle 1 [I]
OPT_POWER(1)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 1 [I]
OPT_STEER_DEF(1)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 1
OPT_I_GEAR_IN(1)    0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 1 [I]
BETA_COL(1)       0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL(1)        0.002 ; N-m-s/deg ! Steering column viscous damping, vehicle 1
D_TBAR(1)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 1
HYS_COL(1)        0.2 ; N-m ! Steering column friction torque, vehicle 1
I_COL(1)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(1) 0.000296 ; kg-m2 ! Steering system inertia, vehicle 1
F_BOOST_MAX(1)   3000 ; N ! Maximum power steering boost force, vehicle 1
TC_BOOST(1)      0.02 ; s ! Time constant for power steering boost, vehicle 1
A_STR_STOP_L(1)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(1)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(1)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 1
K_STR_STOP_R(1)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 1

OPT_M_SW_CALC(2)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 2 [I]
OPT_POWER(2)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 2 [I]
OPT_STEER_DEF(2)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 2
OPT_I_GEAR_IN(2)    0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 2 [I]
BETA_COL(2)       0.5 ; deg ! Ref hysteretic angle for steering column friction
D_COL(2)         0.01 ; N-m-s/deg ! Steering column viscous damping, vehicle 2
D_TBAR(2)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 2
HYS_COL(2)        0.1 ; N-m ! Steering column friction torque, vehicle 2
I_COL(2)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(2)   0.0005 ; kg-m2 ! Steering system inertia, vehicle 2
M_BOOST_MAX(2)   1200 ; N-m ! Maximum power steering boost torque
TC_BOOST(2)      0.02 ; s ! Time constant for power steering boost, vehicle 2
A_STR_STOP_L(2)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(2)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(2)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 2
K_STR_STOP_R(2)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 2

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         0 ! [D] Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       1 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)     3 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)     3 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)     13.5 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)     13.5 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)    5 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)    5 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1,1)    0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1,1)       4.5 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1,1)     250 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1,1)     75.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)     75.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  0 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(2,1)         0 ! [D] Compliant steer option, axle 3: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(2,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(2,1,1)   3.5 ; deg ! Caster for wheel L3 [I]
A_CASTER(2,1,2)   3.5 ; deg ! Caster for wheel R3 [I]
A_KPI(2,1,1)        8 ; deg ! Kingpin inclination for wheel L3 [I]
A_KPI(2,1,2)        8 ; deg ! Kingpin inclination for wheel R3 [I]
A_MZ_BETA(2,1,1)    0 ; deg ! Ref. hysteresis angle for L3 parking steer torque
A_MZ_BETA(2,1,2)    0 ; deg ! Ref. hysteresis angle for R3 parking steer torque
BETA_GEAR(2,1)    0.5 ; deg ! Ref hys. angle for steering gear friction, axle 3
D_GEAR(2,1)         4 ; N-m-s/deg ! Steering gear viscous damping, axle 3
HYS_GEAR(2,1)       0 ; N-m ! Steering gear hysteresis, axle 3
L_KPO(2,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L3 [I]
L_KPO(2,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R3 [I]
X_KPO(2,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L3 [I]
X_KPO(2,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R3 [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1)  100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1,1)    6500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         1.5 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1,1)    0.8 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1,1)      22 ; kg ! Mass of tire L1
MU_REF_X(1,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1,1)         334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        325 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1,1)    0.0038 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)   2.6e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,1,2) 1 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2)  100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,1,2)    6500 ; N ! Reference vertical force
IT(1,1,2)         1.5 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,1,2)    0.8 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,1,2)      22 ; kg ! Mass of tire R1
MU_REF_X(1,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,1,2)         334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2)        325 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,1,2)    0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2)   2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1)  100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(1,2,1)    6500 ; N ! Reference vertical force
IT(1,2,1)         1.5 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(1,2,1)    0.8 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(1,2,1)      22 ; kg ! Mass of tire L2
MU_REF_X(1,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(1,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(1,2,1)         334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        325 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(1,2,1)    0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)   2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2) 1 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2)  100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(1,2,2)    6500 ; N ! Reference vertical force
IT(1,2,2)         1.5 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(1,2,2)    0.8 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(1,2,2)      22 ; kg ! Mass of tire R2
MU_REF_X(1,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(1,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(1,2,2)         334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2)        325 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(1,2,2)    0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2)   2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L3 [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1)  100000 ; N ! Maximum allowed vertical force, tire L3 [I]
FZ_REF(2,1,1)   11500 ; N ! Reference vertical force
IT(2,1,1)         2.8 ; kg-m2 ! Spin inertia for tire L3 [I]
IT_XXZZ(2,1,1)    1.6 ; kg-m2 ! XX/ZZ inertia for tire L3 [I]
M_TIRE(2,1,1)      28 ; kg ! Mass of tire L3
MU_REF_X(2,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L3
MU_REF_Y(2,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L3
R0(2,1,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L3 [I]
RR_C(2,1,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, R3 [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2)  100000 ; N ! Maximum allowed vertical force, tire R3 [I]
FZ_REF(2,1,2)   11500 ; N ! Reference vertical force
IT(2,1,2)         2.8 ; kg-m2 ! Spin inertia for tire R3 [I]
IT_XXZZ(2,1,2)    1.6 ; kg-m2 ! XX/ZZ inertia for tire R3 [I]
M_TIRE(2,1,2)      28 ; kg ! Mass of tire R3
MU_REF_X(2,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R3
MU_REF_Y(2,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R3
R0(2,1,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R3 [I]
RR_C(2,1,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, L4 [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1)  100000 ; N ! Maximum allowed vertical force, tire L4 [I]
FZ_REF(2,2,1)   11500 ; N ! Reference vertical force
IT(2,2,1)         2.8 ; kg-m2 ! Spin inertia for tire L4 [I]
IT_XXZZ(2,2,1)    1.6 ; kg-m2 ! XX/ZZ inertia for tire L4 [I]
M_TIRE(2,2,1)      28 ; kg ! Mass of tire L4
MU_REF_X(2,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire L4
MU_REF_Y(2,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire L4
R0(2,2,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L4 [I]
RR_C(2,2,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R4 [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2)  100000 ; N ! Maximum allowed vertical force, tire R4 [I]
FZ_REF(2,2,2)   11500 ; N ! Reference vertical force
IT(2,2,2)         2.8 ; kg-m2 ! Spin inertia for tire R4 [I]
IT_XXZZ(2,2,2)    1.6 ; kg-m2 ! XX/ZZ inertia for tire R4 [I]
M_TIRE(2,2,2)      28 ; kg ! Mass of tire R4
MU_REF_X(2,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R4
MU_REF_Y(2,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R4
R0(2,2,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R4 [I]
RR_C(2,2,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1) 1 ! Internal tire shear-model option, L5 [I]
OPT_TIRE_COMB(3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1)  100000 ; N ! Maximum allowed vertical force, tire L5 [I]
FZ_REF(3,1,1)   16000 ; N ! Reference vertical force
IT(3,1,1)         2.4 ; kg-m2 ! Spin inertia for tire L5 [I]
IT_XXZZ(3,1,1)    1.3 ; kg-m2 ! XX/ZZ inertia for tire L5 [I]
M_TIRE(3,1,1)      26 ; kg ! Mass of tire L5
MU_REF_X(3,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L5
MU_REF_Y(3,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L5
R0(3,1,1)         391 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1)        367 ; mm ! Effective rolling radius (Vx/AVy), tire L5 [I]
RR_C(3,1,1)    0.0045 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2) 1 ! Internal tire shear-model option, R5 [I]
OPT_TIRE_COMB(3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2)  100000 ; N ! Maximum allowed vertical force, tire R5 [I]
FZ_REF(3,1,2)   16000 ; N ! Reference vertical force
IT(3,1,2)         2.4 ; kg-m2 ! Spin inertia for tire R5 [I]
IT_XXZZ(3,1,2)    1.3 ; kg-m2 ! XX/ZZ inertia for tire R5 [I]
M_TIRE(3,1,2)      26 ; kg ! Mass of tire R5
MU_REF_X(3,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R5
MU_REF_Y(3,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R5
R0(3,1,2)         391 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2)        367 ; mm ! Effective rolling radius (Vx/AVy), tire R5 [I]
RR_C(3,1,2)    0.0045 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL(1)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 1

OPT_BK_PEDAL(2)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 2

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)     0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)      0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)     0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)      0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)     0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)      0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)     0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)      0 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(2,1,1)     0.06 ; s ! Time constant for brake actuator L3
TLAG_BK(2,1,1)      0 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(2,1,2)     0.06 ; s ! Time constant for brake actuator R3
TLAG_BK(2,1,2)      0 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,2,1)     0.06 ; s ! Time constant for brake actuator L4
TLAG_BK(2,2,1)      0 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,2,2)     0.06 ; s ! Time constant for brake actuator R4
TLAG_BK(2,2,2)      0 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(3,1,1)        0 ; s ! Time constant for brake actuator L5
TLAG_BK(3,1,1)      0 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(3,1,2)        0 ; s ! Time constant for brake actuator R5
TLAG_BK(3,1,2)      0 ; s ! Transport time delay for fluid to reach brake R5 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT(1)           1 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise, vehicle 1 [L]
OPT_PT(2)           2 ! Powertrain type, vehicle 2 [L]

OPT_HEV(1)          0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric, vehicle 1
R_MDRIVE(1)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 1 [I]
VLOW_IW(1)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 1

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1,1) 1 ! Front diff model: 1 -> internal, 0 -> external, vehicle 1
                         ! [I]
OPT_LOCKED_DIFF(1,1) 0 ! Is the front diff locked? 0 -> no, 1 -> yes, vehicle 1 [I]
LOCKED_DIFF_DAMP(1,1) 1 ; N-m-s/deg ! Torsional damping for locked front diff,
                        ! vehicle 1 [I]
LOCKED_DIFF_K(1,1) 100 ; N-m/deg ! Torsional spring rate for locked front diff,
                       ! vehicle 1 [I]
R_EFF_F_DIFF(1,1) 0.99 ; - ! Forward efficiency of front diff, vehicle 1 [I]
R_EFF_R_DIFF(1,1) 0.99 ; - ! Reverse efficiency of front diff, vehicle 1 [I]
R_GEAR_DIFF(1,1)  4.1 ; - ! Gear ratio of front diff, vehicle 1 [I]
IDS(1,1)        0.013 ; kg-m2 ! Spin inertia of front diff input shaft, vehicle 1
                      ! [I]
IHS_L(1,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, front diff, vehicle
                      ! 1 [I]
IHS_R(1,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, front diff,
                      ! vehicle 1 [I]
OPT_CLUTCH_DIFF(1,1) 0 ! [D] Clutch control for front diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 1 [I]
OPT_TWIN_CLUTCH(1,1) 0 ! [D] Twin clutches on front diff? 0 -> no, 1 -> yes, vehicle
                       ! 1 [I]

OPT_HEV(2)          0 ! Propulsion type, vehicle 2
R_MDRIVE(2)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 2 [I]
VLOW_IW(2)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 2

OPT_DIFF_INTERNAL(2,2) 1 ! Rear diff model: 1 -> internal, 0 -> external, vehicle 2
                         ! [I]
OPT_LOCKED_DIFF(2,2) 0 ! Is the rear diff locked? 0 -> no, 1 -> yes, vehicle 2 [I]
LOCKED_DIFF_DAMP(2,2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff,
                          ! vehicle 2 [I]
LOCKED_DIFF_K(2,2) 80 ; N-m/deg ! Torsional spring rate for locked rear diff,
                      ! vehicle 2 [I]
R_EFF_F_DIFF(2,2) 0.99 ; - ! Forward efficiency of rear diff, vehicle 2 [I]
R_EFF_R_DIFF(2,2) 0.99 ; - ! Reverse efficiency of rear diff, vehicle 2 [I]
R_GEAR_DIFF(2,2)  4.1 ; - ! Gear ratio of rear diff, vehicle 2 [I]
IDS(2,2)        0.013 ; kg-m2 ! Spin inertia of rear diff input shaft, vehicle 2 [I]
IHS_L(2,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, rear diff, vehicle
                      ! 2 [I]
IHS_R(2,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, rear diff, vehicle
                      ! 2 [I]
OPT_CLUTCH_DIFF(2,2) 0 ! [D] Clutch control for rear diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 2 [I]
OPT_TWIN_CLUTCH(2,2) 0 ! [D] Twin clutches on rear diff? 0 -> no, 1 -> yes, vehicle
                       ! 2 [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE(1)     ! VS Command to install an engine, vehicle 1
INSTALL_ENGINE(2)     ! VS Command to install an engine, vehicle 2

OPT_ENGINE_INTERNAL(1) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(1) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(1) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(1)    750 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(1)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(1)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(1) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(1)          0.16 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(2) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(2) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(2) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(2)    675 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(2)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(2)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(2) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(2)          0.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE(1)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 1
INSTALL_TORQUE_TRANSFER_DEVICE(2)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 2

OPT_CLUTCH(1)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(1) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(2)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(2) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION(1)  ! VS Command to install a transmission, vehicle 1
INSTALL_TRANSMISSION(2)  ! VS Command to install a transmission, vehicle 2

OPT_TRANS_INTERNAL(1) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(1) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(1)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(1) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(1)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(1)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(1) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(1) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(1) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(1)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 1
R_EFF_TR_F(1,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,1)  3.538 ; - ! 1st-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 1 [I]
T_SHIFT_DOWN(1,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 1 [I]

ITR(1,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,2)   2.06 ; - ! 2nd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 1
T_SHIFT_DOWN(1,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 1

ITR(1,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,3)  1.404 ; - ! 3rd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 1
T_SHIFT_DOWN(1,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 1

ITR(1,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 1
T_SHIFT_DOWN(1,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 1

ITR(1,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,5)  0.713 ; - ! 5th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 1
T_SHIFT_DOWN(1,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 1

ITR(1,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,6)  0.582 ; - ! 6th-gear ratio of transmission, vehicle 1

DRIVELINE_FREQ(1)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(1) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(2) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(2) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(2)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(2) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(2)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(2)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(2) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(2) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(2) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(2)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(2,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 2
R_EFF_TR_F(2,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,1)    3.1 ; - ! 1st-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 2 [I]
T_SHIFT_DOWN(2,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 2 [I]

ITR(2,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,2)   1.81 ; - ! 2nd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 2
T_SHIFT_DOWN(2,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 2

ITR(2,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,3)   1.41 ; - ! 3rd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 2
T_SHIFT_DOWN(2,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 2

ITR(2,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 2
T_SHIFT_DOWN(2,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 2

ITR(2,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,5)   0.71 ; - ! 5th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 2
T_SHIFT_DOWN(2,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 2

ITR(2,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,6)   0.61 ; - ! 6th-gear ratio of transmission, vehicle 2

DRIVELINE_FREQ(2)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(2) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             8 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        8 ! VS Command to install reference paths

PATH_ID(1)       1000 ; 16 m Radius
OPT_PATH_START(1)   1 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! SPATH_LAP(1) 100.5309649 ; m ! CALC -- Lap distance for this path
HEADING_START(1)    0 ; deg ! Heading at the start of this path
X_PATH_START(1)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(1)   -16 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,1) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,1)  360 ; deg ! Central angle of arc
! S_SEGMENT_END(1,1) 100.5309649 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) -3.918869757e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) -16 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) -1.40334186e-14 ; deg ! CALC -- Heading at end of segment

PATH_ID(2)       1001 ; South Entrance, 1st Exit, 1001
OPT_PATH_START(2)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
HEADING_START(2)   90 ; deg ! Heading at the start of this path
X_PATH_START(2)   2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(2) -83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        3 ! Number of segments in this path
SEGMENT_TYPE(2,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,1) 50 ; m ! Segment length
! S_SEGMENT_END(2,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(2,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(2,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(2,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,2) 33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,2) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,2)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,3) 50 ; m ! Segment length
! S_SEGMENT_END(2,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,3) 83.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,3) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,3)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; East Entrance, 1st Exit, 1002
OPT_PATH_START(3)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! Station at the start of this path
HEADING_START(3)  180 ; deg ! Heading at the start of this path
X_PATH_START(3)  83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(3)   2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        3 ! Number of segments in this path
SEGMENT_TYPE(3,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,1) 50 ; m ! Segment length
! S_SEGMENT_END(3,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(3,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(3,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(3,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,2) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,2) 33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,2) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,3) 50 ; m ! Segment length
! S_SEGMENT_END(3,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,3) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,3) 83.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,3) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1003 ; North Entrance, 1st Exit, 1003
OPT_PATH_START(4)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)      0 ; m ! Station at the start of this path
HEADING_START(4)  -90 ; deg ! Heading at the start of this path
X_PATH_START(4)  -2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(4)  83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        3 ! Number of segments in this path
SEGMENT_TYPE(4,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,1) 50 ; m ! Segment length
! S_SEGMENT_END(4,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(4,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(4,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(4,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,2) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,2) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,2) -180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,3) 50 ; m ! Segment length
! S_SEGMENT_END(4,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,3) -83.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,3) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,3) -180 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       1004 ; West Entrance, 1st Exit, 1004
OPT_PATH_START(5)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)      0 ; m ! Station at the start of this path
HEADING_START(5)    0 ; deg ! Heading at the start of this path
X_PATH_START(5) -83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(5)  -2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        3 ! Number of segments in this path
SEGMENT_TYPE(5,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,1) 50 ; m ! Segment length
! S_SEGMENT_END(5,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(5,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(5,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(5,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,2) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,2) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,2) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,3) 50 ; m ! Segment length
! S_SEGMENT_END(5,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,3) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,3) -83.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,3) -90 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)          6 ; Straight East
OPT_PATH_START(6)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)      0 ; m ! Station at the start of this path
! HEADING_START(6)  0 ; deg ! Heading at the start of this path
! X_PATH_START(6)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(6)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        1 ! Number of segments in this path
SEGMENT_TYPE(6,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,1) 100 ; m ! Segment length
! S_SEGMENT_END(6,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(7)       1021 ; South Entrance, 3d Exit, 1021
OPT_PATH_START(7)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(7)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(7)      0 ; m ! Station at the start of this path
HEADING_START(7)   90 ; deg ! Heading at the start of this path
X_PATH_START(7)   2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(7) -83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(7)        5 ! Number of segments in this path
SEGMENT_TYPE(7,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(7,1) 50 ; m ! Segment length
! S_SEGMENT_END(7,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,1) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,1) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,2)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(7,2) 74.74004215 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,2) 11.32613639 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,2) -11.32613639 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,2) 45 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,3) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,3)  180 ; deg ! Central angle of arc
! S_SEGMENT_END(7,3) 125.0055246 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,3) -11.30128061 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,3) 11.30128061 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,3) -135 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,4)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,4) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,4)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(7,4) 149.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,4) -33.57514421 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,4) 2.075144213 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,4) -180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,5)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(7,5) 50 ; m ! Segment length
! S_SEGMENT_END(7,5) 199.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,5) -83.57514421 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,5) 2.075144213 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,5) -180 ; deg ! CALC -- Heading at end of segment

PATH_ID(8)       1024 ; West Entrance, 3d Exit, 1024
OPT_PATH_START(8)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(8)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(8)      0 ; m ! Station at the start of this path
HEADING_START(8)    0 ; deg ! Heading at the start of this path
X_PATH_START(8) -83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(8)  -2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(8)        5 ! Number of segments in this path
SEGMENT_TYPE(8,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(8,1) 50 ; m ! Segment length
! S_SEGMENT_END(8,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,1) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,1) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,2)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(8,2) 74.74004215 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,2) -11.32613639 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,2) -11.32613639 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,2) -45 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,3) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,3)  180 ; deg ! Central angle of arc
! S_SEGMENT_END(8,3) 125.0055246 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,3) 11.30128061 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,3) 11.30128061 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,3) 135 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,4)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,4) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,4)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(8,4) 149.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,4) 2.075144213 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,4) 33.57514421 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,4) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,5)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(8,5) 50 ; m ! Segment length
! S_SEGMENT_END(8,5) 199.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,5) 2.075144213 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,5) 83.57514421 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,5) 90 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             6 ! Number of installed road surfaces (read only)
NROAD_DZ            2 ! Number of ROAD_DZ datasets
DEFINE_ROADS        6 ! VS Command to define road surfaces
CURRENT_ROAD_ID(1) 1001 ! ROAD_ID during initialization, vehicle 1 [I]
CURRENT_ROAD_ID(2) 1004 ! ROAD_ID during initialization, vehicle 2 [I]

ROAD_ID(1)       1000 ; Circle, 1000
ROAD_PATH_ID(1)  1000 ; PATH_ID for: 16 m Radius
ROAD_SMAX_NEW_ID(1) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)    1000 ; ROAD_DZ_ID for: Inside Apron for 16 m Radius Circle

ROAD_ID(2)       1001 ; Enter S, Exit E, 1001
ROAD_PATH_ID(2)  1001 ; PATH_ID for: South Entrance, 1st Exit, 1001
ROAD_SMAX_NEW_ID(2) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(2,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(3)       1002 ; Enter E, Exit N, 1002
ROAD_PATH_ID(3)  1002 ; PATH_ID for: East Entrance, 1st Exit, 1002
ROAD_SMAX_NEW_ID(3) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(3) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(3)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(3,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(4)       1003 ; Enter N, Exit W, 1003
ROAD_PATH_ID(4)  1003 ; PATH_ID for: North Entrance, 1st Exit, 1003
ROAD_SMAX_NEW_ID(4) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(4) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(4)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(4,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(5)       1004 ; Enter W, Exit S, 1004
ROAD_PATH_ID(5)  1004 ; PATH_ID for: West Entrance, 1st Exit, 1004
ROAD_SMAX_NEW_ID(5) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(5) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(5)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(5,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(6)          6 ; Big Grass
ROAD_PATH_ID(6)     6 ; PATH_ID for: Straight East
ROAD_SMAX_NEW_ID(6) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(6) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(6)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             2 ! Number of LTARG datasets that are used in this run

PATH_ID_DM(1)    1021 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(1)      1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0), vehicle 1
OPT_INIT_PATH(1)    1 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_INIT_STA_ROAD(1) 1 ! [D] Find vehicle road station "Sta_Road" automatically when
                       ! the reference path for CURRENT_ROAD_ID is not PATH_ID_DM?
                       ! 1 -> yes, 0 -> no, vehicle 1 [I]
OPT_DIRECTION(1)    1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station, vehicle 1 [I]
SSTART(1)           0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]

OPT_DM(1)           3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point, vehicle 1 [I]
OPT_DRIVER_ACTION(1) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ(1)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(1)    720 ; deg ! Limit steering wheel angle for DM, vehicle 1
AV_SW_MAX_DM(1)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 1
VLOW_DM(1)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(1)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(1)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(1)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(1)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(2)    1024 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(2)      2 ! LTARG_ID of LTARG for the DM, vehicle 2
OPT_INIT_PATH(2)    1 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(2) 1 ! [D] Find road station automatically, vehicle 2 [I]
OPT_DIRECTION(2)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 2 [I]
SSTART(2)          65 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(2)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 2 [I]
OPT_DRIVER_ACTION(2) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(2)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(2)    720 ; deg ! Limit steering wheel angle for DM, vehicle 2
AV_SW_MAX_DM(2)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 2
VLOW_DM(2)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(2)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(2)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(2)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(2)          0 ; mm ! [D] Local Y coordinate of DM ref. point
INSTALL_DM_OUTPUTS(2)  ! VS Command to install XYZ outputs DM preview point(s)
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      2 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC(1)           4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd, vehicle 1 [I]
OPT_AUTO_RESET_IC(1) 1 ! Reset integral of speed error Vx_Err when Vx_Err changes
                       ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no,
                       ! vehicle 1
OPT_SC_3D(1)        0 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL(1)     2 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING(1) 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018(1)      0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC(1)      1 ! SPEED_TARGET_ID for speed controller, vehicle 1 [I]
BK_PERF_SC(1)       1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(1)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(1) 8 ; m ! Speed controller: length of path used to calculate
                       ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP(1)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(1)      0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(1)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(1)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(1) 0 ; m ! Speed controller: path preview start (distance in
                         ! front of sprung mass origin), vehicle 1 [I]
SPEED_PREVIEW_STEP(1) 4 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(1)  2 ; m ! Integral control deadband for auto reset

OPT_SC(2)           4 ! Speed controller option: 0 - 5, vehicle 2 [I]
OPT_AUTO_RESET_IC(2) 1 ! [D] Auto-reset integral of speed error Vx_Err?, vehicle 2
OPT_SC_3D(2)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(2)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(2) 1 ! Use engine braking in SC?
OPT_SC_2018(2)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(2)      2 ! SPEED_TARGET_ID for speed controller, vehicle 2 [I]
BK_PERF_SC(2)       1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(2)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(2) 8 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(2)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(2)      0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(2)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(2)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(2) 0 ; m ! Path preview start (front of Xo), vehicle 2 [I]
SPEED_PREVIEW_STEP(2) 4 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(2)  1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1) 0.09 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       2 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2) 0.09 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.12 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       2 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1) 0.15 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.18 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2) 0.15 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.18 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   0 ! ABS control option, unit 3, axle 1

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           1 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      1 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; Forward Radar
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      3 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 60 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -60 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 100 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)     -1250 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      1450 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT           3 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 3 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; IUNIT_OBJ (Narrow)
IUNIT_OBJ(1)        2 ! Attach object to sprung mass of this vehicle unit, or 0 ->
                      ! don't attach to a sprung mass [I]
SHAPE_TYPE_OBJ(1)   1 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
H_OBJ(1)         1.96 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)     4.9 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(1)   0.9 ; m ! Distance from reference point to front of rectangular
                      ! object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)   1.8096 ; m ! Width of rectangular object
MsgObj_1            4 ; - ! Output: User-defined Message (code) for object
TypeO_1           202 ; - ! Output: User-defined Type (code) for object
V_Obj_1   27.87070037 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1  -19.16050065 ; m ! Output: X coordinate of object 1
Y_Obj_1  -5.604449307 ; m ! Output: Y coordinate of object 1
Z_Obj_1   1.007742131 ; m ! Output: Z coordinate of object 1
YawO_1   -27.28370453 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO1   -1.13187259 ; deg ! Output: Pitch angle of object 1
RollO_1             0 ; deg ! Output: Roll angle of object 1

OBJECT_NAME(2)      2 ; IUNIT_OBJ (Narrow)
IUNIT_OBJ(2)        3 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(2)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)        1.757 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)   3.005 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(2)  -1.3 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(2)   1.6192 ; m ! Width of rectangular object
MsgObj_2            4 ; - ! Output: User-defined Message (code) for object
TypeO_2           202 ; - ! Output: User-defined Type (code) for object
V_Obj_2             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2  -22.88187538 ; m ! Output: X coordinate of object 2
Y_Obj_2  -3.685044739 ; m ! Output: Y coordinate of object 2
Z_Obj_2  0.5049079945 ; m ! Output: Z coordinate of object 2
YawO_2   -27.28370453 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO2      2.633065 ; deg ! Output: Pitch angle of object 2
RollO_2             0 ; deg ! Output: Roll angle of object 2

OBJECT_NAME(3)      3 ; 1 Driver Preview Point veh 2
IUNIT_OBJ(3)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(3)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(3)   1000 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(3)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(3)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(3)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(3)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(3)        2 ; m ! [D] Width of rectangular object
MsgObj_3            0 ; - ! Output: User-defined Message (code) for object
S_RdO_3   87.28410254 ; m ! Output: Station of object on road path
TypeO_3             0 ; - ! Output: User-defined Type (code) for object
V_Obj_3             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3  -16.48242814 ; m ! Output: X coordinate of object 3
Y_Obj_3  -7.156877384 ; m ! Output: Y coordinate of object 3
YawO_3              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 10 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, right side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CD_MY_COEFFICIENT(1,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CD_MY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CD_MY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CD_MY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CD_MY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CD_MY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CD_MY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 2.9e-05 ! Coefficient: inclination displacement per unit
                                 ! force (deg/N), unit 1, axle 2, left side
CI_FY_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 2.9e-05 ! Coefficient: inclination displacement per unit
                                 ! force (deg/N), unit 1, axle 2, right side
CI_FY_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IVEHICLE and IDIFF are used to
! identify the dataset when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, front diff
CLUTCH_CONTROL_DIFF_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, rear diff
CLUTCH_CONTROL_DIFF_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IVEHICLE and IDIFF are used to identify the dataset
! when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1,1) 0 ; N-m ! [D] Constant available torque, veh 1,
                                   ! front diff
CLUTCH_TORQUE_DIFF_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,2) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! rear diff
CLUTCH_TORQUE_DIFF_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 10 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 0.797 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 0.797 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                   ! side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                   ! side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                   ! side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                   ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, left side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, right
                               ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 10 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 0.959 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 1, left side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 0.959 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 1, right side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 0.797 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 2, left side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 0.797 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 2, right side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 0.611 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 2, axle
                                      ! 1, left side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 0.611 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 2, axle
                                      ! 1, right side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 1, left side
CS_FY_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 1, right side
CS_FY_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) -1e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), unit 1, axle 2, left side
CS_FY_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) -1e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), unit 1, axle 2, right side
CS_FY_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, left side
CS_FY_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, right side
CS_FY_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 2, left side
CS_FY_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 2, right side
CS_FY_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 10 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 3.8e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 3.8e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 1, axle 1, left side
CT_FX_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 1, axle 1, right side
CT_FX_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 2, axle 1, left side
CT_FX_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 2, axle 1, right side
CT_FX_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 10 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 1, left side
C_LAT_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 1, right side
C_LAT_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,1) 3.8e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 2, left side
C_LAT_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,2) 3.8e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 2, right side
C_LAT_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, left side
C_LAT_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, right side
C_LAT_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 5 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(2,2) 3.8e-05 ! Coefficient: C_LAT_AXLE displacement per unit
                                    ! force (mm/N), unit 2, axle 2
C_LAT_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get C_LAT_AXLE
                       ! displacement
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 1
C_LAT_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

C_LONG_COEFFICIENT(1,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 1, left side
C_LONG_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 1, right side
C_LONG_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,1) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 2, left side
C_LONG_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,2) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 2, right side
C_LONG_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, left side
C_LONG_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, right side
C_LONG_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 5
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(2,2) 7e-05 ! Coefficient: C_LONG_AXLE displacement per unit
                                   ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get C_LONG_AXLE
                        ! displacement
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 1
C_LONG_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 34 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IGEAR are used to identify the
! dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 298
 0.2, 298
 0.8, 1150
 1, 1150
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 383
 0.2, 383
 0.8, 1969
 1, 1969
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 540
 0.2, 540
 0.8, 2528
 1, 2528
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 761
 0.2, 761
 0.8, 3564
 1, 3564
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 885
 0.2, 885
 0.8, 5020
 1, 5020
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 27 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 27 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(2,1,1) 198 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 198 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(3,1,1) 40 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 10 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 40 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 10 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 27 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 27 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(2,1,1) 198 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 198 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(3,1,1) 40 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) -10 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 40 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) -10 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

FUEL_RATE_CONSTANT(1) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(1)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(1) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(1) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(2) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(2)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(2) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(2) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FX_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFX2 component due to ride height

FX_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.02, 875.08, 1737.63, 2585.2, 3416.09, 4228.78, 5021.92, 5794.17, 6544.28
 0.04, 1611.78, 3198.13, 4754.26, 6276.83, 7762.98, 9210.15, 10615.91, 11977.93
 0.06, 2154.64, 4271.65, 6344.13, 8367.39, 10337.54, 12251.1, 14104.88, 15895.84
 0.08, 2523.89, 4999.87, 7419.39, 9776.76, 12067.35, 14287.13, 16432.43, 18499.84
 0.1, 2766.02, 5476.21, 8120.8, 10693.4, 13188.94, 15603.04, 17931.78, 20171.58
 0.12, 2923.08, 5784.49, 8573.61, 11283.6, 13909.08, 16445.51, 18888.84, 21235.43
 0.14, 3024.88, 5983.88, 8865.78, 11663.44, 14371.31, 16984.73, 19499.63, 21912.32
 0.16, 3090.77, 6112.63, 9053.95, 11907.37, 14667.26, 17328.9, 19888.19, 22341.47
 0.18, 3132.96, 6194.82, 9173.66, 12062.01, 14854.14, 17545.32, 20131.46, 22608.92
 0.2, 3159.17, 6245.66, 9247.33, 12156.63, 14967.81, 17676.12, 20277.48, 22768.29
 0.22, 3174.36, 6274.89, 9289.3, 12210, 15031.2, 17748.16, 20356.83, 22853.63
 0.24, 3181.79, 6288.92, 9308.99, 12234.37, 15059.28, 17778.98, 20389.45, 22887.15
 0.26, 3183.66, 6292.04, 9312.7, 12237.98, 15062.09, 17780.34, 20388.7, 22883.68
 0.28, 3181.46, 6287.21, 9304.77, 12226.47, 15046.54, 17760.28, 20363.72, 22853.38
 0.3, 3176.26, 6276.51, 9288.26, 12203.82, 15017.45, 17724.48, 20320.95, 22803.41
 0.32, 3168.82, 6261.44, 9265.35, 12172.89, 14978.33, 17677, 20264.99, 22738.88
 0.34, 3159.7, 6243.09, 9237.67, 12135.77, 14931.7, 17620.81, 20199.22, 22663.53
 0.36, 3149.31, 6222.28, 9206.39, 12094.02, 14879.47, 17558.14, 20126.15, 22580.16
 0.38, 3137.98, 6199.62, 9172.43, 12048.8, 14823.06, 17490.64, 20047.68, 22490.86
 0.4, 3125.94, 6175.59, 9136.48, 12001.03, 14763.59, 17419.61, 19965.26, 22397.25
 0.42, 3113.38, 6150.56, 9099.08, 11951.41, 14701.9, 17346.03, 19880.02, 22300.58
 0.44, 3100.45, 6124.8, 9060.66, 11900.47, 14638.65, 17270.69, 19792.83, 22201.81
 0.46, 3087.26, 6098.56, 9021.53, 11848.66, 14574.37, 17194.19, 19704.39, 22101.73
 0.48, 3073.9, 6072.01, 8981.97, 11796.31, 14509.48, 17117.03, 19615.25, 22000.93
 0.5, 3060.46, 6045.29, 8942.19, 11743.7, 14444.31, 17039.59, 19525.84, 21899.9
 0.52, 3046.98, 6018.53, 8902.36, 11691.06, 14379.13, 16962.17, 19436.52, 21799.02
 0.54, 3033.53, 5991.81, 8862.61, 11638.55, 14314.15, 16885.04, 19347.57, 21698.61
 0.56, 3020.12, 5965.21, 8823.06, 11586.32, 14249.54, 16808.38, 19259.21, 21598.92
 0.58, 3006.81, 5938.79, 8783.79, 11534.49, 14185.45, 16732.37, 19171.62, 21500.14
 0.6, 2993.61, 5912.6, 8744.88, 11483.14, 14121.99, 16657.12, 19084.95, 21402.42
 0.62, 2980.54, 5886.69, 8706.38, 11432.35, 14059.23, 16582.74, 18999.31, 21305.9
 0.64, 2967.62, 5861.07, 8668.34, 11382.18, 13997.26, 16509.31, 18914.79, 21210.68
 0.66, 2954.86, 5835.78, 8630.79, 11332.68, 13936.12, 16436.89, 18831.45, 21116.81
 0.68, 2942.27, 5810.83, 8593.76, 11283.87, 13875.86, 16365.53, 18749.36, 21024.37
 0.7, 2929.86, 5786.25, 8557.28, 11235.79, 13816.52, 16295.26, 18668.55, 20933.4
 0.72, 2917.63, 5762.04, 8521.35, 11188.46, 13758.1, 16226.12, 18589.04, 20843.91
 0.74, 2905.6, 5738.2, 8485.99, 11141.88, 13700.64, 16158.12, 18510.86, 20755.94
 0.76, 2893.76, 5714.75, 8451.21, 11096.08, 13644.14, 16091.26, 18434.02, 20669.5
 0.78, 2882.11, 5691.69, 8417.02, 11051.04, 13588.6, 16025.56, 18358.52, 20584.57
 0.8, 2870.66, 5669.02, 8383.4, 11006.79, 13534.02, 15961.01, 18284.35, 20501.17
 0.82, 2859.4, 5646.73, 8350.36, 10963.3, 13480.41, 15897.61, 18211.52, 20419.28
 0.84, 2848.33, 5624.84, 8317.91, 10920.58, 13427.75, 15835.35, 18140.02, 20338.9
 0.86, 2837.46, 5603.33, 8286.03, 10878.63, 13376.04, 15774.22, 18069.82, 20260
 0.88, 2826.78, 5582.2, 8254.72, 10837.44, 13325.27, 15714.21, 18000.92, 20182.56
 0.9, 2816.29, 5561.45, 8223.97, 10796.99, 13275.43, 15655.31, 17933.3, 20106.58
 0.92, 2805.99, 5541.07, 8193.78, 10757.27, 13226.51, 15597.49, 17866.93, 20032.02
 0.94, 2795.88, 5521.06, 8164.14, 10718.28, 13178.48, 15540.75, 17801.81, 19958.86
 0.96, 2785.94, 5501.41, 8135.04, 10680.01, 13131.34, 15485.06, 17737.9, 19887.09
 0.98, 2776.18, 5482.12, 8106.47, 10642.44, 13085.07, 15430.41, 17675.19, 19816.66
 1, 2766.61, 5463.18, 8078.42, 10605.56, 13039.66, 15376.77, 17613.66, 19747.56
 1.02, 2766.61, 5463.18, 8078.42, 10605.56, 13039.66, 15376.77, 17613.66, 19747.56
ENDTABLE
FX_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.02, 875.08, 1737.63, 2585.2, 3416.09, 4228.78, 5021.92, 5794.17, 6544.28
 0.04, 1611.78, 3198.13, 4754.26, 6276.83, 7762.98, 9210.15, 10615.91, 11977.93
 0.06, 2154.64, 4271.65, 6344.13, 8367.39, 10337.54, 12251.1, 14104.88, 15895.84
 0.08, 2523.89, 4999.87, 7419.39, 9776.76, 12067.35, 14287.13, 16432.43, 18499.84
 0.1, 2766.02, 5476.21, 8120.8, 10693.4, 13188.94, 15603.04, 17931.78, 20171.58
 0.12, 2923.08, 5784.49, 8573.61, 11283.6, 13909.08, 16445.51, 18888.84, 21235.43
 0.14, 3024.88, 5983.88, 8865.78, 11663.44, 14371.31, 16984.73, 19499.63, 21912.32
 0.16, 3090.77, 6112.63, 9053.95, 11907.37, 14667.26, 17328.9, 19888.19, 22341.47
 0.18, 3132.96, 6194.82, 9173.66, 12062.01, 14854.14, 17545.32, 20131.46, 22608.92
 0.2, 3159.17, 6245.66, 9247.33, 12156.63, 14967.81, 17676.12, 20277.48, 22768.29
 0.22, 3174.36, 6274.89, 9289.3, 12210, 15031.2, 17748.16, 20356.83, 22853.63
 0.24, 3181.79, 6288.92, 9308.99, 12234.37, 15059.28, 17778.98, 20389.45, 22887.15
 0.26, 3183.66, 6292.04, 9312.7, 12237.98, 15062.09, 17780.34, 20388.7, 22883.68
 0.28, 3181.46, 6287.21, 9304.77, 12226.47, 15046.54, 17760.28, 20363.72, 22853.38
 0.3, 3176.26, 6276.51, 9288.26, 12203.82, 15017.45, 17724.48, 20320.95, 22803.41
 0.32, 3168.82, 6261.44, 9265.35, 12172.89, 14978.33, 17677, 20264.99, 22738.88
 0.34, 3159.7, 6243.09, 9237.67, 12135.77, 14931.7, 17620.81, 20199.22, 22663.53
 0.36, 3149.31, 6222.28, 9206.39, 12094.02, 14879.47, 17558.14, 20126.15, 22580.16
 0.38, 3137.98, 6199.62, 9172.43, 12048.8, 14823.06, 17490.64, 20047.68, 22490.86
 0.4, 3125.94, 6175.59, 9136.48, 12001.03, 14763.59, 17419.61, 19965.26, 22397.25
 0.42, 3113.38, 6150.56, 9099.08, 11951.41, 14701.9, 17346.03, 19880.02, 22300.58
 0.44, 3100.45, 6124.8, 9060.66, 11900.47, 14638.65, 17270.69, 19792.83, 22201.81
 0.46, 3087.26, 6098.56, 9021.53, 11848.66, 14574.37, 17194.19, 19704.39, 22101.73
 0.48, 3073.9, 6072.01, 8981.97, 11796.31, 14509.48, 17117.03, 19615.25, 22000.93
 0.5, 3060.46, 6045.29, 8942.19, 11743.7, 14444.31, 17039.59, 19525.84, 21899.9
 0.52, 3046.98, 6018.53, 8902.36, 11691.06, 14379.13, 16962.17, 19436.52, 21799.02
 0.54, 3033.53, 5991.81, 8862.61, 11638.55, 14314.15, 16885.04, 19347.57, 21698.61
 0.56, 3020.12, 5965.21, 8823.06, 11586.32, 14249.54, 16808.38, 19259.21, 21598.92
 0.58, 3006.81, 5938.79, 8783.79, 11534.49, 14185.45, 16732.37, 19171.62, 21500.14
 0.6, 2993.61, 5912.6, 8744.88, 11483.14, 14121.99, 16657.12, 19084.95, 21402.42
 0.62, 2980.54, 5886.69, 8706.38, 11432.35, 14059.23, 16582.74, 18999.31, 21305.9
 0.64, 2967.62, 5861.07, 8668.34, 11382.18, 13997.26, 16509.31, 18914.79, 21210.68
 0.66, 2954.86, 5835.78, 8630.79, 11332.68, 13936.12, 16436.89, 18831.45, 21116.81
 0.68, 2942.27, 5810.83, 8593.76, 11283.87, 13875.86, 16365.53, 18749.36, 21024.37
 0.7, 2929.86, 5786.25, 8557.28, 11235.79, 13816.52, 16295.26, 18668.55, 20933.4
 0.72, 2917.63, 5762.04, 8521.35, 11188.46, 13758.1, 16226.12, 18589.04, 20843.91
 0.74, 2905.6, 5738.2, 8485.99, 11141.88, 13700.64, 16158.12, 18510.86, 20755.94
 0.76, 2893.76, 5714.75, 8451.21, 11096.08, 13644.14, 16091.26, 18434.02, 20669.5
 0.78, 2882.11, 5691.69, 8417.02, 11051.04, 13588.6, 16025.56, 18358.52, 20584.57
 0.8, 2870.66, 5669.02, 8383.4, 11006.79, 13534.02, 15961.01, 18284.35, 20501.17
 0.82, 2859.4, 5646.73, 8350.36, 10963.3, 13480.41, 15897.61, 18211.52, 20419.28
 0.84, 2848.33, 5624.84, 8317.91, 10920.58, 13427.75, 15835.35, 18140.02, 20338.9
 0.86, 2837.46, 5603.33, 8286.03, 10878.63, 13376.04, 15774.22, 18069.82, 20260
 0.88, 2826.78, 5582.2, 8254.72, 10837.44, 13325.27, 15714.21, 18000.92, 20182.56
 0.9, 2816.29, 5561.45, 8223.97, 10796.99, 13275.43, 15655.31, 17933.3, 20106.58
 0.92, 2805.99, 5541.07, 8193.78, 10757.27, 13226.51, 15597.49, 17866.93, 20032.02
 0.94, 2795.88, 5521.06, 8164.14, 10718.28, 13178.48, 15540.75, 17801.81, 19958.86
 0.96, 2785.94, 5501.41, 8135.04, 10680.01, 13131.34, 15485.06, 17737.9, 19887.09
 0.98, 2776.18, 5482.12, 8106.47, 10642.44, 13085.07, 15430.41, 17675.19, 19816.66
 1, 2766.61, 5463.18, 8078.42, 10605.56, 13039.66, 15376.77, 17613.66, 19747.56
 1.02, 2766.61, 5463.18, 8078.42, 10605.56, 13039.66, 15376.77, 17613.66, 19747.56
ENDTABLE
FX_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FY_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFY2 component due to ride height

FY_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.5, 436.67, 839.74, 1204.79, 1529.9, 1814.22, 2057.59, 2260.35, 2423.2
 1, 858.37, 1651.6, 2371.01, 3012.71, 3574.92, 4057.17, 4459.95, 4784.5
 1.5, 1252.28, 2411.59, 3465.25, 4407.43, 5235.22, 5947.62, 6544.97, 7028.69
 2, 1609.22, 3102.28, 4462.99, 5683.53, 6759.74, 7689.81, 8473.61, 9112.35
 2.5, 1924.12, 3713.86, 5349.96, 6822.74, 8126.71, 9258.99, 10218.67, 11006.43
 3, 2195.69, 4243.44, 6121.47, 7818.4, 9327.36, 10644.32, 11767.36, 12696.32
 3.5, 2425.49, 4693.54, 6780.37, 8673.13, 10363.62, 11846.61, 13119.1, 14179.86
 4, 2616.92, 5070.2, 7334.57, 9395.93, 11244.89, 12875.09, 14282.37, 15464.42
 4.5, 2774.29, 5381.32, 7794.76, 9999.48, 11985.11, 13744.2, 15271.53, 16563.7
 5, 2902.16, 5635.39, 8172.63, 10497.97, 12600.19, 14470.94, 16104.02, 17494.97
 5.5, 3004.95, 5840.7, 8479.74, 10905.6, 13106.37, 15072.95, 16798.25, 18276.9
 6, 3086.65, 6004.83, 8726.8, 11235.69, 13519.06, 15567.17, 17372.23, 18928.04
 6.5, 3150.77, 6134.5, 8923.36, 11500.22, 13852.26, 15969.23, 17842.74, 19465.88
 7, 3200.34, 6235.49, 9077.7, 11709.69, 14118.34, 16293.02, 18224.86, 19906.36
 7.5, 3237.88, 6312.7, 9196.89, 11873.09, 14328, 16550.69, 18531.89, 20263.64
 8, 3265.5, 6370.25, 9286.89, 11998.08, 14490.38, 16752.66, 18775.36, 20550.11
 8.5, 3284.95, 6411.55, 9352.69, 12091.07, 14613.21, 16907.83, 18965.13, 20776.45
 9, 3297.7, 6439.45, 9398.43, 12157.44, 14703, 17023.72, 19109.64, 20951.85
 9.5, 3304.92, 6456.27, 9427.56, 12201.68, 14765.2, 17106.66, 19216, 21084.12
 10, 3307.61, 6463.98, 9442.93, 12227.53, 14804.37, 17161.99, 19290.24, 21179.89
 10.5, 3306.56, 6464.16, 9446.94, 12238.11, 14824.33, 17194.18, 19337.44, 21244.8
 11, 3302.47, 6458.16, 9441.54, 12235.99, 14828.27, 17206.98, 19361.89, 21283.62
 11.5, 3295.87, 6447.06, 9428.37, 12223.36, 14818.87, 17203.55, 19367.2, 21300.39
 12, 3287.22, 6431.79, 9408.81, 12202, 14798.35, 17186.55, 19356.42, 21298.53
 12.5, 3276.91, 6413.1, 9383.98, 12173.44, 14768.59, 17158.2, 19332.13, 21280.93
 13, 3265.25, 6391.63, 9354.83, 12138.94, 14731.17, 17120.39, 19296.5, 21250.07
 13.5, 3252.51, 6367.9, 9322.16, 12099.56, 14687.43, 17074.71, 19251.37, 21208.03
 14, 3238.9, 6342.36, 9286.64, 12056.2, 14638.46, 17022.5, 19198.33, 21156.59
 14.5, 3224.61, 6315.37, 9248.83, 12009.59, 14585.23, 16964.9, 19138.68, 21097.28
 15, 3209.78, 6287.24, 9209.19, 11960.38, 14528.52, 16902.86, 19073.57, 21031.39
 15.5, 3194.56, 6258.24, 9168.11, 11909.1, 14469.02, 16837.22, 19003.94, 20960.02
 16, 3179.04, 6228.58, 9125.94, 11856.19, 14407.28, 16768.65, 18930.64, 20884.12
 16.5, 3163.31, 6198.44, 9082.94, 11802.04, 14343.8, 16697.77, 18854.34, 20804.49
 17, 3147.45, 6167.98, 9039.37, 11746.97, 14278.99, 16625.05, 18775.66, 20721.84
 17.5, 3131.52, 6137.33, 8995.4, 11691.25, 14213.19, 16550.94, 18695.1, 20636.75
 18, 3115.58, 6106.59, 8951.21, 11635.11, 14146.7, 16475.81, 18613.1, 20549.74
 18.5, 3099.66, 6075.85, 8906.94, 11578.75, 14079.77, 16399.94, 18530.02, 20461.24
 19, 3083.81, 6045.19, 8862.72, 11522.31, 14012.61, 16323.63, 18446.19, 20371.63
 19.5, 3068.05, 6014.67, 8818.62, 11465.96, 13945.4, 16247.07, 18361.89, 20281.23
 20, 3052.41, 5984.34, 8774.74, 11409.79, 13878.3, 16170.48, 18277.33, 20190.32
 20.5, 3036.91, 5954.25, 8731.15, 11353.9, 13811.42, 16094, 18192.73, 20099.14
 21, 3021.56, 5924.44, 8687.91, 11298.38, 13744.88, 16017.78, 18108.25, 20007.89
 21.5, 3006.38, 5894.92, 8645.05, 11243.29, 13678.77, 15941.93, 18024.03, 19916.74
 22, 2991.38, 5865.72, 8602.62, 11188.69, 13613.16, 15866.55, 17940.19, 19825.84
 22.5, 2976.56, 5836.86, 8560.64, 11134.63, 13548.11, 15791.72, 17856.84, 19735.32
 23, 2961.94, 5808.36, 8519.15, 11081.13, 13483.68, 15717.5, 17774.07, 19645.28
 23.5, 2947.51, 5780.23, 8478.16, 11028.23, 13419.9, 15643.96, 17691.94, 19555.82
 24, 2933.29, 5752.47, 8437.68, 10975.94, 13356.81, 15571.13, 17610.52, 19467
 24.5, 2919.27, 5725.09, 8397.73, 10924.3, 13294.43, 15499.06, 17529.84, 19378.9
 25, 2905.45, 5698.09, 8358.31, 10873.31, 13232.79, 15427.77, 17449.97, 19291.57
 25.5, 2905.45, 5698.09, 8358.31, 10873.31, 13232.79, 15427.77, 17449.97, 19291.57
ENDTABLE
FY_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.5, 436.67, 839.74, 1204.79, 1529.9, 1814.22, 2057.59, 2260.35, 2423.2
 1, 858.37, 1651.6, 2371.01, 3012.71, 3574.92, 4057.17, 4459.95, 4784.5
 1.5, 1252.28, 2411.59, 3465.25, 4407.43, 5235.22, 5947.62, 6544.97, 7028.69
 2, 1609.22, 3102.28, 4462.99, 5683.53, 6759.74, 7689.81, 8473.61, 9112.35
 2.5, 1924.12, 3713.86, 5349.96, 6822.74, 8126.71, 9258.99, 10218.67, 11006.43
 3, 2195.69, 4243.44, 6121.47, 7818.4, 9327.36, 10644.32, 11767.36, 12696.32
 3.5, 2425.49, 4693.54, 6780.37, 8673.13, 10363.62, 11846.61, 13119.1, 14179.86
 4, 2616.92, 5070.2, 7334.57, 9395.93, 11244.89, 12875.09, 14282.37, 15464.42
 4.5, 2774.29, 5381.32, 7794.76, 9999.48, 11985.11, 13744.2, 15271.53, 16563.7
 5, 2902.16, 5635.39, 8172.63, 10497.97, 12600.19, 14470.94, 16104.02, 17494.97
 5.5, 3004.95, 5840.7, 8479.74, 10905.6, 13106.37, 15072.95, 16798.25, 18276.9
 6, 3086.65, 6004.83, 8726.8, 11235.69, 13519.06, 15567.17, 17372.23, 18928.04
 6.5, 3150.77, 6134.5, 8923.36, 11500.22, 13852.26, 15969.23, 17842.74, 19465.88
 7, 3200.34, 6235.49, 9077.7, 11709.69, 14118.34, 16293.02, 18224.86, 19906.36
 7.5, 3237.88, 6312.7, 9196.89, 11873.09, 14328, 16550.69, 18531.89, 20263.64
 8, 3265.5, 6370.25, 9286.89, 11998.08, 14490.38, 16752.66, 18775.36, 20550.11
 8.5, 3284.95, 6411.55, 9352.69, 12091.07, 14613.21, 16907.83, 18965.13, 20776.45
 9, 3297.7, 6439.45, 9398.43, 12157.44, 14703, 17023.72, 19109.64, 20951.85
 9.5, 3304.92, 6456.27, 9427.56, 12201.68, 14765.2, 17106.66, 19216, 21084.12
 10, 3307.61, 6463.98, 9442.93, 12227.53, 14804.37, 17161.99, 19290.24, 21179.89
 10.5, 3306.56, 6464.16, 9446.94, 12238.11, 14824.33, 17194.18, 19337.44, 21244.8
 11, 3302.47, 6458.16, 9441.54, 12235.99, 14828.27, 17206.98, 19361.89, 21283.62
 11.5, 3295.87, 6447.06, 9428.37, 12223.36, 14818.87, 17203.55, 19367.2, 21300.39
 12, 3287.22, 6431.79, 9408.81, 12202, 14798.35, 17186.55, 19356.42, 21298.53
 12.5, 3276.91, 6413.1, 9383.98, 12173.44, 14768.59, 17158.2, 19332.13, 21280.93
 13, 3265.25, 6391.63, 9354.83, 12138.94, 14731.17, 17120.39, 19296.5, 21250.07
 13.5, 3252.51, 6367.9, 9322.16, 12099.56, 14687.43, 17074.71, 19251.37, 21208.03
 14, 3238.9, 6342.36, 9286.64, 12056.2, 14638.46, 17022.5, 19198.33, 21156.59
 14.5, 3224.61, 6315.37, 9248.83, 12009.59, 14585.23, 16964.9, 19138.68, 21097.28
 15, 3209.78, 6287.24, 9209.19, 11960.38, 14528.52, 16902.86, 19073.57, 21031.39
 15.5, 3194.56, 6258.24, 9168.11, 11909.1, 14469.02, 16837.22, 19003.94, 20960.02
 16, 3179.04, 6228.58, 9125.94, 11856.19, 14407.28, 16768.65, 18930.64, 20884.12
 16.5, 3163.31, 6198.44, 9082.94, 11802.04, 14343.8, 16697.77, 18854.34, 20804.49
 17, 3147.45, 6167.98, 9039.37, 11746.97, 14278.99, 16625.05, 18775.66, 20721.84
 17.5, 3131.52, 6137.33, 8995.4, 11691.25, 14213.19, 16550.94, 18695.1, 20636.75
 18, 3115.58, 6106.59, 8951.21, 11635.11, 14146.7, 16475.81, 18613.1, 20549.74
 18.5, 3099.66, 6075.85, 8906.94, 11578.75, 14079.77, 16399.94, 18530.02, 20461.24
 19, 3083.81, 6045.19, 8862.72, 11522.31, 14012.61, 16323.63, 18446.19, 20371.63
 19.5, 3068.05, 6014.67, 8818.62, 11465.96, 13945.4, 16247.07, 18361.89, 20281.23
 20, 3052.41, 5984.34, 8774.74, 11409.79, 13878.3, 16170.48, 18277.33, 20190.32
 20.5, 3036.91, 5954.25, 8731.15, 11353.9, 13811.42, 16094, 18192.73, 20099.14
 21, 3021.56, 5924.44, 8687.91, 11298.38, 13744.88, 16017.78, 18108.25, 20007.89
 21.5, 3006.38, 5894.92, 8645.05, 11243.29, 13678.77, 15941.93, 18024.03, 19916.74
 22, 2991.38, 5865.72, 8602.62, 11188.69, 13613.16, 15866.55, 17940.19, 19825.84
 22.5, 2976.56, 5836.86, 8560.64, 11134.63, 13548.11, 15791.72, 17856.84, 19735.32
 23, 2961.94, 5808.36, 8519.15, 11081.13, 13483.68, 15717.5, 17774.07, 19645.28
 23.5, 2947.51, 5780.23, 8478.16, 11028.23, 13419.9, 15643.96, 17691.94, 19555.82
 24, 2933.29, 5752.47, 8437.68, 10975.94, 13356.81, 15571.13, 17610.52, 19467
 24.5, 2919.27, 5725.09, 8397.73, 10924.3, 13294.43, 15499.06, 17529.84, 19378.9
 25, 2905.45, 5698.09, 8358.31, 10873.31, 13232.79, 15427.77, 17449.97, 19291.57
 25.5, 2905.45, 5698.09, 8358.31, 10873.31, 13232.79, 15427.77, 17449.97, 19291.57
ENDTABLE
FY_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FZ_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFZ2 component due to ride height

FZ_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 10 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 268 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 1, left side
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2) 268 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 1, right side
FZ_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 268 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 2, left side
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2) 268 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 2, right side
FZ_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 1, left side
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 1, right side
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 2, left side
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 2, right side
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1) 420 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 1, left side
FZ_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2) 420 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 1, right side
FZ_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost force (N)
F_BOOST_R_TABLE(1) SPLINE ! spline interpolation and extrapolation
 -8.1, -2976.2
 -7.965, -2901.8
 -7.83, -2827.4
 -7.695, -2753
 -7.56, -2678.6
 -7.425, -2604.2
 -7.29, -2529.8
 -7.155, -2455.4
 -7.02, -2381
 -6.885, -2306.6
 -6.75, -2232.2
 -6.615, -2157.8
 -6.48, -2083.4
 -6.345, -2009
 -6.21, -1934.6
 -6.075, -1860.2
 -5.94, -1785.7
 -5.805, -1711.3
 -5.67, -1636.9
 -5.13, -1391.4
 -4.995, -1343
 -4.86, -1294.7
 -4.725, -1246.3
 -4.59, -1197.9
 -4.455, -1149.6
 -4.32, -1101.2
 -4.185, -1052.8
 -4.05, -1004.5
 -3.915, -956.12
 -3.78, -907.75
 -3.645, -859.39
 -3.51, -811.03
 -3.375, -762.66
 -3.24, -714.3
 -3.105, -665.93
 -2.97, -617.57
 -2.835, -569.21
 -2.7, -520.84
 -2.565, -472.48
 -2.43, -424.12
 -2.295, -375.75
 -2.16, -327.39
 -2.025, -279.02
 -1.89, -230.66
 -1.755, -182.3
 -1.62, -133.93
 -1.08, -29.762
 -0.945, -26.042
 -0.81, -22.322
 -0.675, -18.602
 -0.54, -14.881
 -0.405, -11.161
 -0.27, -7.4406
 -0.135, -3.7203
 0, 0
 0.135, 3.7203
 0.27, 7.4406
 0.405, 11.161
 0.54, 14.881
 0.675, 18.602
 0.81, 22.322
 0.945, 26.042
 1.08, 29.762
 1.62, 133.93
 1.755, 182.3
 1.89, 230.66
 2.025, 279.02
 2.16, 327.39
 2.295, 375.75
 2.43, 424.12
 2.565, 472.48
 2.7, 520.84
 2.835, 569.21
 2.97, 617.57
 3.105, 665.93
 3.24, 714.3
 3.375, 762.66
 3.51, 811.03
 3.645, 859.39
 3.78, 907.75
 3.915, 956.12
 4.05, 1004.5
 4.185, 1052.8
 4.32, 1101.2
 4.455, 1149.6
 4.59, 1197.9
 4.725, 1246.3
 4.86, 1294.7
 4.995, 1343
 5.13, 1391.4
 5.67, 1636.9
 5.805, 1711.3
 5.94, 1785.7
 6.075, 1860.2
 6.21, 1934.6
 6.345, 2009
 6.48, 2083.4
 6.615, 2157.8
 6.75, 2232.2
 6.885, 2306.6
 7.02, 2381
 7.155, 2455.4
 7.29, 2529.8
 7.425, 2604.2
 7.56, 2678.6
 7.695, 2753
 7.83, 2827.4
 7.965, 2901.8
 8.1, 2976.2
ENDTABLE
F_BOOST_R_GAIN(1)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(1) 0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST(1) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST(1) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_F_BOOST)
F_BOOST_R_COMBINE(1) ADD ! How to combine the two components
SET_UNITS F_BOOST_R_V_TABLE(1) N ;
F_BOOST_R_V_CONSTANT(1) 0 ; N ! Constant boost force component due to speed

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 10 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 5
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(2,1) 0.05263157895 ! Coefficient: pitman arm angle per unit
                                        ! steering gear input angle (deg/deg), unit
                                        ! 2, axle 1
GEAR_ROT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

GEAR_TRANS_CONSTANT(1) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(2) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.
! This configurable function supports 2 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.006425
 0.1, 0.006425
 0.2, 0.006425
 0.3, 0.006425
 0.4, 0.006424
 0.5, 0.006419
 0.6, 0.006386
 0.7, 0.006243
 0.8, 0.005735
 0.9, 0.004185
 0.95, 0.002578
 0.99, 0.000614
 1.01, -0.000614
 1.05, -0.002578
 1.1, -0.004185
 1.2, -0.005735
 1.3, -0.006243
 1.4, -0.006386
 1.5, -0.006419
 1.6, -0.006424
 1.7, -0.006425
 1.8, -0.006425
 1.9, -0.006425
 2, -0.006425
ENDTABLE
INV_CAP_TC_GAIN(1)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(1) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(1) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(1) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.0084852815
 0.1, 0.0084012685
 0.2, 0.0083189025
 0.3, 0.0082380885
 0.4, 0.008158069
 0.5, 0.0080733285
 0.6, 0.0079565795
 0.7, 0.007706162
 0.8, 0.007013131
 0.9, 0.005070318
 0.95, 0.003109434
 0.99, 0.0007382575
 1.01, -0.0007382575
 1.05, -0.003109434
 1.1, -0.005070318
 1.2, -0.007013131
 1.3, -0.007706162
 1.4, -0.0079565795
 1.5, -0.0080733285
 1.6, -0.0080733285
 1.7, -0.0080733285
 1.8, -0.0080733285
 1.9, -0.0080733285
 2, -0.0080733285
ENDTABLE
INV_CAP_TC_GAIN(2)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(2) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(2) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IVEHICLE is used to identify the dataset when reading data.

ISHAFT_KIN_COEFFICIENT(1) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(1)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(1) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(2) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(2)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(2) 0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 10 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 0, 0
 1569.064, -3.0578
 3138.128, -5.5139
 4707.192, -7.7979
 6276.256, -9.9799
 7845.32, -12.0905
 9414.384, -14.1466
 10983.448, -16.1591
 12552.512, -18.1355
 14121.576, -20.0811
 15690.64, -22
 17259.704, -23.8954
 18828.768, -25.7698
 20397.832, -27.6253
 21966.896, -29.4637
 23535.96, -31.2864
 25105.024, -33.0946
 26674.088, -34.8895
 28243.152, -36.672
 29812.216, -38.4428
 31381.28, -40.2028
ENDTABLE
KGAMMA_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 0, 0
 1569.064, -3.0578
 3138.128, -5.5139
 4707.192, -7.7979
 6276.256, -9.9799
 7845.32, -12.0905
 9414.384, -14.1466
 10983.448, -16.1591
 12552.512, -18.1355
 14121.576, -20.0811
 15690.64, -22
 17259.704, -23.8954
 18828.768, -25.7698
 20397.832, -27.6253
 21966.896, -29.4637
 23535.96, -31.2864
 25105.024, -33.0946
 26674.088, -34.8895
 28243.152, -36.672
 29812.216, -38.4428
 31381.28, -40.2028
ENDTABLE
KGAMMA_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.4 sec. Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! 0.4 sec. Single Preview
LTARG_CONSTANT(2)   0 ; m ! Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 10
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 90 ; mm ! Constant tire contact length, unit 1, axle 1,
                               ! left side
L_CONTACT_X_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,1,2) 90 ; mm ! Constant tire contact length, unit 1, axle 1,
                               ! right side
L_CONTACT_X_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 90 ; mm ! Constant tire contact length, unit 1, axle 2,
                               ! left side
L_CONTACT_X_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,2) 90 ; mm ! Constant tire contact length, unit 1, axle 2,
                               ! right side
L_CONTACT_X_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 85 ; mm ! Constant tire contact length, unit 2, axle 1,
                               ! left side
L_CONTACT_X_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 85 ; mm ! Constant tire contact length, unit 2, axle 1,
                               ! right side
L_CONTACT_X_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 85 ; mm ! Constant tire contact length, unit 2, axle 2,
                               ! left side
L_CONTACT_X_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 85 ; mm ! Constant tire contact length, unit 2, axle 2,
                               ! right side
L_CONTACT_X_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,1,1) 150 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left side
L_CONTACT_X_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,1,2) 150 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right side
L_CONTACT_X_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 10
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 215 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,1,2) 215 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 215 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,2) 215 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 265 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 265 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 265 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 265 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,1,1) 235 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,1,2) 235 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! unit 1, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2) SPLINE_FLAT ! unit 1, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! unit 1, axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2) SPLINE_FLAT ! unit 1, axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! unit 2, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! unit 2, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! unit 2, axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! unit 2, axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1) SPLINE_FLAT ! unit 3, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1) 0.0734 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1) 16000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2) SPLINE_FLAT ! unit 3, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2) 0.0734 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2) 16000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! unit 1, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2) SPLINE_FLAT ! unit 1, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! unit 1, axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2) SPLINE_FLAT ! unit 1, axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! unit 2, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! unit 2, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! unit 2, axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! unit 2, axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1) SPLINE_FLAT ! unit 3, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1) 0.734 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1) 16000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2) SPLINE_FLAT ! unit 3, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2) 0.734 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2) 16000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.
! This configurable function supports 2 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(1) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 517, 20.63, 63.42, 84.48, 86.19, 87.17, 87.65, 87.82, 87.86, 87.88, 87.86
 633, 24.75, 77.39, 116.38, 124.29, 125.56, 126.07, 126.25, 126.27, 126.27, 126.27
 750, 0, 72.82, 123.35, 134.46, 137.46, 138.54, 138.94, 138.98, 138.97, 138.96
 1107, -8.25, 58.85, 144.66, 165.55, 173.84, 176.68, 177.74, 177.84, 177.81, 177.74
 1463, -12.38, 39.26, 139.43, 173.25, 184.29, 189.29, 191.74, 192.31, 192.68, 196.35
 1820, -14.03, 21.45, 123.75, 176.33, 194.74, 201.9, 205.74, 206.78, 207.55, 212.85
 2177, -16.81, 8.25, 98.04, 169.73, 198, 214.5, 216.98, 219.45, 221.93, 227.4
 2533, -21.1, -5.34, 67.75, 151.73, 199.65, 222.5, 228.53, 232.7, 235.13, 239.25
 2890, -25.11, -12.63, 47.01, 127.92, 194.27, 224.92, 237.69, 240.9, 245.85, 249.98
 3247, -28.65, -18.38, 31.39, 102.07, 186.21, 222.75, 239.25, 245.85, 250.8, 255.75
 3603, -32.14, -23.42, 19.57, 80.44, 167.53, 216.15, 240.08, 247.5, 253.28, 258.23
 3960, -35.64, -28.09, 9.84, 63.68, 145.29, 207.19, 237.6, 246.68, 252.45, 255.75
 4317, -39.34, -32.81, 0.23, 47.88, 125.2, 197.75, 233.48, 241.73, 247.5, 252.4
 4673, -43.19, -37.51, -8.31, 34.33, 104.22, 183.59, 226.88, 235.13, 243.38, 247.5
 5030, -47.28, -42.14, -15.9, 22.49, 85.54, 165.8, 218.63, 226.88, 235.13, 239.25
 5387, -51.39, -46.87, -22.94, 12.04, 69.6, 147.15, 205.7, 213.68, 224.7, 227.07
 5743, -55.99, -51.8, -29.76, 2.35, 55.16, 127.73, 184.51, 197.1, 203.01, 205.34
 6100, -61.01, -57.01, -36.57, -6.8, 41.98, 108.88, 161.55, 173.27, 178.77, 180.88
 6500, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83
 6700, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65
ENDTABLE
MENGINE_GAIN(1)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(1)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(1) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(1) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(1) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(1) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(2) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 5, 15, 20, 30, 40, 60, 75, 90, 98, 100
 500, 25, 30, 40, 60, 80, 120, 150, 180, 196, 200
 600, 10, 45, 60, 90, 120, 180, 225, 270, 294, 300
 800, -15, 59.25, 79, 118.5, 158, 237, 296.25, 355.5, 387.1, 395
 1000, -25, 75, 100, 150, 200, 300, 375, 450, 490, 500
 1200, -40, 97.5, 130, 195, 260, 390, 487.5, 585, 637, 650
 1400, -50, 108.75, 145, 217.5, 290, 435, 543.75, 652.5, 710.5, 725
 1600, -65, 123.75, 165, 247.5, 330, 495, 618.75, 742.5, 808.5, 825
 1800, -90, 135, 180, 270, 360, 540, 675, 810, 882, 900
 2000, -105, 133.5, 178, 267, 356, 534, 667.5, 801, 872.2, 890
 2200, -125, 133.2, 177.6, 266.4, 355.2, 532.8, 666, 799.2, 870.24, 888
 2400, -150, 131.25, 175, 262.5, 350, 525, 656.25, 787.5, 857.5, 875
 2600, -170, 127.5, 170, 255, 340, 510, 637.5, 765, 833, 850
 2800, -190, 126, 168, 252, 336, 504, 630, 756, 823.2, 840
 3000, -210, 124.5, 166, 249, 332, 498, 622.5, 747, 813.4, 830
 3200, -225, 120, 160, 240, 320, 480, 600, 720, 784, 800
 3400, -230, 105, 140, 210, 280, 420, 525, 630, 686, 700
 3600, -240, 82.5, 110, 165, 220, 330, 412.5, 495, 539, 550
 4000, -250, 75, 100, 150, 200, 300, 375, 450, 490, 500
 4400, -275, -275, -275, -275, -275, -275, -275, -275, -275, -275
 4500, -280, -280, -280, -280, -280, -280, -280, -280, -280, -280
ENDTABLE
MENGINE_GAIN(2)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(2)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(2) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(2) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(2) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(2) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

MODE_TRANS_CONSTANT(1) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(2) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(4) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(4)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(4)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(4) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(4) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(5) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(5)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(5)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(5) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(5) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(6) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(6)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(6)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(6) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(6) 1 ; - ! [D] Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MX_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMX2 component due to ride height

MX_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 5 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 384 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

! 1D table: col 1 = relative axle roll (deg), col 2 = auxiliary roll moment (N-m)
MX_AUX_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, -4490.6
 -9, -3826.9
 -8, -3245.1
 -7, -2727.2
 -6, -2259.3
 -5, -1830.4
 -4, -1431.5
 -3, -1055.1
 -2, -694.76
 -1, -344.84
 0, 0
 1, 344.84
 2, 694.76
 3, 1055.1
 4, 1431.5
 5, 1830.4
 6, 2259.3
 7, 2727.2
 8, 3245.1
 9, 3826.9
 10, 4490.6
ENDTABLE
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(2,1) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

! 2D table: row 1 has "0" (place holder) followed by 3 values of static axle load
! (N). Other rows have relative axle roll (deg) followed by 3 values of auxiliary
! roll moment (N-m).
MX_AUX_CARPET(3,1) 2D_LINEAR ! unit 3, axle 1
 0, 4600, 10300, 16500
 0, 0, 0, 0
 1, 815, 475, 23
ENDTABLE
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
FSTATIC_START_MX_AUX(3,1) 0 ; N ! Offset subtracted from static axle load
FSTATIC_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (static axle load -
                            ! FSTATIC_START_MX_AUX)

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -21, -100000
 -20, 0
 0, 0
 20, 0
 21, 100000
ENDTABLE
MX_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(2) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MY_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMY2 component due to ride height

MY_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MY_BRAKE_COEFFICIENT(1,1,1) 250 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 1, left side
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,1,2) 250 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 1, right side
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 2, left side
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 2, right side
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,1) 500 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, left side
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,2) 500 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, right side
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,1) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, left side
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,2) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, right side
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,1) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 3, axle 1, left side
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,2) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 3, axle 1, right side
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -11, -100000
 -10, 0
 15, 0
 16, 100000
ENDTABLE
MY_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(2) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(2) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MZ_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMZ2 component due to ride height

MZ_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(2) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(2) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1,1) LINEAR_FLAT ! unit 1, axle 1, left side
 0, 80
 0.1, 72.2
 0.2, 64.8
 0.3, 57.8
 0.4, 51.2
 0.5, 45
 0.6, 39.2
 0.7, 33.8
 0.8, 28.8
 0.9, 24.2
 1, 20
 1.1, 16.2
 1.2, 12.8
 1.3, 9.8
 1.4, 7.2
 1.5, 5
 1.6, 3.2
 1.7, 1.8
 1.8, 0.8
 1.9, 0.2
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1,2) LINEAR_FLAT ! unit 1, axle 1, right side
 0, 80
 0.1, 72.2
 0.2, 64.8
 0.3, 57.8
 0.4, 51.2
 0.5, 45
 0.6, 39.2
 0.7, 33.8
 0.8, 28.8
 0.9, 24.2
 1, 20
 1.1, 16.2
 1.2, 12.8
 1.3, 9.8
 1.4, 7.2
 1.5, 5
 1.6, 3.2
 1.7, 1.8
 1.8, 0.8
 1.9, 0.2
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(2,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 2, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(2,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 2, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.5, 16.44, 31.89, 46.21, 59.32, 71.18, 81.76, 91.05, 99.04
 1, 33.46, 64.89, 94, 120.62, 144.66, 166.08, 184.85, 200.94
 1.5, 50.06, 97.29, 141.22, 181.58, 218.17, 250.88, 279.6, 304.29
 2, 63.15, 123.51, 180.48, 233.6, 282.49, 326.8, 366.26, 400.65
 2.5, 69.41, 137.19, 202.75, 265.49, 324.78, 380.01, 430.58, 475.9
 3, 68.12, 136.37, 204.36, 271.55, 337.25, 400.68, 460.97, 517.18
 3.5, 61.55, 124.73, 189.53, 255.64, 322.59, 389.69, 456.07, 520.67
 4, 52.71, 107.96, 166.05, 227.02, 290.69, 356.7, 424.46, 493.11
 4.5, 43.72, 90.36, 140.43, 194.2, 251.82, 313.26, 378.31, 446.53
 5, 35.61, 74.18, 116.3, 162.41, 212.87, 267.92, 327.7, 392.16
 5.5, 28.68, 60.17, 95.11, 133.99, 177.29, 225.44, 278.8, 337.65
 6, 22.9, 48.39, 77.1, 109.55, 146.26, 187.74, 234.51, 287.05
 6.5, 18.11, 38.58, 62.01, 88.9, 119.78, 155.21, 195.75, 242.01
 7, 14.13, 30.42, 49.4, 71.55, 97.4, 127.47, 162.37, 202.77
 7.5, 10.83, 23.61, 38.84, 56.98, 78.49, 103.92, 133.84, 168.93
 8, 8.05, 17.89, 29.95, 44.68, 62.5, 83.91, 109.49, 139.87
 8.5, 5.71, 13.05, 22.43, 34.24, 48.89, 66.85, 88.64, 114.89
 9, 3.71, 8.92, 16.01, 25.33, 37.26, 52.23, 70.74, 93.37
 9.5, 2, 5.38, 10.49, 17.66, 27.24, 39.62, 55.28, 74.74
 10, 0.51, 2.31, 5.71, 11.02, 18.56, 28.7, 41.86, 58.55
 10.5, -0.78, -0.36, 1.55, 5.24, 11, 19.16, 30.14, 44.4
 11, -1.91, -2.7, -2.1, 0.16, 4.36, 10.8, 19.86, 31.97
 11.5, -2.91, -4.77, -5.32, -4.31, -1.5, 3.42, 10.78, 21
 12, -3.8, -6.61, -8.18, -8.29, -6.69, -3.13, 2.73, 11.26
 12.5, -4.59, -8.25, -10.73, -11.83, -11.33, -8.97, -4.45, 2.58
 13, -5.3, -9.72, -13.02, -15.01, -15.48, -14.2, -10.88, -5.2
 13.5, -5.95, -11.04, -15.07, -17.87, -19.22, -18.9, -16.67, -12.2
 14, -6.53, -12.24, -16.94, -20.45, -22.59, -23.16, -21.9, -18.52
 14.5, -7.05, -13.33, -18.63, -22.8, -25.66, -27.02, -26.64, -24.25
 15, -7.53, -14.32, -20.17, -24.94, -28.45, -30.53, -30.96, -29.46
 15.5, -7.97, -15.23, -21.58, -26.9, -31.01, -33.74, -34.9, -34.23
 16, -8.38, -16.06, -22.88, -28.69, -33.35, -36.69, -38.51, -38.59
 16.5, -8.75, -16.83, -24.07, -30.34, -35.51, -39.4, -41.83, -42.6
 17, -9.1, -17.54, -25.17, -31.87, -37.49, -41.9, -44.9, -46.29
 17.5, -9.41, -18.19, -26.19, -33.28, -39.33, -44.21, -47.73, -49.71
 18, -9.71, -18.8, -27.14, -34.59, -41.04, -46.35, -50.35, -52.87
 18.5, -9.99, -19.37, -28.02, -35.81, -42.63, -48.34, -52.79, -55.81
 19, -10.24, -19.9, -28.84, -36.94, -44.1, -50.19, -55.06, -58.54
 19.5, -10.48, -20.39, -29.6, -38, -45.48, -51.92, -57.18, -61.09
 20, -10.71, -20.86, -30.32, -39, -46.78, -53.54, -59.16, -63.47
 20.5, -10.92, -21.29, -31, -39.93, -47.99, -55.06, -61.01, -65.7
 21, -11.12, -21.7, -31.63, -40.8, -49.12, -56.48, -62.76, -67.8
 21.5, -11.31, -22.09, -32.22, -41.63, -50.19, -57.82, -64.39, -69.77
 22, -11.48, -22.45, -32.79, -42.4, -51.2, -59.09, -65.94, -71.62
 22.5, -11.65, -22.79, -33.32, -43.13, -52.15, -60.28, -67.39, -73.37
 23, -11.81, -23.12, -33.82, -43.83, -53.05, -61.4, -68.77, -75.02
 23.5, -11.96, -23.42, -34.29, -44.48, -53.91, -62.47, -70.07, -76.58
 24, -12.1, -23.71, -34.74, -45.11, -54.71, -63.48, -71.3, -78.06
 24.5, -12.23, -23.99, -35.17, -45.7, -55.48, -64.43, -72.47, -79.46
 25, -12.36, -24.25, -35.58, -46.26, -56.21, -65.34, -73.57, -80.79
 25.5, -12.36, -24.25, -35.58, -46.26, -56.21, -65.34, -73.57, -80.79
ENDTABLE
MZ_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 3922.66, 7845.32, 11767.98, 15690.64, 19613.3, 23535.96, 27458.62, 31381.28
 0.5, 16.44, 31.89, 46.21, 59.32, 71.18, 81.76, 91.05, 99.04
 1, 33.46, 64.89, 94, 120.62, 144.66, 166.08, 184.85, 200.94
 1.5, 50.06, 97.29, 141.22, 181.58, 218.17, 250.88, 279.6, 304.29
 2, 63.15, 123.51, 180.48, 233.6, 282.49, 326.8, 366.26, 400.65
 2.5, 69.41, 137.19, 202.75, 265.49, 324.78, 380.01, 430.58, 475.9
 3, 68.12, 136.37, 204.36, 271.55, 337.25, 400.68, 460.97, 517.18
 3.5, 61.55, 124.73, 189.53, 255.64, 322.59, 389.69, 456.07, 520.67
 4, 52.71, 107.96, 166.05, 227.02, 290.69, 356.7, 424.46, 493.11
 4.5, 43.72, 90.36, 140.43, 194.2, 251.82, 313.26, 378.31, 446.53
 5, 35.61, 74.18, 116.3, 162.41, 212.87, 267.92, 327.7, 392.16
 5.5, 28.68, 60.17, 95.11, 133.99, 177.29, 225.44, 278.8, 337.65
 6, 22.9, 48.39, 77.1, 109.55, 146.26, 187.74, 234.51, 287.05
 6.5, 18.11, 38.58, 62.01, 88.9, 119.78, 155.21, 195.75, 242.01
 7, 14.13, 30.42, 49.4, 71.55, 97.4, 127.47, 162.37, 202.77
 7.5, 10.83, 23.61, 38.84, 56.98, 78.49, 103.92, 133.84, 168.93
 8, 8.05, 17.89, 29.95, 44.68, 62.5, 83.91, 109.49, 139.87
 8.5, 5.71, 13.05, 22.43, 34.24, 48.89, 66.85, 88.64, 114.89
 9, 3.71, 8.92, 16.01, 25.33, 37.26, 52.23, 70.74, 93.37
 9.5, 2, 5.38, 10.49, 17.66, 27.24, 39.62, 55.28, 74.74
 10, 0.51, 2.31, 5.71, 11.02, 18.56, 28.7, 41.86, 58.55
 10.5, -0.78, -0.36, 1.55, 5.24, 11, 19.16, 30.14, 44.4
 11, -1.91, -2.7, -2.1, 0.16, 4.36, 10.8, 19.86, 31.97
 11.5, -2.91, -4.77, -5.32, -4.31, -1.5, 3.42, 10.78, 21
 12, -3.8, -6.61, -8.18, -8.29, -6.69, -3.13, 2.73, 11.26
 12.5, -4.59, -8.25, -10.73, -11.83, -11.33, -8.97, -4.45, 2.58
 13, -5.3, -9.72, -13.02, -15.01, -15.48, -14.2, -10.88, -5.2
 13.5, -5.95, -11.04, -15.07, -17.87, -19.22, -18.9, -16.67, -12.2
 14, -6.53, -12.24, -16.94, -20.45, -22.59, -23.16, -21.9, -18.52
 14.5, -7.05, -13.33, -18.63, -22.8, -25.66, -27.02, -26.64, -24.25
 15, -7.53, -14.32, -20.17, -24.94, -28.45, -30.53, -30.96, -29.46
 15.5, -7.97, -15.23, -21.58, -26.9, -31.01, -33.74, -34.9, -34.23
 16, -8.38, -16.06, -22.88, -28.69, -33.35, -36.69, -38.51, -38.59
 16.5, -8.75, -16.83, -24.07, -30.34, -35.51, -39.4, -41.83, -42.6
 17, -9.1, -17.54, -25.17, -31.87, -37.49, -41.9, -44.9, -46.29
 17.5, -9.41, -18.19, -26.19, -33.28, -39.33, -44.21, -47.73, -49.71
 18, -9.71, -18.8, -27.14, -34.59, -41.04, -46.35, -50.35, -52.87
 18.5, -9.99, -19.37, -28.02, -35.81, -42.63, -48.34, -52.79, -55.81
 19, -10.24, -19.9, -28.84, -36.94, -44.1, -50.19, -55.06, -58.54
 19.5, -10.48, -20.39, -29.6, -38, -45.48, -51.92, -57.18, -61.09
 20, -10.71, -20.86, -30.32, -39, -46.78, -53.54, -59.16, -63.47
 20.5, -10.92, -21.29, -31, -39.93, -47.99, -55.06, -61.01, -65.7
 21, -11.12, -21.7, -31.63, -40.8, -49.12, -56.48, -62.76, -67.8
 21.5, -11.31, -22.09, -32.22, -41.63, -50.19, -57.82, -64.39, -69.77
 22, -11.48, -22.45, -32.79, -42.4, -51.2, -59.09, -65.94, -71.62
 22.5, -11.65, -22.79, -33.32, -43.13, -52.15, -60.28, -67.39, -73.37
 23, -11.81, -23.12, -33.82, -43.83, -53.05, -61.4, -68.77, -75.02
 23.5, -11.96, -23.42, -34.29, -44.48, -53.91, -62.47, -70.07, -76.58
 24, -12.1, -23.71, -34.74, -45.11, -54.71, -63.48, -71.3, -78.06
 24.5, -12.23, -23.99, -35.17, -45.7, -55.48, -64.43, -72.47, -79.46
 25, -12.36, -24.25, -35.58, -46.26, -56.21, -65.34, -73.57, -80.79
 25.5, -12.36, -24.25, -35.58, -46.26, -56.21, -65.34, -73.57, -80.79
ENDTABLE
MZ_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_BOOST_G: Boost torque applied to steering gear. Boost torque can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_BOOST_G_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost torque from the calculation can be adjusted with M_BOOST_G_GAIN
! and M_BOOST_G_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_M_BOOST and M_TB_START_M_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_M_BOOST and VX_TB_START_M_BOOST. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h). Other
! rows have torsion bar torque (N-m) followed by 6 values of boost torque (N-m).
M_BOOST_G_CARPET(2) 2D_SPLINE
 0, 0, 20, 50, 80, 120, 200
 -16, -1200, -1200, -1200, -1200, -1200, -1200
 -15, -1200, -1200, -1200, -1200, -1200, -1200
 -14.5, -1200, -1200, -1200, -1200, -1200, -1200
 -14, -1200, -1200, -1200, -1200, -1200, -1200
 -13.5, -1200, -1200, -1200, -1200, -1200, -1200
 -13, -1200, -1200, -1200, -1200, -1200, -1200
 -12.5, -1200, -1200, -1200, -1200, -1200, -1200
 -12, -1200, -1200, -1200, -1200, -1200, -1200
 -11.5, -1200, -1200, -1200, -1200, -1088.064, -1027.8336
 -11, -1200, -1161.6, -1165.4112, -1094.808, -833.3424, -720.2448
 -10.5, -1200, -1058.4, -990.2976, -871.6464, -630.3792, -496.4256
 -10, -1200, -960, -834.84, -686.2992, -470.4, -336
 -9.5, -1200, -866.4, -697.6464, -533.7744, -345.7872, -222.9072
 -9, -1200, -777.6, -577.368, -409.5456, -249.9888, -144.6384
 -8.5, -1200, -693.6, -472.6848, -309.504, -177.4128, -91.5552
 -8, -1200, -614.4, -382.3152, -229.9632, -123.312, -56.3712
 -7.5, -1200, -540, -305.0112, -167.616, -83.7216, -33.6384
 -7, -1200, -470.4, -239.5776, -119.5344, -55.344, -19.368
 -6.5, -1200, -405.6, -184.8432, -83.136, -35.4768, -10.7088
 -6, -1200, -345.6, -139.68, -56.1648, -21.9456, -5.6448
 -5.5, -1200, -290.4, -103.008, -36.6672, -13.0224, -2.8128
 -5, -1200, -240, -73.7904, -22.9872, -7.3488, -1.3104
 -4.5, -1093.5024, -194.4, -51.0336, -13.7184, -3.9072, -0.5664
 -4, -768, -153.6, -33.792, -7.704, -1.9248, -0.2208
 -3.5, -514.5024, -117.6, -21.1776, -4.0032, -0.864, -0.0768
 -3, -324, -86.4, -12.3456, -1.8816, -0.3408, -0.024
 -2.5, -187.5024, -60, -6.5232, -0.768, -0.1152, -0.0048
 -2, -96, -38.4, -2.9856, -0.2592, -0.0288, 0
 -1.5, -40.5024, -21.6, -1.0896, -0.0624, -0.0048, 0
 -1, -12, -9.6, -0.264, -0.0096, 0, 0
 -0.5, -1.5024, -2.4, -0.024, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 1.5024, 2.4, 0.024, 0, 0, 0
 1, 12, 9.6, 0.264, 0.0096, 0, 0
 1.5, 40.5024, 21.6, 1.0896, 0.0624, 0.0048, 0
 2, 96, 38.4, 2.9856, 0.2592, 0.0288, 0
 2.5, 187.5024, 60, 6.5232, 0.768, 0.1152, 0.0048
 3, 324, 86.4, 12.3456, 1.8816, 0.3408, 0.024
 3.5, 514.5024, 117.6, 21.1776, 4.0032, 0.864, 0.0768
 4, 768, 153.6, 33.792, 7.704, 1.9248, 0.2208
 4.5, 1093.5024, 194.4, 51.0336, 13.7184, 3.9072, 0.5664
 5, 1200, 240, 73.7904, 22.9872, 7.3488, 1.3104
 5.5, 1200, 290.4, 103.008, 36.6672, 13.0224, 2.8128
 6, 1200, 345.6, 139.68, 56.1648, 21.9456, 5.6448
 6.5, 1200, 405.6, 184.8432, 83.136, 35.4768, 10.7088
 7, 1200, 470.4, 239.5776, 119.5344, 55.344, 19.368
 7.5, 1200, 540, 305.0112, 167.616, 83.7216, 33.6384
 8, 1200, 614.4, 382.3152, 229.9632, 123.312, 56.3712
 8.5, 1200, 693.6, 472.6848, 309.504, 177.4128, 91.5552
 9, 1200, 777.6, 577.368, 409.5456, 249.9888, 144.6384
 9.5, 1200, 866.4, 697.6464, 533.7744, 345.7872, 222.9072
 10, 1200, 960, 834.84, 686.2992, 470.4, 336
 10.5, 1200, 1058.4, 990.2976, 871.6464, 630.3792, 496.4256
 11, 1200, 1161.6, 1165.4112, 1094.808, 833.3424, 720.2448
 11.5, 1200, 1200, 1200, 1200, 1088.064, 1027.8336
 12, 1200, 1200, 1200, 1200, 1200, 1200
 12.5, 1200, 1200, 1200, 1200, 1200, 1200
 13, 1200, 1200, 1200, 1200, 1200, 1200
 13.5, 1200, 1200, 1200, 1200, 1200, 1200
 14, 1200, 1200, 1200, 1200, 1200, 1200
 14.5, 1200, 1200, 1200, 1200, 1200, 1200
 15, 1200, 1200, 1200, 1200, 1200, 1200
 16, 1200, 1200, 1200, 1200, 1200, 1200
ENDTABLE
M_BOOST_G_GAIN(2)   1 ! Gain multiplied with calculated value to get boost torque
M_BOOST_G_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get boost torque
M_TB_START_M_BOOST(2) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_M_BOOST(2) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_M_BOOST)
VX_TB_START_M_BOOST(2) 0 ; km/h ! Offset subtracted from speed
VX_TB_SCALE_M_BOOST(2) 1 ! Scale factor divided into (speed - VX_TB_START_M_BOOST)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 6 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IDIFF are used to identify the dataset when
! reading data.

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(1,1) SPLINE ! veh 1, front diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(1,1) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(1,1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(1,1) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

M_DIFF_VISC_CONSTANT(2,2) 0 ; N-m ! Constant this torque difference, veh 2, rear
                            ! diff
M_DIFF_VISC_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

M_TBAR_COEFFICIENT(1) 2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN(1)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

M_TBAR_COEFFICIENT(2) 2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN(2)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_AV_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_ROT_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON. This configurable function supports 2 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

PBK_CON_CONSTANT(1) 0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET(1)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(2) 0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET(2)   0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 10
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(3,1,1) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 10 datasets; if indices shown below
! are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -75, -30.46331605
 -74.25, -30.15159121
 -73.5, -29.84092821
 -72.75, -29.53128304
 -72, -29.22261297
 -71.25, -28.91487647
 -70.5, -28.60803319
 -69.75, -28.3020439
 -69, -27.99687041
 -68.25, -27.69247556
 -67.5, -27.38882313
 -66.75, -27.08587784
 -66, -26.78360526
 -65.25, -26.48197182
 -64.5, -26.18094475
 -63.75, -25.88049202
 -63, -25.58058235
 -62.25, -25.28118515
 -61.5, -24.98227051
 -60.75, -24.68380915
 -60, -24.38577239
 -59.25, -24.08813216
 -58.5, -23.79086093
 -57.75, -23.49393171
 -57, -23.19731803
 -56.25, -22.9009939
 -55.5, -22.60493383
 -54.75, -22.30911274
 -54, -22.01350601
 -53.25, -21.71808943
 -52.5, -21.42283918
 -51.75, -21.12773184
 -51, -20.83274432
 -50.25, -20.53785392
 -49.5, -20.24303824
 -48.75, -19.94827523
 -48, -19.65354313
 -47.25, -19.35882048
 -46.5, -19.06408611
 -45.75, -18.7693191
 -45, -18.47449881
 -44.25, -18.17960484
 -43.5, -17.88461703
 -42.75, -17.58951545
 -42, -17.29428038
 -41.25, -16.99889232
 -40.5, -16.70333195
 -39.75, -16.40758017
 -39, -16.11161804
 -38.25, -15.81542679
 -37.5, -15.51898783
 -36.75, -15.22228273
 -36, -14.92529321
 -35.25, -14.62800111
 -34.5, -14.33038845
 -33.75, -14.03243734
 -33, -13.73413005
 -32.25, -13.43544893
 -31.5, -13.13637647
 -30.75, -12.83689526
 -30, -12.53698798
 -29.25, -12.23663743
 -28.5, -11.93582646
 -27.75, -11.63453805
 -27, -11.33275522
 -26.25, -11.03046109
 -25.5, -10.72763884
 -24.75, -10.42427171
 -24, -10.12034302
 -23.25, -9.815836124
 -22.5, -9.510734443
 -21.75, -9.205021441
 -21, -8.898680627
 -20.25, -8.591695552
 -19.5, -8.284049803
 -18.75, -7.975726998
 -18, -7.666710789
 -17.25, -7.356984849
 -16.5, -7.046532879
 -15.75, -6.735338595
 -15, -6.423385732
 -14.25, -6.110658037
 -13.5, -5.797139268
 -12.75, -5.48281319
 -12, -5.167663571
 -11.25, -4.851674183
 -10.5, -4.534828795
 -9.75, -4.217111173
 -9, -3.898505077
 -8.25, -3.578994256
 -7.5, -3.258562449
 -6.75, -2.937193383
 -6, -2.614870765
 -5.25, -2.291578288
 -4.5, -1.96729962
 -3.75, -1.642018409
 -3, -1.315718277
 -2.25, -0.988382819
 -1.5, -0.659995602
 -0.75, -0.330540162
 0, 0
 0.75, 0.331641416
 1.5, 0.664400653
 2.25, 0.998294321
 3, 1.333339065
 3.75, 1.669551575
 4.5, 2.006948582
 5.25, 2.345546864
 6, 2.685363245
 6.75, 3.026414596
 7.5, 3.368717839
 8.25, 3.712289945
 9, 4.057147939
 9.75, 4.4033089
 10.5, 4.75078996
 11.25, 5.09960831
 12, 5.449781196
 12.75, 5.801325924
 13.5, 6.154259862
 14.25, 6.508600436
 15, 6.864365136
 15.75, 7.221571516
 16.5, 7.580237193
 17.25, 7.940379853
 18, 8.302017245
 18.75, 8.665167187
 19.5, 9.029847569
 20.25, 9.396076346
 21, 9.763871547
 21.75, 10.13325127
 22.5, 10.50423369
 23.25, 10.87683706
 24, 11.25107969
 24.75, 11.62697999
 25.5, 12.00455642
 26.25, 12.38382755
 27, 12.76481199
 27.75, 13.14752847
 28.5, 13.53199577
 29.25, 13.91823277
 30, 14.30625842
 30.75, 14.69609177
 31.5, 15.08775194
 32.25, 15.48125814
 33, 15.87662968
 33.75, 16.27388593
 34.5, 16.67304639
 35.25, 17.07413062
 36, 17.47715829
 36.75, 17.88214916
 37.5, 18.28912308
 38.25, 18.69810001
 39, 19.1091
 39.75, 19.52214321
 40.5, 19.9372499
 41.25, 20.35444044
 42, 20.77373531
 42.75, 21.19515509
 43.5, 21.6187205
 44.25, 22.04445235
 45, 22.47237158
 45.75, 22.90249928
 46.5, 23.33485663
 47.25, 23.76946495
 48, 24.20634573
 48.75, 24.64552056
 49.5, 25.0870112
 50.25, 25.53083956
 51, 25.9770277
 51.75, 26.42559784
 52.5, 26.87657239
 53.25, 27.32997393
 54, 27.7858252
 54.75, 28.24414918
 55.5, 28.70496902
 56.25, 29.16830809
 57, 29.63418999
 57.75, 30.10263854
 58.5, 30.57367781
 59.25, 31.04733214
 60, 31.52362614
 60.75, 32.00258468
 61.5, 32.48423297
 62.25, 32.96859651
 63, 33.45570115
 63.75, 33.94557309
 64.5, 34.43823892
 65.25, 34.93372561
 66, 35.43206057
 66.75, 35.93327164
 67.5, 36.43738715
 68.25, 36.94443593
 69, 37.45444735
 69.75, 37.96745133
 70.5, 38.48347842
 71.25, 39.0025598
 72, 39.52472734
 72.75, 40.05001364
 73.5, 40.57845207
 74.25, 41.11007683
 75, 41.64492301
ENDTABLE
RACK_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -75, -41.64492301
 -74.25, -41.11007683
 -73.5, -40.57845207
 -72.75, -40.05001364
 -72, -39.52472734
 -71.25, -39.0025598
 -70.5, -38.48347842
 -69.75, -37.96745133
 -69, -37.45444735
 -68.25, -36.94443593
 -67.5, -36.43738715
 -66.75, -35.93327164
 -66, -35.43206057
 -65.25, -34.93372561
 -64.5, -34.43823892
 -63.75, -33.94557309
 -63, -33.45570115
 -62.25, -32.96859651
 -61.5, -32.48423297
 -60.75, -32.00258468
 -60, -31.52362614
 -59.25, -31.04733214
 -58.5, -30.57367781
 -57.75, -30.10263854
 -57, -29.63418999
 -56.25, -29.16830809
 -55.5, -28.70496902
 -54.75, -28.24414918
 -54, -27.7858252
 -53.25, -27.32997393
 -52.5, -26.87657239
 -51.75, -26.42559784
 -51, -25.9770277
 -50.25, -25.53083956
 -49.5, -25.0870112
 -48.75, -24.64552056
 -48, -24.20634573
 -47.25, -23.76946495
 -46.5, -23.33485663
 -45.75, -22.90249928
 -45, -22.47237158
 -44.25, -22.04445235
 -43.5, -21.6187205
 -42.75, -21.19515509
 -42, -20.77373531
 -41.25, -20.35444044
 -40.5, -19.9372499
 -39.75, -19.52214321
 -39, -19.1091
 -38.25, -18.69810001
 -37.5, -18.28912308
 -36.75, -17.88214916
 -36, -17.47715829
 -35.25, -17.07413062
 -34.5, -16.67304639
 -33.75, -16.27388593
 -33, -15.87662968
 -32.25, -15.48125814
 -31.5, -15.08775194
 -30.75, -14.69609177
 -30, -14.30625842
 -29.25, -13.91823277
 -28.5, -13.53199577
 -27.75, -13.14752847
 -27, -12.76481199
 -26.25, -12.38382755
 -25.5, -12.00455642
 -24.75, -11.62697999
 -24, -11.25107969
 -23.25, -10.87683706
 -22.5, -10.50423369
 -21.75, -10.13325127
 -21, -9.763871547
 -20.25, -9.396076346
 -19.5, -9.029847569
 -18.75, -8.665167187
 -18, -8.302017245
 -17.25, -7.940379853
 -16.5, -7.580237193
 -15.75, -7.221571516
 -15, -6.864365136
 -14.25, -6.508600436
 -13.5, -6.154259862
 -12.75, -5.801325924
 -12, -5.449781196
 -11.25, -5.09960831
 -10.5, -4.75078996
 -9.75, -4.4033089
 -9, -4.057147939
 -8.25, -3.712289945
 -7.5, -3.368717839
 -6.75, -3.026414596
 -6, -2.685363245
 -5.25, -2.345546864
 -4.5, -2.006948582
 -3.75, -1.669551575
 -3, -1.333339065
 -2.25, -0.998294321
 -1.5, -0.664400653
 -0.75, -0.331641416
 0, 0
 0.75, 0.330540162
 1.5, 0.659995602
 2.25, 0.988382819
 3, 1.315718277
 3.75, 1.642018409
 4.5, 1.96729962
 5.25, 2.291578288
 6, 2.614870765
 6.75, 2.937193383
 7.5, 3.258562449
 8.25, 3.578994256
 9, 3.898505077
 9.75, 4.217111173
 10.5, 4.534828795
 11.25, 4.851674183
 12, 5.167663571
 12.75, 5.48281319
 13.5, 5.797139268
 14.25, 6.110658037
 15, 6.423385732
 15.75, 6.735338595
 16.5, 7.046532879
 17.25, 7.356984849
 18, 7.666710789
 18.75, 7.975726998
 19.5, 8.284049803
 20.25, 8.591695552
 21, 8.898680627
 21.75, 9.205021441
 22.5, 9.510734443
 23.25, 9.815836124
 24, 10.12034302
 24.75, 10.42427171
 25.5, 10.72763884
 26.25, 11.03046109
 27, 11.33275522
 27.75, 11.63453805
 28.5, 11.93582646
 29.25, 12.23663743
 30, 12.53698798
 30.75, 12.83689526
 31.5, 13.13637647
 32.25, 13.43544893
 33, 13.73413005
 33.75, 14.03243734
 34.5, 14.33038845
 35.25, 14.62800111
 36, 14.92529321
 36.75, 15.22228273
 37.5, 15.51898783
 38.25, 15.81542679
 39, 16.11161804
 39.75, 16.40758017
 40.5, 16.70333195
 41.25, 16.99889232
 42, 17.29428038
 42.75, 17.58951545
 43.5, 17.88461703
 44.25, 18.17960484
 45, 18.47449881
 45.75, 18.7693191
 46.5, 19.06408611
 47.25, 19.35882048
 48, 19.65354313
 48.75, 19.94827523
 49.5, 20.24303824
 50.25, 20.53785392
 51, 20.83274432
 51.75, 21.12773184
 52.5, 21.42283918
 53.25, 21.71808943
 54, 22.01350601
 54.75, 22.30911274
 55.5, 22.60493383
 56.25, 22.9009939
 57, 23.19731803
 57.75, 23.49393171
 58.5, 23.79086093
 59.25, 24.08813216
 60, 24.38577239
 60.75, 24.68380915
 61.5, 24.98227051
 62.25, 25.28118515
 63, 25.58058235
 63.75, 25.88049202
 64.5, 26.18094475
 65.25, 26.48197182
 66, 26.78360526
 66.75, 27.08587784
 67.5, 27.38882313
 68.25, 27.69247556
 69, 27.99687041
 69.75, 28.3020439
 70.5, 28.60803319
 71.25, 28.91487647
 72, 29.22261297
 72.75, 29.53128304
 73.5, 29.84092821
 74.25, 30.15159121
 75, 30.46331605
ENDTABLE
RACK_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 5 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1,1) 0.1225555556 ! Coefficient: rack displacement per unit
                                          ! pinion angle (mm/deg), unit 1, axle 1
RACK_TRAVEL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rack
                        ! displacement
RACK_TRAVEL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rack displacement

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(1)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(1)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(1) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(1) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(2)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(2)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(2) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)    1000  ! Inside Apron for 16 m Radius Circle

! 2D table: row 1 has "0" (place holder) followed by 11 values of lateral position
! (m). Other rows have station (m) followed by 11 values of dZ (m).
ROAD_DZ_CARPET(1) 2D_LINEAR
 0, -3, -2.1, 2.1, 2.35, 2.6, 5.6, 5.85, 5.9, 6.1, 9, 12
 0, 0, 0, 0.1, 0.19, 0.227, 0.3, 0.33, 0.42, 0.45, 0.6, 0.7
 10, 0, 0, 0.1, 0.19, 0.227, 0.3, 0.33, 0.42, 0.45, 0.6, 0.7
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

ROAD_DZ_ID(2)    1001  ! Leg for Roundabout,  D = 36 m

! 2D table: row 1 has "0" (place holder) followed by 4 values of lateral position
! (m). Other rows have station (m) followed by 4 values of dZ (m).
ROAD_DZ_CARPET(2) 2D_LINEAR
 0, -3, -2.1, 2.1, 3
 30, -0.2, -0.2, 0, 0
 45, -0.2, -0.2, 0, 0
 55, 0, 0, 0, 0
 95, 0, 0, 0, 0
 105, -0.2, -0.2, 0, 0
 120, -0.2, -0.2, 0, 0
ENDTABLE
ROAD_DZ_GAIN(2)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(2)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(2)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(2)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(2)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(2)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_L_BOUNDARY: Road left/right boundary limit L. L is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. L from the calculation can be adjusted with ROAD_L_BOUNDARY_GAIN and
! ROAD_L_BOUNDARY_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_ROAD_L_BOUNDARY and SSTART_ROAD_L_BOUNDARY. This configurable function
! supports 400 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IROAD and ISIDE are used to identify the dataset when
! reading data.

ROAD_L_BOUNDARY_CONSTANT(1,1) 12 ; m ! Constant L, Road 1, left side boundary
ROAD_L_BOUNDARY_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(1,2) -5 ; m ! Constant L, Road 1, right side boundary
ROAD_L_BOUNDARY_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(2,1) LINEAR_FLAT ! Road 2, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(2,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(2,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(3,1) LINEAR_FLAT ! Road 3, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(3,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(3,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(3,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(4,1) LINEAR_FLAT ! Road 4, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(4,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(4,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(4,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(5,1) LINEAR_FLAT ! Road 5, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(5,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(5,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(5,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) -1 ; - ! Constant ID, Road 1, left side boundary
ROAD_NEW_ID_GAIN(1,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(1,2) STEP ! Road 1, right side boundary
 0, 1001
 25, 1002
 50, 1003
 75, 1004
ENDTABLE
ROAD_NEW_ID_GAIN(1,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(1,2) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(1,2) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(2,1) STEP ! Road 2, left side boundary
 0, 1004
 65, 1000
 85, 1002
ENDTABLE
ROAD_NEW_ID_GAIN(2,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(3,1) STEP ! Road 3, left side boundary
 0, 1001
 65, 1000
 85, 1003
ENDTABLE
ROAD_NEW_ID_GAIN(3,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(3,2) 0 ; - ! Constant ID, Road 3, right side boundary
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(4,1) STEP ! Road 4, left side boundary
 0, 1001
 65, 1000
 85, 1003
ENDTABLE
ROAD_NEW_ID_GAIN(4,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(4,2) 0 ; - ! Constant ID, Road 4, right side boundary
ROAD_NEW_ID_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(5,1) STEP ! Road 5, left side boundary
 0, 1003
 65, 1000
 85, 1001
ENDTABLE
ROAD_NEW_ID_GAIN(5,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(5,2) 0 ; - ! Constant ID, Road 5, right side boundary
ROAD_NEW_ID_OFFSET(5,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,1) 0 ; - ! [D] Constant ID, Road 6, left side boundary
ROAD_NEW_ID_OFFSET(6,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,2) 0 ; - ! [D] Constant ID, Road 6, right side boundary
ROAD_NEW_ID_OFFSET(6,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_NEW_S: Estimate of station in new road (left/right) when a switch occurs. New
! S is a function of S (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. New S from the calculation can be adjusted with
! ROAD_NEW_S_GAIN and ROAD_NEW_S_OFFSET. S used in the calculation can be adjusted
! with SSCALE_ROAD_NEW_S and SSTART_ROAD_NEW_S. This configurable function supports
! 400 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IROAD and ISIDE are used to identify the dataset when reading data.

ROAD_NEW_S_CONSTANT(1,2) 75 ; m ! Constant new S, Road 1, right side boundary
ROAD_NEW_S_GAIN(1,2) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get new S

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(2,1) LINEAR ! Road 2, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 0
 90, 25
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(2,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(3,1) LINEAR ! Road 3, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 25
 90, 50
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(3,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(4,1) LINEAR ! Road 4, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 50
 90, 75
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(4,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(5,1) LINEAR ! Road 5, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 75
 90, 100
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(5,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(2) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(3) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(4) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(4)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(5) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(5)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(6) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(6)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(3) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(3)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(3)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(3) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(3) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(4) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(4)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(4)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(4) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(4) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(5) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(5)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(5)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(5) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(5) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(6) 1 ; - ! [D] Constant RR_SURF component due to station
RR_SURF_GAIN(6)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(6)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(6) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(6) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 5 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(2,1) 0 ; - ! [D] Constant gain, unit 2, axle 1
R_STEER_SPEED_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AX_BRAKE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AX_THROTTLE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AY_LEFT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AY_RIGHT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Target Speed for Roundabout
SPEED_TARGET_CONSTANT(1) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(1) STEP ! step interpolation, flat-line extrapolation
 50, 80
 60, 30
 90, 80
ENDTABLE
SSTART_SPEED_TARGET(1) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(1) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(2)  2  ! Target Speed for Roundabout
SPEED_TARGET_CONSTANT(2) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(2) STEP ! step interpolation, flat-line extrapolation
 50, 80
 60, 30
 90, 80
ENDTABLE
SSTART_SPEED_TARGET(2) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(2) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 5 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1,1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 1, axle 1
STEER_COMP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

STEER_COMP_COEFFICIENT(2,1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 2, axle 1
STEER_COMP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(2,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(2,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 10 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -34.11, -30.08
 -32.74, -28.98
 -31.38, -27.89
 -30.01, -26.78
 -28.65, -25.67
 -27.28, -24.55
 -25.92, -23.43
 -24.56, -22.3
 -23.19, -21.16
 -21.83, -20
 -20.46, -18.85
 -19.1, -17.68
 -17.73, -16.5
 -16.37, -15.3
 -15.01, -14.1
 -13.64, -12.89
 -12.28, -11.66
 -10.91, -10.42
 -9.55, -9.17
 -8.19, -7.9
 -6.82, -6.62
 -5.46, -5.33
 -4.09, -4.02
 -2.73, -2.7
 -1.36, -1.36
 0, 0
 1.36, 1.37
 2.73, 2.76
 4.09, 4.17
 5.46, 5.59
 6.82, 7.03
 8.19, 8.49
 9.55, 9.96
 10.91, 11.45
 12.28, 12.96
 13.64, 14.49
 15.01, 16.03
 16.37, 17.59
 17.73, 19.17
 19.1, 20.76
 20.46, 22.37
 21.83, 23.99
 23.19, 25.63
 24.56, 27.29
 25.92, 28.95
 27.28, 30.63
 28.65, 32.32
 30.01, 34.02
 31.38, 35.74
 32.74, 37.46
 34.11, 39.19
ENDTABLE
STEER_KIN_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -34.11, -39.19
 -32.74, -37.46
 -31.38, -35.74
 -30.01, -34.02
 -28.65, -32.32
 -27.28, -30.63
 -25.92, -28.95
 -24.56, -27.29
 -23.19, -25.63
 -21.83, -23.99
 -20.46, -22.37
 -19.1, -20.76
 -17.73, -19.17
 -16.37, -17.59
 -15.01, -16.03
 -13.64, -14.49
 -12.28, -12.96
 -10.91, -11.45
 -9.55, -9.96
 -8.19, -8.49
 -6.82, -7.03
 -5.46, -5.59
 -4.09, -4.17
 -2.73, -2.76
 -1.36, -1.37
 0, 0
 1.36, 1.36
 2.73, 2.7
 4.09, 4.02
 5.46, 5.33
 6.82, 6.62
 8.19, 7.9
 9.55, 9.17
 10.91, 10.42
 12.28, 11.66
 13.64, 12.89
 15.01, 14.1
 16.37, 15.3
 17.73, 16.5
 19.1, 17.68
 20.46, 18.85
 21.83, 20
 23.19, 21.16
 24.56, 22.3
 25.92, 23.43
 27.28, 24.55
 28.65, 25.67
 30.01, 26.78
 31.38, 27.89
 32.74, 28.98
 34.11, 30.08
ENDTABLE
STEER_KIN_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 5 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IUNIT and IAXLE are used to identify the dataset when reading
! data.

! 1D table: col 1 = roll (deg), col 2 = steer (deg)
SUSP_AXLE_ROLL_STEER_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10, -1
 0, 0
 10, 2
ENDTABLE
SUSP_AXLE_ROLL_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,1) -0.1 ! Coefficient: steer per unit roll
                                           ! (deg/deg), unit 3, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 10 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, right side

SUSP_DIVE_COEFFICIENT(1,2,1) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 1, axle 2, left side
SUSP_DIVE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, left side

SUSP_DIVE_COEFFICIENT(1,2,2) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 1, axle 2, right side
SUSP_DIVE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, right side

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 5 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IUNIT and IAXLE are used to identify
! the dataset when reading data.

SUSP_DIVE_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                                  ! (deg/mm), unit 2, axle 2
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
JNC_START_SUSP_DIVE_AXLE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE_AXLE(2,2) 1 ! Scale factor divided into (jounce -
                                ! JNC_START_SUSP_DIVE_AXLE)

SUSP_DIVE_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: suspension dive per unit jounce
                                  ! (deg/mm), unit 3, axle 1
SUSP_DIVE_AXLE_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
JNC_START_SUSP_DIVE_AXLE(3,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE_AXLE(3,1) 1 ! Scale factor divided into (jounce -
                                ! JNC_START_SUSP_DIVE_AXLE)

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 10 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, right
                                          ! side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, right side

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 5 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IUNIT and IAXLE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X axle movement forward (mm)
SUSP_X_AXLE_TABLE(2,2) SPLINE ! unit 2, axle 2
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
JNC_START_SUSP_X_AXLE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_X_AXLE)

SUSP_X_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: X axle movement forward per unit
                               ! jounce (mm/mm), unit 3, axle 1
SUSP_X_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
JNC_START_SUSP_X_AXLE(3,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(3,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_X_AXLE)

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 5 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10.053, 16.793
 -8.3636, 14.014
 -6.6819, 11.23
 -5.0063, 8.4357
 -3.335, 5.6313
 -1.6668, 2.8181
 0, 0
 1.6668, -2.8181
 3.335, -5.6313
 5.0063, -8.4357
 6.6819, -11.23
 8.3636, -14.014
 10.053, -16.793
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,1) SPLINE ! unit 3, axle 1
 -10, -17.412
 -8, -13.955
 -6, -10.481
 -4, -6.995
 -2, -3.499
 0, 0
 2, 3.499
 4, 6.995
 6, 10.481
 8, 13.955
 10, 17.412
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 1

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

THROTTLE_ENGINE_CONSTANT(1) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(2) 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 10
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(1,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(1,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

TPREV_CONSTANT(1) 0.4 ; s ! Constant preview time
TPREV_GAIN(1)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(1)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(2) 0.4 ; s ! Constant preview time
TPREV_GAIN(2)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(2)     0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 34 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IGEAR are used to identify the dataset when
! reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 331
 0.2, 331
 0.8, 1277
 1, 1277
ENDTABLE
UPSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 426
 0.2, 426
 0.8, 2188
 1, 2188
ENDTABLE
UPSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 600
 0.2, 600
 0.8, 2809
 1, 2809
ENDTABLE
UPSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 845
 0.2, 845
 0.8, 3960
 1, 3960
ENDTABLE
UPSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 984
 0.2, 984
 0.8, 5577
 1, 5577
ENDTABLE
UPSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER VEHICLE = 202; - ; Vehicle (object type)
DEFINE_PARAMETER AX_BRAKE = 1; m/s2 ; Threshold for applying brakes

DEFINE_OUTPUT DistCrit = 72.0181; m ; Distance to object bdry 
DEFINE_OUTPUT VxCrit = 0; km/h ; Sensor speed detection 
DEFINE_OUTPUT AxCrit = 0; m/s2 ; Required decel for nearest 
DEFINE_OUTPUT ApplyAEB = 0; - ; Boolean: apply brakes? 

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT ROAD_ID_OBJ(3) = CURRENT_ROAD_ID(2);

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT DISTCRIT = IF(MAGS1_1, MAX(1, X_S1_1 -2 -MSGS1_1), 0);
EQ_OUT VXCRIT = IF(DISTCRIT > 0, VX_S1_1, 0);
EQ_OUT AXCRIT = IF(VXCRIT < 0, VXCRIT*VXCRIT/(2*DISTCRIT), 0);
EQ_OUT APPLYAEB = (AXCRIT > AX_BRAKE) | ((AXCRIT > 0.25) & (DISTCRIT < 2));
EQ_OUT AX_SCCMD = -AXCRIT;
EQ_OUT X_OBJ_3 = X_DM_1_V2;
EQ_OUT Y_OBJ_3 = Y_DM_1_V2;

!------------------------------------------------------------------------------------
! EVENTS
!------------------------------------------------------------------------------------
! Each event is defined with a formula and an optional pathname for a parsfile to
! read if the specified formula is not zero. If no pathname is specified and the
! specified formula is not zero, then the run stops.
SET_EVENT_ID 1
DEFINE_EVENT APPLYAEB; Events\Events_b0a6df30-8e8f-4962-aac6-09478e36c58e.par ! ID 1
SET_EVENT_ID 0


END
