PARSFILE
! CarSim 2021.0
! Revision 153671, December 9, 2020
MODEL_LAYOUT I_I

DATASET_TITLE emABS_withall
CATEGORY emABS
TITLE emABS_withall <emABS>

! Echo: C:\Users\Public\Documents\CarSim2021.0_Data (1)\Results\Run_8b4927ec-124b-4efd-a1ef-a133696c4a02\LastRun_echo.par
! This run was made 20:52 on September 10, 2025.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             25 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           5 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    34 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT      40 ! Number of output variables activated for export (read only)
! NOUT_WRITE       86 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_IO_SYNC_FM      1 ! Synchronize imports and exports for case when imported
                      ! forces and moments are calculated from exported kinematical
                      ! variables: 0 -> no, 1 -> synchronize. This option is
                      ! available for OPT_INT_METHOD = -1 or 0 when there are both
                      ! import and export variables. [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SKIP_TSTART     0 ! [D] Skip calculations at T = TSTART when running under
                      ! external software? 0 -> no, 1 -> skip [L]
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.4161641536 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART         10.001 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE   10.001 ; s ! Start writing outputs when this time is reached
TSTEP           0.001 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP          20.002 ; s ! Stop when this time is reached
! T_DT          0.001 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 532.2733571 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1057.309384 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL -1.450232765e-06 ; mm ! CALC -- Y coordinate of TL CG
! M_TL         2124.1 ; kg ! CALC -- TL mass
! IXX_TL  570.4476107 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  1745.981876 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  1857.372998 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           540 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1040 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU           1898.2 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU          440.6 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU         1343.1 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU         1343.1 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1314 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM           4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM           1889 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM          1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         1.6 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       2600 ; mm ! Aerodynamic reference length
X_REF_AERO      -1300 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         468 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         468 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)     1.99 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,2)     1.99 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1) 1.14 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,2) 1.14 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1)          0.09 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          0.09 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)     0.04 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)     0.04 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1480 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)   10.31 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)   10.31 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)   25.39 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)   25.39 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)       121.4 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.8301482702 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_WC(2,1)         468 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         468 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(2,1)     1.99 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(2,2)     1.99 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(2,1) 1.14 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(2,2) 1.14 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(2,1)          0.09 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)          0.09 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)     0.04 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)     0.04 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1485 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       2600 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(2,1)   27.25 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(2,2)   27.25 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)       104.5 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.4784688995 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 207.9731457 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 207.9731457 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 11168.98982 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 11168.98982 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 5823.24808 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 5823.24808 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 12359.51713 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 12359.51713 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 6179.758564 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 6179.758564 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 919.2156871 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 3 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 3 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 3 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 3 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 133.464657 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 133.464657 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(2) 7445.993212 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 7445.993212 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 4671.262994 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 4671.262994 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 8470.788137 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 8470.788137 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 4235.394068 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 4235.394068 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 924.5476475 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 3 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 3 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 3 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 3 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Option for calculating steering wheel torque when the angle
                      ! is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table, 1 ->
                      ! calculated (see the steering Help document for details) [I]
OPT_POWER           1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
OPT_I_GEAR_IN       0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes [I]
BETA_COL          0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL           0.002 ; N-m-s/deg ! Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL           0.1 ; N-m ! Steering column friction torque
I_COL            0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN    0.000165 ; kg-m2 ! Steering system inertia
F_BOOST_MAX      3000 ; N ! Maximum power steering boost force
TC_BOOST         0.04 ; s ! Time constant for power steering boost
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! [D] Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         1 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)       3 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)       3 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)       13.5 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)       13.5 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      5 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      5 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1)      0.3 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1)         4.5 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1)       250 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1)       75.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)       75.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1) 1 ! Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_COMB(1,1)  1 ! Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)     11500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1)           1.9 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1)      1.1 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1)        25 ; kg ! Mass of tire L1
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1)           358 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1)          347 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1)      0.0042 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1)          1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1)     3.2e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
R_TIRE_COMB(1,1)  1.5 ; - ! Combined slip transition factor: Factor used to
                      ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 1 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)     11500 ; N ! Reference vertical force
IT(1,2)           1.9 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,2)      1.1 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,2)        25 ; kg ! Mass of tire R1
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,2)           358 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2)          347 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,2)      0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2)     3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2)  1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 1 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(2,1)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)     11500 ; N ! Reference vertical force
IT(2,1)           1.9 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(2,1)      1.1 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(2,1)        25 ; kg ! Mass of tire L2
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(2,1)           358 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1)          347 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(2,1)      0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1)     3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,1)  1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 1 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(2,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)     11500 ; N ! Reference vertical force
IT(2,2)           1.9 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(2,2)      1.1 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(2,2)        25 ; kg ! Mass of tire R2
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(2,2)           358 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2)          347 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(2,2)      0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2)     3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,2)  1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              3 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise [L]
OPT_HEV             2 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
OPT_MOTOR_ON_AXLE   1 ! Is electric motor placed on each drive axle?: 0 -> No, a
                      ! motor per vehicle; 1 -> Yes, a motor per drive axle
INSTALL_ELECTRIC_DRIVE_MOTORS  ! VS Command to install electric motors
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1) 1 ! Front diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the front diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(1) 0.8 ; N-m-s/deg ! Torsional damping for locked front diff [I]
LOCKED_DIFF_K(1)   80 ; N-m/deg ! Torsional spring rate for locked front diff [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of front diff [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of front diff [I]
R_GEAR_DIFF(1)  10.65 ; - ! Gear ratio of front diff [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of front diff input shaft [I]
OPT_MOTOR_ON_WHEEL(1) 0 ! Is electric motor placed on each wheel of front diff?: 0
                        ! -> No, a motor per axle; 1 -> Yes, a motor per wheel
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of left half shaft, front diff [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of right half shaft, front diff [I]
OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for front diff: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on front diff? 0 -> no, 1 -> yes [I]

OPT_DIFF_INTERNAL(2) 1 ! Rear diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the rear diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked rear diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of rear diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of rear diff [I]
R_GEAR_DIFF(2)  10.65 ; - ! Gear ratio of rear diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of rear diff input shaft [I]
OPT_MOTOR_ON_WHEEL(2) 0 ! Electric motor per wheel/axle on rear diff
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, rear diff [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, rear diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for rear diff: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on rear diff? 0 -> no, 1 -> yes [I]

OPT_DIFF_INTERNAL(3) 1 ! Transfer case model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(3)  0 ! [D] Is the transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! [D] Fraction: transfer case torque on the transfer case
                      ! [I]
LOCKED_DIFF_DAMP(3) 0.8 ; N-m-s/deg ! Torsional damping for locked transfer case [I]
LOCKED_DIFF_K(3)   80 ; N-m/deg ! Torsional spring rate for locked transfer case [I]
R_EFF_F_DIFF(3)  0.99 ; - ! Forward efficiency of transfer case [I]
R_EFF_R_DIFF(3)  0.99 ; - ! Reverse efficiency of transfer case [I]
R_GEAR_DIFF(3)      1 ; - ! Gear ratio of transfer case [I]
IDS(3)              0 ; kg-m2 ! [D] Spin inertia of transfer case input shaft [I]
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control for transfer case: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]

! The Hybrid/Electric powertrain system parameters.

TC_PWR_HYBRID_AV  0.8 ; s ! Time constant for hybrid/electric available power

! The hybrid/electric powertrain battery parameters.

N_BATTERY          40 ; - ! Number of battery packs [I]
T_BATTERY_INIT     40 ; C ! Initial battery temperature [I]
BATTERY_CHARGE_INIT 0.6 ; - ! Initial battery charged level [I]
V_MOTOR_MIN        60 ; V ! Minimum voltage for electric motor [I]
V_BATTERY_MIN       6 ; V ! Minimum voltage per battery pack [I]
V_BATTERY_MAX       9 ; V ! Maximum voltage per battery pack [I]

! The hybrid/electric power management control parameters.

PWR_EV_MODE       200 ; kW ! Maximum power allowance operated with EV mode [I]
PWR_HEV_DRV_MAX   272 ; kW ! Maximum power available with HEV system (used by speed
                      ! control only) [I]
KPW_PBK_HEV        16 ; kW/MPa ! Brake power demand per master cylinder control
                      ! pressure [I]
CF_HEV_PBK       0.08 ; - ! [D] Control shape factor for regenerative motor power
                      ! around zero speed [I]
REGEN_BRK_OFF     0.8 ; - ! Battery charged level to turn off regenerative brake [I]

! The hybrid/electric powertrain motor parameters.

R_REAR_MOTOR_BIAS(3) 0.5 ; - ! Fraction: motor torque distributed on rear drive axle
                         ! [I]

! The hybrid/electric powertrain axle/wheel motor parameters.

IMOTOR(1,1)    0.0226 ; kg-m2 ! Spin inertia of electric motor on center of front
                      ! drive axle [I]
TC_MOTOR(1,1)    0.05 ; s ! Time constant for electric motor torque on center of
                      ! front drive axle
IMOTOR(2,1)    0.0226 ; kg-m2 ! Spin inertia of electric motor on center of rear
                      ! drive axle [I]
TC_MOTOR(2,1)    0.05 ; s ! Time constant for electric motor torque on center of
                      ! rear drive axle

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_THROTTLE_DELAY  0 ! [D] Use throttle time constants: 0 -> no, 1 -> yes

!------------------------------------------------------------------------------------
! MODEL PARAMETERS
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.


!------------------------------------------------------------------------------------
! MODEL PARAMETERS
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.


!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; long road
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! SPATH_LAP(1) 2088.655147 ; m ! CALC -- Lap distance for this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 1000 ; m ! Segment length
! S_SEGMENT_END(1,1) 1000 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 1000 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; Straight Segments
ROAD_PATH_ID(1)     1 ; PATH_ID for: long road
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             2 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          1 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            20 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      0 ! [D] Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              0 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, right
                                           ! side

! CAP_BATTERY_MAX: Battery maximum capacity. Battery full capacity is a function of
! Temperature (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Battery full capacity from the calculation can be adjusted
! with CAP_BATTERY_MAX_GAIN and CAP_BATTERY_MAX_OFFSET. Temperature used in the
! calculation can be adjusted with TEMP_SCALE_CAP_BATTERY and TEMP_START_CAP_BATTERY.

CAP_BATTERY_MAX_CONSTANT 120 ; A-h ! Constant Battery full capacity
CAP_BATTERY_MAX_GAIN 1 ! Gain multiplied with calculated value to get Battery full
                       ! capacity
CAP_BATTERY_MAX_OFFSET 0 ; A-h ! Offset added (after gain) to get Battery full
                         ! capacity

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) -0.00033 ! Coefficient: inclination displacement per unit
                                ! force (deg/N), axle 2, left side
CI_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) -0.00033 ! Coefficient: inclination displacement per unit
                                ! force (deg/N), axle 2, right side
CI_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) -0.0005 ! Coefficient: inclination displacement per unit
                               ! moment (deg/N-m), axle 2, left side
CI_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) -0.0005 ! Coefficient: inclination displacement per unit
                               ! moment (deg/N-m), axle 2, right side
CI_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, front
                                  ! diff
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, rear
                                  ! diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, front diff
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, transfer
                                 ! case
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.965 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.965 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.959 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, left
                                    ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.959 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, right
                                    ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, left
                                    ! side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, right
                                    ! side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -4.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -4.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) -8.31e-06 ! Coefficient: Steer displacement per unit force
                                 ! (deg/N), axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) -8.31e-06 ! Coefficient: Steer displacement per unit force
                                 ! (deg/N), axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 1.3e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 1.3e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) -0.00012 ! Coefficient: steer displacement per unit moment
                                ! (deg/N-m), axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) -0.00012 ! Coefficient: steer displacement per unit moment
                                ! (deg/N-m), axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 6.1e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 6.1e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) -6.3e-06 ! Coefficient: toe displacement per unit force
                                ! (deg/N), axle 2, left side
CT_FX_GAIN(2,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) -6.3e-06 ! Coefficient: toe displacement per unit force
                                ! (deg/N), axle 2, right side
CT_FX_GAIN(2,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1) 9.42e-06 ! Coefficient: lateral displacement per unit force
                                ! (mm/N), axle 2, left side
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,2) 9.42e-06 ! Coefficient: lateral displacement per unit force
                                ! (mm/N), axle 2, right side
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 3.64e-05 ! Coefficient: X displacement per unit force
                                 ! (mm/N), axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 3.64e-05 ! Coefficient: X displacement per unit force
                                 ! (mm/N), axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 28 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 28 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 35 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 35 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 28 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 28 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 35 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 35 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 470 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 470 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 470 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 470 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST.

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost force (N)
F_BOOST_R_TABLE SPLINE ! spline interpolation and extrapolation
 -8.1, -2976.2
 -7.965, -2901.8
 -7.83, -2827.4
 -7.695, -2753
 -7.56, -2678.6
 -7.425, -2604.2
 -7.29, -2529.8
 -7.155, -2455.4
 -7.02, -2381
 -6.885, -2306.6
 -6.75, -2232.2
 -6.615, -2157.8
 -6.48, -2083.4
 -6.345, -2009
 -6.21, -1934.6
 -6.075, -1860.2
 -5.94, -1785.7
 -5.805, -1711.3
 -5.67, -1636.9
 -5.13, -1391.4
 -4.995, -1343
 -4.86, -1294.7
 -4.725, -1246.3
 -4.59, -1197.9
 -4.455, -1149.6
 -4.32, -1101.2
 -4.185, -1052.8
 -4.05, -1004.5
 -3.915, -956.12
 -3.78, -907.75
 -3.645, -859.39
 -3.51, -811.03
 -3.375, -762.66
 -3.24, -714.3
 -3.105, -665.93
 -2.97, -617.57
 -2.835, -569.21
 -2.7, -520.84
 -2.565, -472.48
 -2.43, -424.12
 -2.295, -375.75
 -2.16, -327.39
 -2.025, -279.02
 -1.89, -230.66
 -1.755, -182.3
 -1.62, -133.93
 -1.08, -29.762
 -0.945, -26.042
 -0.81, -22.322
 -0.675, -18.602
 -0.54, -14.881
 -0.405, -11.161
 -0.27, -7.4406
 -0.135, -3.7203
 0, 0
 0.135, 3.7203
 0.27, 7.4406
 0.405, 11.161
 0.54, 14.881
 0.675, 18.602
 0.81, 22.322
 0.945, 26.042
 1.08, 29.762
 1.62, 133.93
 1.755, 182.3
 1.89, 230.66
 2.025, 279.02
 2.16, 327.39
 2.295, 375.75
 2.43, 424.12
 2.565, 472.48
 2.7, 520.84
 2.835, 569.21
 2.97, 617.57
 3.105, 665.93
 3.24, 714.3
 3.375, 762.66
 3.51, 811.03
 3.645, 859.39
 3.78, 907.75
 3.915, 956.12
 4.05, 1004.5
 4.185, 1052.8
 4.32, 1101.2
 4.455, 1149.6
 4.59, 1197.9
 4.725, 1246.3
 4.86, 1294.7
 4.995, 1343
 5.13, 1391.4
 5.67, 1636.9
 5.805, 1711.3
 5.94, 1785.7
 6.075, 1860.2
 6.21, 1934.6
 6.345, 2009
 6.48, 2083.4
 6.615, 2157.8
 6.75, 2232.2
 6.885, 2306.6
 7.02, 2381
 7.155, 2455.4
 7.29, 2529.8
 7.425, 2604.2
 7.56, 2678.6
 7.695, 2753
 7.83, 2827.4
 7.965, 2901.8
 8.1, 2976.2
ENDTABLE
F_BOOST_R_GAIN      1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET    0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST  0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST  1 ! Scale factor divided into (torsion bar torque -
                      ! M_TB_START_F_BOOST)
F_BOOST_R_COMBINE ADD ! How to combine the two components
SET_UNITS F_BOOST_R_V_TABLE N ;
F_BOOST_R_V_CONSTANT 0 ; N ! Constant boost force component due to speed

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(1,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(1,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(2,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(2,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 1.8m Right, 0.4s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! Lateral target for vehicles in the same lane
LTARG_CONSTANT(2)   2 ; m ! Constant lateral offset
LTARG_GAIN(2)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 80 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 80 ; mm ! Constant tire contact length, axle 1, right side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 80 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 80 ; mm ! Constant tire contact length, axle 2, right side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 235 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 235 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 235 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 235 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1) 0.0694 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 1, left side
SET_UNITS L_RELAX_X_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2) 0.0694 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 1, right side
SET_UNITS L_RELAX_X_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1) 0.0694 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 2, left side
SET_UNITS L_RELAX_X_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2) 0.0694 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 2, right side

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1) 0.694 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2) 0.694 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1) 0.694 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2) 0.694 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2) 11500 ! Scale factor divided into Fz

! MMOTOR_MAX: Motor maximum torque. Motor full torque is a function of motor speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Motor full torque from the calculation can be adjusted with
! MMOTOR_MAX_GAIN and MMOTOR_MAX_OFFSET. Motor speed used in the calculation can be
! adjusted with SPIN_SCALE_M_MOTOR_MAX and SPIN_START_M_MOTOR_MAX. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IDIFF and ISIDE are used to identify the dataset when
! reading data.

MMOTOR_MAX_CONSTANT(1,1) 605 ; N-m ! Constant Motor full torque
MMOTOR_MAX_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque

MMOTOR_MAX_CONSTANT(2,1) 605 ; N-m ! Constant Motor full torque
MMOTOR_MAX_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.5 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 384 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 251 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 255 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 255 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 350 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 350 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1) LINEAR_FLAT ! axle 1, left side
 0, 65
 0.1, 58.662
 0.2, 52.65
 0.3, 46.962
 0.4, 41.6
 0.5, 36.562
 0.6, 31.85
 0.7, 27.462
 0.8, 23.4
 0.9, 19.662
 1, 16.25
 1.1, 13.162
 1.2, 10.4
 1.3, 7.9625
 1.4, 5.85
 1.5, 4.0625
 1.6, 2.6
 1.7, 1.4625
 1.8, 0.65
 1.9, 0.1625
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1) 1 ! Scale factor divided into (vehicle speed -
                                 ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,2) LINEAR_FLAT ! axle 1, right side
 0, 65
 0.1, 58.662
 0.2, 52.65
 0.3, 46.962
 0.4, 41.6
 0.5, 36.562
 0.6, 31.85
 0.7, 27.462
 0.8, 23.4
 0.9, 19.662
 1, 16.25
 1.1, 13.162
 1.2, 10.4
 1.3, 7.9625
 1.4, 5.85
 1.5, 4.0625
 1.6, 2.6
 1.7, 1.4625
 1.8, 0.65
 1.9, 0.1625
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,2) 1 ! Scale factor divided into (vehicle speed -
                                 ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(1) 0 ; N-m ! [D] Constant this torque difference, front diff
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, rear diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(3) 0 ; N-m ! Constant this torque difference, transfer case
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 0 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 0 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! PWR_DRV_THROTTLE: Driving power demanded by throttle pedal. Driving power is a
! function of Throttle pedal position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Driving power from the
! calculation can be adjusted with PWR_DRV_THROTTLE_GAIN and PWR_DRV_THROTTLE_OFFSET.
! Throttle pedal position used in the calculation can be adjusted with
! SPIN_SCALE_PWR_DRV_THRT and SPIN_START_PWR_DRV_THRT. An inverse version of this
! function is used internally.

PWR_DRV_THROTTLE_COEFFICIENT 272 ! Coefficient: Driving power per unit Throttle
                                 ! pedal position (kW/-)
PWR_DRV_THROTTLE_GAIN 1 ! Gain multiplied with calculated value to get Driving power
PWR_DRV_THROTTLE_OFFSET 0 ; kW ! Offset added (after gain) to get Driving power
SPIN_START_PWR_DRV_THRT 0 ; - ! Offset subtracted from Throttle pedal position
SPIN_SCALE_PWR_DRV_THRT 1 ! Scale factor divided into (Throttle pedal position -
                          ! SPIN_START_PWR_DRV_THRT)

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -57, -30.12
 -54.72, -28.9
 -52.44, -27.69
 -50.16, -26.49
 -47.88, -25.3
 -45.6, -24.12
 -43.32, -22.95
 -41.04, -21.78
 -38.76, -20.61
 -36.48, -19.44
 -34.2, -18.27
 -31.92, -17.11
 -29.64, -15.93
 -27.36, -14.76
 -25.08, -13.58
 -22.8, -12.4
 -20.52, -11.21
 -18.24, -10.01
 -15.96, -8.8
 -13.68, -7.58
 -11.4, -6.35
 -9.12, -5.11
 -6.84, -3.85
 -4.56, -2.58
 -2.28, -1.3
 0, 0
 2.28, 1.32
 4.56, 2.65
 6.84, 4.01
 9.12, 5.38
 11.4, 6.77
 13.68, 8.19
 15.96, 9.63
 18.24, 11.1
 20.52, 12.59
 22.8, 14.1
 25.08, 15.65
 27.36, 17.22
 29.64, 18.83
 31.92, 20.46
 34.2, 22.13
 36.48, 23.83
 38.76, 25.57
 41.04, 27.34
 43.32, 29.15
 45.6, 31
 47.88, 32.9
 50.16, 34.83
 52.44, 36.81
 54.72, 38.83
 57, 40.91
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -57, -40.91
 -54.72, -38.83
 -52.44, -36.81
 -50.16, -34.83
 -47.88, -32.9
 -45.6, -31
 -43.32, -29.15
 -41.04, -27.34
 -38.76, -25.57
 -36.48, -23.83
 -34.2, -22.13
 -31.92, -20.46
 -29.64, -18.83
 -27.36, -17.22
 -25.08, -15.65
 -22.8, -14.1
 -20.52, -12.59
 -18.24, -11.1
 -15.96, -9.63
 -13.68, -8.19
 -11.4, -6.77
 -9.12, -5.38
 -6.84, -4.01
 -4.56, -2.65
 -2.28, -1.32
 0, 0
 2.28, 1.3
 4.56, 2.58
 6.84, 3.85
 9.12, 5.11
 11.4, 6.35
 13.68, 7.58
 15.96, 8.8
 18.24, 10.01
 20.52, 11.21
 22.8, 12.4
 25.08, 13.58
 27.36, 14.76
 29.64, 15.93
 31.92, 17.11
 34.2, 18.27
 36.48, 19.44
 38.76, 20.61
 41.04, 21.78
 43.32, 22.95
 45.6, 24.12
 47.88, 25.3
 50.16, 26.49
 52.44, 27.69
 54.72, 28.9
 57, 30.12
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.1055555556 ! Coefficient: rack displacement per unit
                                        ! pinion angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 0.8 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_CHRG_BATTERY: Battery resistance being charged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_CHRG_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_CHRG_BATTERY_GAIN and
! R_CHRG_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_CHRG_BATTERY and SOC_START_R_CHRG_BATTERY. Temperature
! used in the calculation can be adjusted with TEMP_SCALE_R_CHRG_BATTERY and
! TEMP_START_R_CHRG_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of Battery
! resistance (V2/W).
R_CHRG_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 0.0235, 0.0235
 0.1, 0.022, 0.022
 0.2, 0.0205, 0.0205
 0.3, 0.0198, 0.0198
 0.4, 0.0198, 0.0198
 0.5, 0.0196, 0.0196
 0.6, 0.0198, 0.0198
 0.7, 0.0197, 0.0197
 0.8, 0.0203, 0.0203
 0.9, 0.0204, 0.0204
 1, 0.0204, 0.0204
ENDTABLE
R_CHRG_BATTERY_GAIN 1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_CHRG_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_CHRG_BATTERY 0 ; - ! Offset subtracted from Battery level state of
                           ! charge
SOC_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Battery level state of
                           ! charge - SOC_START_R_CHRG_BATTERY)
TEMP_START_R_CHRG_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Temperature -
                            ! TEMP_START_R_CHRG_BATTERY)

! R_DIS_BATTERY: Battery resistance being discharged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_DIS_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_DIS_BATTERY_GAIN and
! R_DIS_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_DIS_BATTERY and SOC_START_R_DIS_BATTERY. Temperature used
! in the calculation can be adjusted with TEMP_SCALE_R_DIS_BATTERY and
! TEMP_START_R_DIS_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of Battery
! resistance (V2/W).
R_DIS_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 0.0377, 0.0377
 0.1, 0.0338, 0.0338
 0.2, 0.03, 0.03
 0.3, 0.028, 0.028
 0.4, 0.0275, 0.0275
 0.5, 0.0268, 0.0268
 0.6, 0.0269, 0.0269
 0.7, 0.0273, 0.0273
 0.8, 0.0283, 0.0283
 0.9, 0.0298, 0.0298
 1, 0.0312, 0.0312
ENDTABLE
R_DIS_BATTERY_GAIN  1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_DIS_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_DIS_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Battery level state of charge
                          ! - SOC_START_R_DIS_BATTERY)
TEMP_START_R_DIS_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Temperature -
                           ! TEMP_START_R_DIS_BATTERY)

! R_EFF_MOTOR: Motor efficiency (hybrid powertrain). Motor efficiency can be a
! nonlinear CARPET function of motor output torque and motor speed or a function of
! motor speed (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! R_EFF_MOTOR_TORQUE of motor output torque (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Motor efficiency from
! the calculation can be adjusted with R_EFF_MOTOR_GAIN and R_EFF_MOTOR_OFFSET. Motor
! speed used in the calculation can be adjusted with SPIN_SCALE_R_EFF_MOTOR and
! SPIN_START_R_EFF_MOTOR. Motor output torque used in the calculation can be adjusted
! with TORQUE_SCALE_R_EFF_MOTOR and TORQUE_START_R_EFF_MOTOR. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IDIFF and ISIDE are used to identify the dataset when
! reading data.

R_EFF_MOTOR_CONSTANT(1,1) 4.8 ; - ! Constant Motor efficiency component due to motor
                              ! speed
R_EFF_MOTOR_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
R_EFF_MOTOR_TORQUE_CONSTANT(1,1) 1 ; - ! [D] Constant Motor efficiency scaling due
                                   ! to motor output torque

R_EFF_MOTOR_CONSTANT(2,1) 4.8 ; - ! Constant Motor efficiency component due to motor
                              ! speed
R_EFF_MOTOR_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
R_EFF_MOTOR_TORQUE_CONSTANT(2,1) 1 ; - ! [D] Constant Motor efficiency scaling due
                                   ! to motor output torque

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

SUSP_DIVE_COEFFICIENT(2,1) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, left side
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, left side

SUSP_DIVE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, right side
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, right side

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1) SPLINE ! axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,2) SPLINE ! axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.4 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! VOC_BATTERY: Battery pack open-circuit voltage. Open-circuit voltage can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function VOC_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Open-circuit
! voltage from the calculation can be adjusted with VOC_BATTERY_GAIN and
! VOC_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_VOC_BATTERY and SOC_START_VOC_BATTERY. Temperature used in
! the calculation can be adjusted with TEMP_SCALE_VOC_BATTERY and
! TEMP_START_VOC_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of
! Open-circuit voltage (V).
VOC_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 7.237, 7.237
 0.1, 7.4047, 7.4047
 0.2, 7.5106, 7.5106
 0.3, 7.5873, 7.5873
 0.4, 7.6459, 7.6459
 0.5, 7.6909, 7.6909
 0.6, 7.7294, 7.7294
 0.7, 7.7666, 7.7666
 0.8, 7.8078, 7.8078
 0.9, 7.9143, 7.9143
 1, 8.3645, 8.3645
ENDTABLE
VOC_BATTERY_GAIN    1 ! Gain multiplied with calculated value to get Open-circuit
                      ! voltage
VOC_BATTERY_OFFSET  0 ; V ! Offset added (after gain) to get Open-circuit voltage
SOC_START_VOC_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Battery level state of charge -
                        ! SOC_START_VOC_BATTERY)
TEMP_START_VOC_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Temperature -
                         ! TEMP_START_VOC_BATTERY)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 214.4292828 ; m ! Road path station for tracked aero road point
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission {TC_Lock}
SV_AVX -2.254836347e-08 ; deg/s ! ODE: Body-X roll rate of sprung-mass {AVx}
SV_AVY 0.0003386583754 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass {AVy}
SV_AVY_L1 574.6749652 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 574.6786825 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 574.6499844 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 574.6537015 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_R1  574.687333 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 574.6910503 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 574.6677796 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 574.6714969 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVZ 6.191936049e-08 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass {AVz}
SV_AV_CL            0 ; rpm ! Clutch relative spin
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG           0 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D1 574.6749652 ; rpm ! ODE: Diff1 Left (first) output shaft speed
                             ! {AV_DS_L1}
SV_AV_SHAFT_L_D2 574.6499844 ; rpm ! ODE: Diff2 Left (first) output shaft speed
                             ! {AV_DS_L2}
SV_AV_SHAFT_L_D3 6120.354238 ; rpm ! ODE: Diff3 Left (first) output shaft speed 
SV_AV_SHAFT_R_D1 574.687333 ; rpm ! ODE: Diff1 Right (second) output shaft speed
                            ! {AV_DS_R1}
SV_AV_SHAFT_R_D2 574.6677796 ; rpm ! ODE: Diff2 Right (second) output shaft speed
                             ! {AV_DS_R2}
SV_AV_SHAFT_R_D3 6120.117093 ; rpm ! ODE: Diff3 Right (second) output shaft speed 
SV_AV_SW 3.005986273e-06 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC            0 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC}
SV_AV_TR_OUT 6120.235666 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BATTERY_CHARGED 0.6 ; - ! Electric battery state of charge {SocBttry}
SV_BATTERY_DIS_CAP 48 ; A-h ! ODE: Electric battery discharged capacity {CapBtrDs}
SV_BETA -0.0009118938133 ; deg ! Sideslip (ISO)
SV_BETA_RD -0.0009118938133 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control
SV_BTR_CHRG_CUTOFF  0 ; - ! Battery charging cut-off by speed
SV_BTR_CHRG_ON_OFF  0 ; - ! Battery charging on/off old
SV_CL_2ND_DIFF_LOCKED_1 0 ; - ! 2nd Clutch lock state for front diff
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state for rear diff
SV_CL_2ND_DIFF_LOCKED_3 0 ; - ! 2nd Clutch lock state for transfer case
SV_CL_2ND_DIFF_SLIP_REF_1 0 ; deg ! 2nd Clutch ref. angle for front diff
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for rear diff
SV_CL_2ND_DIFF_SLIP_REF_3 0 ; deg ! 2nd Clutch ref. angle for transfer case
SV_CL_2ND_DIFF_SPIN_1 0 ; rpm ! 2nd Clutch rel. spin for front diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for rear diff
SV_CL_2ND_DIFF_SPIN_3 0 ; rpm ! 2nd Clutch rel. spin for transfer case
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_DIFF_LOCKED_1 0 ; - ! Clutch lock state for front diff
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for rear diff
SV_CL_DIFF_LOCKED_3 0 ; - ! Clutch lock state for transfer case
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Clutch ref. angle for front diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for rear diff
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Clutch ref. angle for transfer case
SV_CL_DIFF_SPIN_1 -0.01236784088 ; rpm ! Clutch rel. spin for front diff
SV_CL_DIFF_SPIN_2 -0.0177953783 ; rpm ! Clutch rel. spin for rear diff
SV_CL_DIFF_SPIN_3   0 ; rpm ! Clutch rel. spin for transfer case
SV_CL_LOCKED        1 ; - ! Clutch lockup state {Cl_Stat}
SV_CL_TWIN_LOCKED_LF 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_RF 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_SPIN_LF  0 ; rpm ! Rel. spin of LF twin clutch
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch
SV_CL_TWIN_SPIN_RF  0 ; rpm ! Rel. spin of RF twin clutch
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch
SV_CMP_S_L1 207.0612407 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 133.2216508 ; mm ! Compression of ride spring L2
SV_CMP_S_R1 207.0615295 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 133.2212199 ; mm ! Compression of ride spring R2
SV_CONTACT_ID_L1    1 ; - ! Road surface ID for tire contact {RdID_L1}
SV_CONTACT_ID_L2    1 ; - ! Road surface ID for tire contact {RdID_L2}
SV_CONTACT_ID_R1    1 ; - ! Road surface ID for tire contact {RdID_R1}
SV_CONTACT_ID_R2    1 ; - ! Road surface ID for tire contact {RdID_R2}
SV_CONTACT_STA_L1 215.7698641 ; m ! Road path station for tire contact {S_Rd_L1}
SV_CONTACT_STA_L2 213.169872 ; m ! Road path station for tire contact {S_Rd_L2}
SV_CONTACT_STA_R1 215.769881 ; m ! Road path station for tire contact {S_Rd_R1}
SV_CONTACT_STA_R2 213.1698993 ; m ! Road path station for tire contact {S_Rd_R2}
SV_DZDX_GND         0 ; - ! dZ/dX of ground at vehicle aero ref. pt (saved)
SV_DZDX_L1          0 ; - ! Ground X slope under tire L1 (saved)
SV_DZDX_L2          0 ; - ! Ground X slope under tire L2 (saved)
SV_DZDX_R1          0 ; - ! Ground X slope under tire R1 (saved)
SV_DZDX_R2          0 ; - ! Ground X slope under tire R2 (saved)
SV_DZDY_GND         0 ; - ! dZ/dY of ground at vehicle aero ref. pt (saved)
SV_DZDY_L1          0 ; - ! Ground Y slope under tire L1  (saved)
SV_DZDY_L2          0 ; - ! Ground Y slope under tire L2  (saved)
SV_DZDY_R1         -0 ; - ! Ground Y slope under tire R1  (saved)
SV_DZDY_R2         -0 ; - ! Ground Y slope under tire R2  (saved)
SV_D_ALPHA_L1       0 ; - ! Delta Alpha (Fy 0-crossing), tire L1
SV_D_ALPHA_L2       0 ; - ! Delta Alpha (Fy 0-crossing), tire L2
SV_D_ALPHA_MX_L1    0 ; - ! Delta Alpha (Mx 0-crossing), tire L1
SV_D_ALPHA_MX_L2    0 ; - ! Delta Alpha (Mx 0-crossing), tire L2
SV_D_ALPHA_MX_R1    0 ; - ! Delta Alpha (Mx 0-crossing), tire R1
SV_D_ALPHA_MX_R2    0 ; - ! Delta Alpha (Mx 0-crossing), tire R2
SV_D_ALPHA_R1       0 ; - ! Delta Alpha (Fy 0-crossing), tire R1
SV_D_ALPHA_R2       0 ; - ! Delta Alpha (Fy 0-crossing), tire R2
SV_D_CONI_L1        0 ; - ! Delta Coni (Mz 0-crossing), tire L1
SV_D_CONI_L2        0 ; - ! Delta Coni (Mz 0-crossing), tire L2
SV_D_CONI_R1        0 ; - ! Delta Coni (Mz 0-crossing), tire R1
SV_D_CONI_R2        0 ; - ! Delta Coni (Mz 0-crossing), tire R2
SV_D_KAPPA_L1       0 ; - ! Delta Kappa (Fx 0-crossing), tire L1
SV_D_KAPPA_L2       0 ; - ! Delta Kappa (Fx 0-crossing), tire L2
SV_D_KAPPA_R1       0 ; - ! Delta Kappa (Fx 0-crossing), tire R1
SV_D_KAPPA_R2       0 ; - ! Delta Kappa (Fx 0-crossing), tire R2
SV_ENG_MODE_CUTOFF  0 ; - ! Engine mode cut-off by speed
SV_ENG_MODE_ON_OFF  0 ; - ! Engine mode on/off old
SV_ESC_STATE        0 ; - ! State of ESC engine torque control
SV_EV_MODE_ON_OFF   0 ; - ! EV mode on/off old
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST -0.4650729573 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  5793.374224 ; N ! Force from ride spring L1
SV_FS_L2  4661.202939 ; N ! Force from ride spring L2
SV_FS_R1  5793.384654 ; N ! Force from ride spring R1
SV_FS_R2  4661.186834 ; N ! Force from ride spring R2
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 -54.86395323 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 -42.16673617 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_R1 -51.98163479 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 -39.28571016 ; N ! Tire force [sx] component, wheel R2
SV_FY_SM_L1 7.831987187 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 3.811638585 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_R1 -9.484722384 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 -2.172280458 ; N ! Tire force [sy] component, wheel R2
SV_FZ_SM_L1 6149.1361 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 4227.928846 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_R1 6148.983649 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 4228.07435 ; N ! Tire force force [sz] component, wheel R2
SV_F_HYS_RACK_A1 -2.375896844 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_HEV_DRV_OR_BRK   0 ; - ! HEV drive or brake mode
SV_HYBRID_MODE      1 ; - ! Hybrid/Electric powertrain mode
SV_IAVERR_GNR       0 ; deg ! ODE: Generator speed control integral error
SV_IVERR            0 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_JNCR_L1 1.446501935e-05 ; m/s ! ODE: Jounce rate at wheel L1
SV_JNCR_L2 1.266194782e-07 ; m/s ! ODE: Jounce rate at wheel L2
SV_JNCR_R1 1.446440755e-05 ; m/s ! ODE: Jounce rate at wheel R1
SV_JNCR_R2 1.261491827e-07 ; m/s ! ODE: Jounce rate at wheel R2
SV_JNC_L1 -0.0009508771068 ; m ! ODE: Jounce movement at wheel L1
SV_JNC_L2 -0.000304900899 ; m ! ODE: Jounce movement at wheel L2
SV_JNC_R1 -0.0009505759387 ; m ! ODE: Jounce movement at wheel R1
SV_JNC_R2 -0.0003054415914 ; m ! ODE: Jounce movement at wheel R2
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LOCKED_CLUTCH_NEUTRAL 1 ; - ! Is clutch locked while in neutral?
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MY_BRK_L1 4.936049442 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 4.935999193 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_R1 3.936217059 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 3.935957759 ; N-m ! Spin moment, wheel R2
SV_MZ_WHEEL_L1 -0.355053317 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 -0.1744831233 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_R1 0.4294698053 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 0.1000193508 ; N-m ! Tire Mz, wheel R2
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for front diff
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for rear diff
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for transfer case
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE: Clutch capacity for front diff
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for rear diff
SV_M_CL_CAP_XC_DYN  0 ; N-m ! ODE: Clutch capacity for transfer case
SV_M_CL_LF_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for front diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for rear diff
SV_M_CL_L_D3_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for transfer case
SV_M_CL_RF_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for front diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for rear diff
SV_M_CL_R_D3_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for transfer case
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL -0.02766128233 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -20.20976918 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_R1 20.29382208 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_MOTOR_D1       0 ; N-m ! ODE: Electric motor torque on center of diff. 1
SV_M_MOTOR_D2       0 ; N-m ! ODE: Electric motor torque on center of diff. 2
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_TC             0 ; N-m ! Transmission input shaft torque {M_TC}
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1           0 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2           0 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_R1           0 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2           0 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PITCH 0.07583763478 ; deg ! ODE: Pitch of sprung mass {Pitch}
SV_PW_AV_HYBRID 199999.2547 ; - ! ODE: Time delayed hybrid/electric system available
                            ! power
SV_REGEN_SOC_ON_OFF 1 ; - ! Regenerative SOC condition on/off old
SV_REGEN_W_ON_OFF   1 ; - ! Regenerative speed condition on/off old
SV_ROLL -9.252849184e-06 ; deg ! ODE: Roll (Euler) of sprung mass {Roll_E}
SV_ROT_L1 98.91434051 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 98.91131276 ; rev ! ODE: Rotation of wheel L2
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_R1 98.91592671 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 98.91358923 ; rev ! ODE: Rotation of wheel R2
SV_ROT_SHAFT_1 1053.446173 ; rev ! ODE: Front diff input shaft rotation {Rot_D3f}
SV_ROT_SHAFT_2 1053.417603 ; rev ! ODE: Rear diff input shaft rotation {Rot_D3r}
SV_ROT_SHAFT_3 1053.431888 ; rev ! ODE: Transfer case input shaft rotation 
SV_ROT_SHAFT_L_D1 98.91434051 ; rev ! ODE: Diff1 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D2 98.91131276 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D3 1053.446173 ; rev ! ODE: Diff3 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D1 98.91592671 ; rev ! ODE: Diff1 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D2 98.91358923 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D3 1053.417603 ; rev ! ODE: Diff3 Right (second) output shaft
                              ! rotation
SV_ROT_TC           0 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC}
SV_ROT_TR_OUT 1053.431888 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_TOTAL_SC  0 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.029746966 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -0.9999999873 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.029747663 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -0.9999999886 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1  0.3449165887 ; m ! Deflected radius for tire L1 (saved)
SV_R_L2  0.3490042958 ; m ! Deflected radius for tire L2 (saved)
SV_R_R1  0.3449169211 ; m ! Deflected radius for tire R1 (saved)
SV_R_R2  0.3490039944 ; m ! Deflected radius for tire R2 (saved)
SV_SLIP_LAT_L1 -0.0001010981771 ; - ! ODE: Lagged tan of lateral slip, tire L1
SV_SLIP_LAT_L2 -7.030341673e-05 ; - ! ODE: Lagged tan of lateral slip, tire L2
SV_SLIP_LAT_R1 0.0001231645461 ; - ! ODE: Lagged tan of lateral slip, tire R1
SV_SLIP_LAT_R2 3.896368506e-05 ; - ! ODE: Lagged tan of lateral slip, tire R2
SV_SLIP_LONG_L1 -0.0003491709428 ; - ! ODE: Lagged long. slip, tire L1 {KappL_L1}
SV_SLIP_LONG_L2 -0.00039260787 ; - ! ODE: Lagged long. slip, tire L2 {KappL_L2}
SV_SLIP_LONG_R1 -0.0003276547473 ; - ! ODE: Lagged long. slip, tire R1 {KappL_R1}
SV_SLIP_LONG_R2 -0.0003616546817 ; - ! ODE: Lagged long. slip, tire R2 {KappL_R2}
SV_SO_DIST 215.7291368 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 215.7292816 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 215.7292816 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM -0.002143298534 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD -0.002143298625 ; deg ! Road-wheel steer from driver model (prev. time
                              ! step)
SV_STR_IN_DGR_A1 1.878935241e-08 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_GR_A1 -0.0004685696258 ; - ! ODE: Steering gear input position, axle 1
                                 ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_KP_L1 0.00500983355 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD 0.005009934737 ; deg ! Kingpin steer angle, wheel L1 (previous time
                                ! step)
SV_STR_KP_L2 0.003104119292 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L2_OLD -0.009135938936 ; deg ! Kingpin steer angle, wheel L2 (previous
                                 ! time step)
SV_STR_KP_R1 -0.008189597903 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD -0.008189699207 ; deg ! Kingpin steer angle, wheel R1 (previous
                                 ! time step)
SV_STR_KP_R2 -0.003132955511 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R2_OLD 0.008646299911 ; deg ! Kingpin steer angle, wheel R2 (previous time
                                ! step)
SV_STR_OUT_GR_A1 -2.833856655e-06 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_SWA -0.03528480537 ; deg ! ODE: Steering wheel angle
SV_SWA_DM -0.03528480838 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD -0.03528480838 ; deg ! Steering wheel angle (previous time step)
SV_THROTTLE         0 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          0 ; - ! Requested Throttle
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed
SV_T_HYBRID_MODE_CHANGE -10000000 ; s ! Time at hybrid/electric powertrain mode
                                  ! changed
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VERR_OLD         0 ; km/h ! Speed controller error at previous time step
SV_VXS    75.20283379 ; km/h ! ODE: Body-X speed of laden sprung-mass CG
SV_VYS -0.0003324754065 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG
SV_VZS    0.027640576 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG
SV_XO     215.7292816 ; m ! ODE: Global X coord. of sprung-mass origin {Xo}
SV_X_GND   214.408393 ; m ! X coord, ground, vehicle aero ref. pt (saved)
SV_YAW 0.0009086353906 ; deg ! ODE: Yaw of sprung mass {Yaw}
SV_YO 0.0001800602829 ; m ! ODE: Global Y coord. of sprung-mass origin {Yo}
SV_Y_GND 0.0001594452065 ; m ! Y coord, ground, vehicle aero ref. pt (saved)
SV_ZO   -0.1221316943 ; m ! ODE: Global Z coord. of sprung-mass origin {Zo}
SV_Z_CTC_L1        -0 ; m ! Center of tire contact L1 {Zgnd_L1}
SV_Z_CTC_L2        -0 ; m ! Center of tire contact L2 {Zgnd_L2}
SV_Z_CTC_R1        -0 ; m ! Center of tire contact R1 {Zgnd_R1}
SV_Z_CTC_R2        -0 ; m ! Center of tire contact R2 {Zgnd_R2}
SV_Z_GND            0 ; m ! Z coord, ground, vehicle aero ref. pt (saved)

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_BK_STAT REPLACE 1 ; - ! #1. Brake apply status: 0 or 1 (based on control
                             ! pressure)
IMPORT IMP_MYBK_L1 REPLACE 6 ; N-m ! #2. Brake moment L1
IMPORT IMP_MYBK_L2 REPLACE 6 ; N-m ! #3. Brake moment L2
IMPORT IMP_MYBK_R1 REPLACE 5 ; N-m ! #4. Brake moment R1
IMPORT IMP_MYBK_R2 REPLACE 5 ; N-m ! #5. Brake moment R2

!------------------------------------------------------------------------------------
! EXPORTED VARIABLES
!------------------------------------------------------------------------------------
EXPORT VX  75.2028995 ! #1. Long. speed, inst. CG, vehicle (km/h)
EXPORT AX -0.01377956639 ! #2. Long. accel., inst. CG, vehicle (g)
EXPORT AY 2.214326377e-07 ! #3. Lat. accel., inst. CG, vehicle (g)
EXPORT AVZ 6.191936049e-08 ! #4. Yaw rate (body-fixed), vehicle (deg/s)
EXPORT AVY_L1 574.6749652 ! #5. Wheel L1 spin (rpm)
EXPORT AVY_R1 574.687333 ! #6. Wheel R1 spin (rpm)
EXPORT AVY_L2 574.6499844 ! #7. Wheel L2 spin (rpm)
EXPORT AVY_R2 574.6677796 ! #8. Wheel R2 spin (rpm)
EXPORT MY_BK_L1  -6.5 ! #9. Brake moment L1 (N-m)
EXPORT MY_BK_R1  -5.5 ! #10. Brake moment R1 (N-m)
EXPORT MY_BK_L2  -6.5 ! #11. Brake moment L2 (N-m)
EXPORT MY_BK_R2  -5.5 ! #12. Brake moment R2 (N-m)
EXPORT PBKCH_L1     0 ! #13. Brake actuator pressure L1 (MPa)
EXPORT PBKCH_R1     0 ! #14. Brake actuator pressure R1 (MPa)
EXPORT PBKCH_L2     0 ! #15. Brake actuator pressure L2 (MPa)
EXPORT PBKCH_R2     0 ! #16. Brake actuator pressure R2 (MPa)
EXPORT FX_L1 -46.72413281 ! #17. Longitudinal force, tire L1 (N)
EXPORT FX_R1 -43.84136667 ! #18. Longitudinal force, tire R1 (N)
EXPORT FX_L2 -36.57033765 ! #19. Longitudinal force, tire L2 (N)
EXPORT FX_R2 -33.68920974 ! #20. Longitudinal force, tire R2 (N)
EXPORT FY_L1 7.836828247 ! #21. Lateral force, tire L1 (N)
EXPORT FY_R1 -9.489694795 ! #22. Lateral force, tire R1 (N)
EXPORT FY_L2 3.814309068 ! #23. Lateral force, tire L2 (N)
EXPORT FY_R2 -2.173445236 ! #24. Lateral force, tire R2 (N)
EXPORT FZ_L1 6149.203817 ! #25. Vertical force, tire L1 (N)
EXPORT FZ_R1 6149.047554 ! #26. Vertical force, tire R1 (N)
EXPORT FZ_L2 4227.980959 ! #27. Vertical force, tire L2 (N)
EXPORT FZ_R2 4228.12265 ! #28. Vertical force, tire R2 (N)
EXPORT STEER_L1 0.004865113844 ! #29. Wheel steer L1 (deg)
EXPORT STEER_R1 -0.007953021237 ! #30. Wheel steer R1 (deg)
EXPORT STEER_L2 0.003104119332 ! #31. Wheel steer L2 (deg)
EXPORT STEER_R2 -0.003132955546 ! #32. Wheel steer R2 (deg)
EXPORT MY_DR_L1     0 ! #33. Total drive moment for wheel L1 (N-m)
EXPORT MY_DR_R1     0 ! #34. Total drive moment for wheel R1 (N-m)
EXPORT MY_DR_L2     0 ! #35. Total drive moment for wheel L2 (N-m)
EXPORT MY_DR_R2     0 ! #36. Total drive moment for wheel R2 (N-m)
EXPORT KAPPL_L1 -0.0003491709428 ! #37. Long. slip (lagged), tire L1 (-)
EXPORT KAPPL_R1 -0.0003276547473 ! #38. Long. slip (lagged), tire R1 (-)
EXPORT KAPPL_L2 -0.00039260787 ! #39. Long. slip (lagged), tire L2 (-)
EXPORT KAPPL_R2 -0.0003616546817 ! #40. Long. slip (lagged), tire R2 (-)


END
