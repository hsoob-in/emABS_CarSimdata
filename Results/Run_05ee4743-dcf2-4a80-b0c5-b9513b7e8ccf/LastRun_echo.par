PARSFILE
! CarSim 2021.0
! Revision 153671, December 9, 2020
MODEL_LAYOUT I_I I_I I_I I_I

DATASET_TITLE City, 8 Cars, 2nd Solver, Cars 5-8
CATEGORY * CS 2021.0 - Multiple Vehicles & Parallel Solver
TITLE City, 8 Cars, 2nd Solver, Cars 5-8 <* CS 2021.0 - Multiple Vehicles & Parallel Solver>

! Echo: D:\trunk\Image\CarSim\Core\CarSim_Data\Results\Run_05ee4743-dcf2-4a80-b0c5-b9513b7e8ccf\LastRun_echo.par
! This run was made 00:04 on December 11, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             25 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT          24 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   471 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT      24 ! Number of output variables activated for export (read only)
! NOUT_WRITE      524 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      2 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_IO_UPDATE       0 ! Option for exchanging I/O variables with other tools: 1 ->
                      ! use T_DT (half step), 0 -> use TSTEP (full step) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SKIP_TSTART     0 ! [D] Skip calculations at T = TSTART when running under
                      ! external software? 0 -> no, 1 -> skip [L]
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP           0.001 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              22 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    1 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG(1)  1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is', vehicle 1 [I]
OPT_INIT_SPEED(1)   1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is', vehicle 1 [I]
ROLL_MAX_STOP(1)   80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached, vehicle 1
VLOW_STOP(1)       -1 ; km/h ! [D] Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable, vehicle 1

OPT_INIT_CONFIG(2)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 2 [I]
OPT_INIT_SPEED(2)   1 ! [D] Initialize speed variables, vehicle 2 [I]
ROLL_MAX_STOP(2)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 2
VLOW_STOP(2)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 2

OPT_INIT_CONFIG(3)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 3 [I]
OPT_INIT_SPEED(3)   1 ! [D] Initialize speed variables, vehicle 3 [I]
ROLL_MAX_STOP(3)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 3
VLOW_STOP(3)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 3

OPT_INIT_CONFIG(4)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 4 [I]
OPT_INIT_SPEED(4)   1 ! [D] Initialize speed variables, vehicle 4 [I]
ROLL_MAX_STOP(4)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 4
VLOW_STOP(4)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 4

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATIONS
!------------------------------------------------------------------------------------
! N_VEHICLES        4 ! Number of vehicles (lead units) (read-only)
! VEHICLE_UNITS_MAP(1) 1 ! Number of units in vehicle 1 (read-only)
! VEHICLE_UNITS_MAP(2) 1 ! Number of units in vehicle 2 (read-only)
! VEHICLE_UNITS_MAP(3) 1 ! Number of units in vehicle 3 (read-only)
! VEHICLE_UNITS_MAP(4) 1 ! Number of units in vehicle 4 (read-only)
! VEHICLE_LEAD_UNIT(1) 1 ! Lead unit for vehicle 1 (read-only)
! VEHICLE_LEAD_UNIT(2) 2 ! Lead unit for vehicle 2 (read-only)
! VEHICLE_LEAD_UNIT(3) 3 ! Lead unit for vehicle 3 (read-only)
! VEHICLE_LEAD_UNIT(4) 4 ! Lead unit for vehicle 4 (read-only)
! VEHICLE_NUNITS    4 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    8 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 2 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 2 ! Number of axles on unit 3 (read-only)
! VEHICLE_AXLE_MAP(4) 2 ! Number of axles on unit 4 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! Unit 1 is the lead unit for vehicle 1
! H_CG_TL(1) 496.8619814 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1112.741556 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -0.0007480549682 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)       895.8 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 352.8975461 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 966.3968289 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 1024.81668 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! Unit 2 is the lead unit for vehicle 2
! H_CG_TL(2) 677.216314 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 1151.408837 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(2) 3.325464903e-12 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)      1824.2 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 1073.294214 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 3185.890449 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 3298.358674 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! Unit 3 is the lead unit for vehicle 3
! H_CG_TL(3) 366.0236609 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 1172.656918 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(3) 1.263228045e-11 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)      1217.2 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 420.5520647 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 1293.977854 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 1398.973224 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

! Unit 4 is the lead unit for vehicle 4
! H_CG_TL(4) 624.2067778 ; mm ! CALC -- Height of TL CG, unit 4
! LX_CG_TL(4) 587.0643339 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(4) -2.465042059e-11 ; mm ! CALC -- Y coordinate of TL CG, unit 4
! M_TL(4)       725.9 ; kg ! CALC -- TL mass, unit 4
! IXX_TL(4) 459.6927071 ; kg-m2 ! CALC -- TL roll inertia moment, unit 4
! IYY_TL(4) 768.9726346 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 4
! IZZ_TL(4) 854.86591 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 4

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

! Unit 1 is the lead unit for vehicle 1
H_CG_SU(1)        540 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1100 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)           750 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)         270 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)         750 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)         750 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)           0 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1240 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(1)        3000 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(1)        1800 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(1)        400 ; mm ! Length from front to control pt (maybe for target)

! Unit 2 is the lead unit for vehicle 2
H_CG_SU(2)        720 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      1180 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          1590 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)       894.4 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)      2687.1 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)      2687.1 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(2)         1714 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        5500 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(2)        2176 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! Length from front to control pt (maybe for target)

! Unit 3 is the lead unit for vehicle 3
H_CG_SU(3)        375 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)      1165 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)          1020 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)       308.6 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)        1020 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)        1020 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
! IXZ_SU(3)         0 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(3)         1080 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(3)        3300 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(3)        1718 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(3)        800 ; mm ! Length from front to control pt (maybe for target)

! Unit 4 is the lead unit for vehicle 4
H_CG_SU(4)        700 ; mm ! Height of CG of sprung mass, unladen (SU), unit 4 [I]
LX_CG_SU(4)       550 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(4)          0 ; mm ! Y coordinate of SU CG, unit 4 [I]
M_SU(4)           600 ; kg ! Mass of unladen sprung mass (SU), unit 4 [I]
IXX_SU(4)         384 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 4 [I]
IYY_SU(4)         624 ; kg-m2 ! Pitch inertia for SU, unit 4 [I]
IZZ_SU(4)         686 ; kg-m2 ! Yaw inertia for SU, unit 4 [I]
IXY_SU(4)           0 ; kg-m2 ! XY product of inertia for SU, unit 4 [I]
IXZ_SU(4)           0 ; kg-m2 ! XZ product of inertia for SU, unit 4 [I]
IYZ_SU(4)           0 ; kg-m2 ! YZ product of inertia for SU, unit 4 [I]

! N_PAYLOADS(4)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(4)         1582 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(4)        4000 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(4)        1704 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(4)        500 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      1.6 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    2350 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -1175 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        3 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)    2950 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)   -1475 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)      1.6 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)    2330 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)   -1165 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

AREA_AERO(4)        0 ; m2 ! Frontal cross-section area, unit 4
H_REF_AERO(4)       0 ; mm ! Height of aerodynamic reference point, unit 4
L_REF_AERO(4)       0 ; mm ! Aerodynamic reference length, unit 4
X_REF_AERO(4)       0 ; mm ! X coordinate of aerodynamic reference point, unit 4
Y_REF_AERO(4)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 4

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)  -0.5 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)  -0.5 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)      0.2 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)      0.2 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1,1)       280 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       280 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1,1)   0.86 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,1,2)   0.86 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1,1) 0.43 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,1,2) 0.43 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1,1)        0.06 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)        0.06 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)   0.03 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)   0.03 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     1415 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1,1)  7.17 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,1,2)  7.17 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1,1) 14.18 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2) 14.18 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)      72.7 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.8027510316 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_WC(1,2,1)       270 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       270 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(1,2,1)   0.86 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(1,2,2)   0.86 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(1,2,1) 0.43 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(1,2,2) 0.43 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(1,2,1)        0.06 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)        0.06 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)   0.03 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)   0.03 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1375 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     2350 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(1,2,1) 21.55 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(1,2,2) 21.55 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      73.1 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.4103967168 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Generic/independent suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(2,1,1)      0.2 ; deg ! Static toe for wheel L3 [I]
A_TOE(2,1,2)      0.2 ; deg ! Static toe for wheel R3 [I]
H_WC(2,1,1)       390 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(2,1,2)       390 ; mm ! Reference Z coordinate of wheel center R3 [I]
! ISPIN(2,1,1)   3.37 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L3 [I]
! ISPIN(2,1,2)   3.37 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R3 [I]
! ISPIN_XXZZ(2,1,1) 1.89 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L3 [I]
! ISPIN_XXZZ(2,1,2) 1.89 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R3 [I]
IW(2,1,1)        0.57 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(2,1,2)        0.57 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(2,1,1)   0.29 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(2,1,2)   0.29 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(2,1)     1575 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(2,1)        0 ; mm ! [D] X dist. axle 3 is behind the sprung-mass origin [I]
M_US_IND(2,1,1) 14.83 ; kg ! Unsteered suspension mass for wheel L3 [I]
M_US_IND(2,1,2) 14.83 ; kg ! Unsteered suspension mass for wheel R3 [I]
M_US_STR(2,1,1) 36.27 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(2,1,2) 36.27 ; kg ! Steered mass for wheel R3 [I]
! M_US(2,1)     158.2 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(2,1) 0.8125158028 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Generic/independent suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R4 [I]
H_WC(2,2,1)       380 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,2,2)       380 ; mm ! Reference Z coordinate of wheel center R4 [I]
! ISPIN(2,2,1)   3.45 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L4 [I]
! ISPIN(2,2,2)   3.45 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R4 [I]
! ISPIN_XXZZ(2,2,1) 1.93 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L4 [I]
! ISPIN_XXZZ(2,2,2) 1.93 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R4 [I]
IW(2,2,1)        0.65 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,2,2)        0.65 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,2,1)   0.33 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,2,2)   0.33 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,2)     1575 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,2)     2950 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_IND(2,2,1)    10 ; kg ! [D] Unsteered suspension mass for wheel L4 [I]
M_US_IND(2,2,2)    10 ; kg ! [D] Unsteered suspension mass for wheel R4 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,2)        76 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,2) 0.7368421053 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Generic/independent suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
A_CAMBER(3,1,1)    -1 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(3,1,2)    -1 ; deg ! Static camber for wheel R5 [I]
A_TOE(3,1,1)     -0.2 ; deg ! Static toe for wheel L5 [I]
A_TOE(3,1,2)     -0.2 ; deg ! Static toe for wheel R5 [I]
H_WC(3,1,1)       330 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(3,1,2)       330 ; mm ! Reference Z coordinate of wheel center R5 [I]
! ISPIN(3,1,1)   1.28 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L5 [I]
! ISPIN(3,1,2)   1.28 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R5 [I]
! ISPIN_XXZZ(3,1,1) 0.74 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L5 [I]
! ISPIN_XXZZ(3,1,2) 0.74 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R5 [I]
IW(3,1,1)        0.08 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(3,1,2)        0.08 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(3,1,1)   0.04 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(3,1,2)   0.04 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(3,1)     1480 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(3,1)        0 ; mm ! [D] X dist. axle 5 is behind the sprung-mass origin [I]
M_US_IND(3,1,1)   8.1 ; kg ! Unsteered suspension mass for wheel L5 [I]
M_US_IND(3,1,2)   8.1 ; kg ! Unsteered suspension mass for wheel R5 [I]
M_US_STR(3,1,1)  19.2 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(3,1,2)  19.2 ; kg ! Steered mass for wheel R5 [I]
! M_US(3,1)      94.6 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(3,1) 0.8287526427 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Generic/independent suspension for axle 2 on unit 3
OPT_JNC_DESIGN(3,2) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
A_CAMBER(3,2,1)  -1.5 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(3,2,2)  -1.5 ; deg ! Static camber for wheel R6 [I]
A_TOE(3,2,1)      0.2 ; deg ! Static toe for wheel L6 [I]
A_TOE(3,2,2)      0.2 ; deg ! Static toe for wheel R6 [I]
H_WC(3,2,1)       310 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(3,2,2)       310 ; mm ! Reference Z coordinate of wheel center R6 [I]
! ISPIN(3,2,1)   1.28 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L6 [I]
! ISPIN(3,2,2)   1.28 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R6 [I]
! ISPIN_XXZZ(3,2,1) 0.74 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L6 [I]
! ISPIN_XXZZ(3,2,2) 0.74 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R6 [I]
IW(3,2,1)        0.08 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(3,2,2)        0.08 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(3,2,1)   0.04 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(3,2,2)   0.04 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(3,2,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(3,2,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(3,2)     1485 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(3,2)     2330 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_IND(3,2,1)  31.3 ; kg ! Unsteered suspension mass for wheel L6 [I]
M_US_IND(3,2,2)  31.3 ; kg ! Unsteered suspension mass for wheel R6 [I]
M_US_STR(3,2,1)     0 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(3,2,2)     0 ; kg ! Steered mass for wheel R6 [I]
! M_US(3,2)     102.6 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(3,2) 0.3898635478 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
! Y_CG_SUSP(3,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(3,2)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

! Generic/independent suspension for axle 1 on unit 4
OPT_JNC_DESIGN(4,1) 1 ! Specify JNC_DESIGN explicitly for axle 7? [I]
A_CAMBER(4,1,1)     0 ; deg ! Static camber for wheel L7 [I]
A_CAMBER(4,1,2)     0 ; deg ! Static camber for wheel R7 [I]
A_TOE(4,1,1)        0 ; deg ! Static toe for wheel L7 [I]
A_TOE(4,1,2)        0 ; deg ! Static toe for wheel R7 [I]
H_WC(4,1,1)       263 ; mm ! Reference Z coordinate of wheel center L7 [I]
H_WC(4,1,2)       263 ; mm ! Reference Z coordinate of wheel center R7 [I]
! ISPIN(4,1,1)   0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L7 [I]
! ISPIN(4,1,2)   0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R7 [I]
! ISPIN_XXZZ(4,1,1) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L7 [I]
! ISPIN_XXZZ(4,1,2) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R7 [I]
IW(4,1,1)        0.04 ; kg-m2 ! Spin inertia for wheel L7 [I]
IW(4,1,2)        0.04 ; kg-m2 ! Spin inertia for wheel R7 [I]
IW_XXZZ(4,1,1)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel L7 [I]
IW_XXZZ(4,1,2)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel R7 [I]
JNC_DESIGN(4,1,1)   0 ; mm ! Jounce when center of wheel L7 is at H_WC [I]
JNC_DESIGN(4,1,2)   0 ; mm ! Jounce when center of wheel R7 is at H_WC [I]
L_TRACK(4,1)     1260 ; mm ! Track width, wheel-center to wheel-center, axle 7 [I]
LX_AXLE(4,1)        0 ; mm ! [D] X dist. axle 7 is behind the sprung-mass origin [I]
M_US_IND(4,1,1)  8.43 ; kg ! Unsteered suspension mass for wheel L7 [I]
M_US_IND(4,1,2)  8.43 ; kg ! Unsteered suspension mass for wheel R7 [I]
M_US_STR(4,1,1) 14.52 ; kg ! Steered mass for wheel L7 [I]
M_US_STR(4,1,2) 14.52 ; kg ! Steered mass for wheel R7 [I]
! M_US(4,1)      75.9 ; kg ! CALC -- Total unsprung mass for axle 7
! R_US_STR(4,1) 0.7778656126 ; - ! CALC -- Steered fraction of unsprung mass, axle 7
! Y_CG_SUSP(4,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 7 [I]
Y_CL_SUSP(4,1)      0 ; mm ! Y coord. for suspension centerline, axle 7 [I]

! Generic/independent suspension for axle 2 on unit 4
OPT_JNC_DESIGN(4,2) 1 ! Specify JNC_DESIGN explicitly for axle 8? [I]
A_CAMBER(4,2,1)     0 ; deg ! Static camber for wheel L8 [I]
A_CAMBER(4,2,2)     0 ; deg ! Static camber for wheel R8 [I]
A_TOE(4,2,1)        0 ; deg ! Static toe for wheel L8 [I]
A_TOE(4,2,2)        0 ; deg ! Static toe for wheel R8 [I]
H_WC(4,2,1)       263 ; mm ! Reference Z coordinate of wheel center L8 [I]
H_WC(4,2,2)       263 ; mm ! Reference Z coordinate of wheel center R8 [I]
! ISPIN(4,2,1)   0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L8 [I]
! ISPIN(4,2,2)   0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R8 [I]
! ISPIN_XXZZ(4,2,1) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L8 [I]
! ISPIN_XXZZ(4,2,2) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R8 [I]
IW(4,2,1)        0.04 ; kg-m2 ! Spin inertia for wheel L8 [I]
IW(4,2,2)        0.04 ; kg-m2 ! Spin inertia for wheel R8 [I]
IW_XXZZ(4,2,1)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel L8 [I]
IW_XXZZ(4,2,2)   0.02 ; kg-m2 ! IXX/IZZ inertia for wheel R8 [I]
JNC_DESIGN(4,2,1)   0 ; mm ! Jounce when center of wheel L8 is at H_WC [I]
JNC_DESIGN(4,2,2)   0 ; mm ! Jounce when center of wheel R8 is at H_WC [I]
L_TRACK(4,2)     1260 ; mm ! Track width, wheel-center to wheel-center, axle 8 [I]
LX_AXLE(4,2)     1923 ; mm ! X dist. axle 8 is behind the sprung-mass origin [I]
M_US_IND(4,2,1)    10 ; kg ! [D] Unsteered suspension mass for wheel L8 [I]
M_US_IND(4,2,2)    10 ; kg ! [D] Unsteered suspension mass for wheel R8 [I]
M_US_STR(4,2,1)     0 ; kg ! Steered mass for wheel L8 [I]
M_US_STR(4,2,2)     0 ; kg ! Steered mass for wheel R8 [I]
! M_US(4,2)        50 ; kg ! CALC -- Total unsprung mass for axle 8
! R_US_STR(4,2)   0.6 ; - ! CALC -- Steered fraction of unsprung mass, axle 8
! Y_CG_SUSP(4,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 8 [I]
Y_CL_SUSP(4,2)      0 ; mm ! Y coord. for suspension centerline, axle 8 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 113.3190648 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 113.3190648 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1,1) 3912.227394 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 3912.227394 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 2039.743167 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 2039.743167 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 4625.170849 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 4625.170849 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 2312.585424 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 2312.585424 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 519.5087675 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 3 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 3 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 3 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 3 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) 101.5204089 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 101.5204089 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(1,2) 3442.760106 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 3442.760106 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 1827.36736 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 1827.36736 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 4159.626221 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 4159.626221 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 2079.813111 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 2079.813111 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 480.9786805 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 3 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 3 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 3 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 3 ; mm ! Ref. hysteretic extension, ride spring R2

! Generic/independent suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(2,1,1) 52.42928259 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(2,1,2) 52.42928259 ; mm ! CALC -- Compression at design load, spring R3
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
! FSA_DESIGN(2,1) 9355.5441 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(2,1) 9355.5441 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(2,1,1) 7654.675258 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(2,1,2) 7654.675258 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(2,1) 10906.95613 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(2,1) 10906.95613 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(2,1,1) 5453.478065 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(2,1,2) 5453.478065 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(2,1) 3544.540384 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Generic/independent suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R4 [I]
! CMP_DESIGN(2,2,1) 67.79379783 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(2,2,2) 67.79379783 ; mm ! CALC -- Compression at design load, spring R4
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
! FSA_DESIGN(2,2) 6237.0294 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,2) 6237.0294 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,2,1) 3118.5147 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,2,2) 3118.5147 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,2) 6982.3348 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,2) 6982.3348 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,2,1) 3491.1674 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,2,2) 3491.1674 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,2) 1505.786696 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,2,1) 3 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,2,2) 3 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,2,1) 3 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,2,2) 3 ; mm ! Ref. hysteretic extension, ride spring R4

! Generic/independent suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R5 [I]
! CMP_DESIGN(3,1,1) 31.36238877 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(3,1,2) 31.36238877 ; mm ! CALC -- Compression at design load, spring R5
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
! FSA_DESIGN(3,1) 5001.3915 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(3,1) 5001.3915 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(3,1,1) 4092.791735 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(3,1,2) 4092.791735 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(3,1) 5929.10059 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(3,1) 5929.10059 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(3,1,1) 2964.550295 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(3,1,2) 2964.550295 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(3,1) 2878.487399 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Generic/independent suspension for axle 2 on unit 3
OPT_EXT_SP(3,2,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,2,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,2,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(3,2,2)   0 ; mm ! Initial compression of external spring R6 [I]
! CMP_DESIGN(3,2,1) 34.47951453 ; mm ! CALC -- Compression at design load, spring L6
! CMP_DESIGN(3,2,2) 34.47951453 ; mm ! CALC -- Compression at design load, spring R6
DAUX(3,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
! FSA_DESIGN(3,2) 5001.3915 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(3,2) 5001.3915 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(3,2,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(3,2,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(3,2,1) 3137.635822 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(3,2,2) 3137.635822 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(3,2) 6007.55379 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(3,2) 6007.55379 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(3,2,1) 3003.776895 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(3,2,2) 3003.776895 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(3,2) 2135.223883 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_SPG_ADJ(3,2,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(3,2,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(3,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(3,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(3,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(3,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

! Generic/independent suspension for axle 1 on unit 4
OPT_EXT_SP(4,1,1)   0 ! Disable built-in spring L7? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,1,2)   0 ! Disable built-in spring R7? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,1,1)   0 ; mm ! Initial compression of external spring L7 [I]
CMP_OFFSET(4,1,2)   0 ; mm ! Initial compression of external spring R7 [I]
! CMP_DESIGN(4,1,1) 60.01573635 ; mm ! CALC -- Compression at design load, spring L7
! CMP_DESIGN(4,1,2) 60.01573635 ; mm ! CALC -- Compression at design load, spring R7
DAUX(4,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 7
! FSA_DESIGN(4,1) 4201.101544 ; N ! CALC -- Design Load (susp., unladen), axle 7
! FSA_L(4,1) 4201.101544 ; N ! CALC -- Static suspension load, laden, axle  7
FS_OFFSET(4,1,1)    0 ; N ! Force offset subtracted from built-in spring L7 [I]
FS_OFFSET(4,1,2)    0 ; N ! Force offset subtracted from built-in spring R7 [I]
! FS_STATIC(4,1,1) 2100.550772 ; N ! CALC -- Static spring force, laden, spring L7
! FS_STATIC(4,1,2) 2100.550772 ; N ! CALC -- Static spring force, laden, spring R7
! FZA_L(4,1) 4945.426279 ; N ! CALC -- Static ground load, laden, axle 7
! FZA_UL(4,1) 4945.426279 ; N ! CALC -- Static ground load, unladen, axle 7
! FZ_STATIC(4,1,1) 2472.71314 ; N ! CALC -- Static ground force, laden, wheel L7
! FZ_STATIC(4,1,2) 2472.71314 ; N ! CALC -- Static ground force, laden, wheel R7
! KA_ROLL(4,1) 484.9048261 ; N-m/deg ! CALC -- Total roll stiffness, axle 7
L_SPG_ADJ(4,1,1)    0 ; mm ! Upper seat height increase for spring L7 [I]
L_SPG_ADJ(4,1,2)    0 ; mm ! Upper seat height increase for spring R7 [I]
SPRING_COMP_BETA(4,1,1) 3 ; mm ! Ref. hysteretic compression, ride spring L7
SPRING_COMP_BETA(4,1,2) 3 ; mm ! Ref. hysteretic compression, ride spring R7
SPRING_EXT_BETA(4,1,1) 3 ; mm ! Ref. hysteretic extension, ride spring L7
SPRING_EXT_BETA(4,1,2) 3 ; mm ! Ref. hysteretic extension, ride spring R7

! Generic/independent suspension for axle 2 on unit 4
OPT_EXT_SP(4,2,1)   0 ! Disable built-in spring L8? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,2,2)   0 ! Disable built-in spring R8? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,2,1)   0 ; mm ! Initial compression of external spring L8 [I]
CMP_OFFSET(4,2,2)   0 ; mm ! Initial compression of external spring R8 [I]
! CMP_DESIGN(4,2,1) -78.03131574 ; mm ! CALC -- Compression at design load, spring
                                 ! L8
! CMP_DESIGN(4,2,2) -78.03131574 ; mm ! CALC -- Compression at design load, spring
                                 ! R8
DAUX(4,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 8
! FSA_DESIGN(4,2) 1682.888456 ; N ! CALC -- Design Load (susp., unladen), axle 8
! FSA_L(4,2) 1682.888456 ; N ! CALC -- Static suspension load, laden, axle  8
FS_OFFSET(4,2,1)    0 ; N ! Force offset subtracted from built-in spring L8 [I]
FS_OFFSET(4,2,2)    0 ; N ! Force offset subtracted from built-in spring R8 [I]
! FS_STATIC(4,2,1) 841.4442278 ; N ! CALC -- Static spring force, laden, spring L8
! FS_STATIC(4,2,2) 841.4442278 ; N ! CALC -- Static spring force, laden, spring R8
! FZA_L(4,2) 2173.220956 ; N ! CALC -- Static ground load, laden, axle 8
! FZA_UL(4,2) 2173.220956 ; N ! CALC -- Static ground load, unladen, axle 8
! FZ_STATIC(4,2,1) 1086.610478 ; N ! CALC -- Static ground force, laden, wheel L8
! FZ_STATIC(4,2,2) 1086.610478 ; N ! CALC -- Static ground force, laden, wheel R8
! KA_ROLL(4,2) 802.034949 ; N-m/deg ! CALC -- Total roll stiffness, axle 8
L_SPG_ADJ(4,2,1)    0 ; mm ! Upper seat height increase for spring L8 [I]
L_SPG_ADJ(4,2,2)    0 ; mm ! Upper seat height increase for spring R8 [I]
SPRING_COMP_BETA(4,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L8
SPRING_COMP_BETA(4,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R8
SPRING_EXT_BETA(4,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L8
SPRING_EXT_BETA(4,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R8

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC(1)    1 ! Option for calculating steering wheel torque when the angle
                      ! is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table, 1 ->
                      ! calculated (see the steering Help document for details),
                      ! vehicle 1 [I]
OPT_POWER(1)        0 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 1 [I]
OPT_STEER_DEF(1)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 1
OPT_I_GEAR_IN(1)    0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 1 [I]
BETA_COL(1)       0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL(1)        0.002 ; N-m-s/deg ! Steering column viscous damping, vehicle 1
HYS_COL(1)        0.2 ; N-m ! Steering column friction torque, vehicle 1
I_COL(1)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(1) 0.000154 ; kg-m2 ! Steering system inertia, vehicle 1
A_STR_STOP_L(1)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(1)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(1)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 1
K_STR_STOP_R(1)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 1

OPT_M_SW_CALC(2)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 2 [I]
OPT_POWER(2)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 2 [I]
OPT_STEER_DEF(2)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 2
OPT_I_GEAR_IN(2)    0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 2 [I]
BETA_COL(2)       0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL(2)        0.002 ; N-m-s/deg ! Steering column viscous damping, vehicle 2
D_TBAR(2)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 2
HYS_COL(2)        0.2 ; N-m ! Steering column friction torque, vehicle 2
I_COL(2)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(2) 0.000337 ; kg-m2 ! Steering system inertia, vehicle 2
F_BOOST_MAX(2)   7000 ; N ! Maximum power steering boost force, vehicle 2
TC_BOOST(2)      0.04 ; s ! Time constant for power steering boost, vehicle 2
A_STR_STOP_L(2)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(2)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(2)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 2
K_STR_STOP_R(2)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 2

OPT_M_SW_CALC(3)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 3 [I]
OPT_POWER(3)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 3 [I]
OPT_STEER_DEF(3)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 3
OPT_I_GEAR_IN(3)    0 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 3 [I]
BETA_COL(3)       0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL(3)       0.0025 ; N-m-s/deg ! Steering column viscous damping, vehicle 3
D_TBAR(3)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 3
HYS_COL(3)        0.2 ; N-m ! Steering column friction torque, vehicle 3
I_COL(3)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(3) 0.000182 ; kg-m2 ! Steering system inertia, vehicle 3
F_BOOST_MAX(3)   3000 ; N ! Maximum power steering boost force, vehicle 3
TC_BOOST(3)      0.02 ; s ! Time constant for power steering boost, vehicle 3
A_STR_STOP_L(3)   -30 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(3)    30 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(3)  1100 ; N-m/deg ! Steering stop stiffness (Left), vehicle 3
K_STR_STOP_R(3)  1100 ; N-m/deg ! Steering stop stiffness (Right), vehicle 3

OPT_M_SW_CALC(4)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 4 [I]
OPT_POWER(4)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 4 [I]
OPT_STEER_DEF(4)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 4
OPT_I_GEAR_IN(4)    1 ! Add wheel and suspension inertias for axle 1 to I_GEAR_IN? 0
                      ! -> no, 1 = yes, vehicle 4 [I]
BETA_COL(4)       0.5 ; deg ! Ref hysteretic angle for steering column friction
D_COL(4)         0.01 ; N-m-s/deg ! Steering column viscous damping, vehicle 4
D_TBAR(4)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 4
HYS_COL(4)        0.1 ; N-m ! Steering column friction torque, vehicle 4
I_COL(4)         0.02 ; kg-m2 ! Steering column inertia used with torque input
I_GEAR_IN(4)   0.0008 ; kg-m2 ! Steering system inertia, vehicle 4
M_BOOST_MAX(4)   1200 ; N-m ! Maximum power steering boost torque
TC_BOOST(4)      0.02 ; s ! Time constant for power steering boost, vehicle 4
A_STR_STOP_L(4)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(4)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(4)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 4
K_STR_STOP_R(4)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 4

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         0 ! [D] Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       1 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)     3 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)     3 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)     13.5 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)     13.5 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)    5 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)    5 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1,1)    0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1,1)         4 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1,1)     150 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1,1)     75.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)     75.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  0 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(2,1)         0 ! [D] Compliant steer option, axle 3: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(2,1)       1 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(2,1,1)   3.5 ; deg ! Caster for wheel L3 [I]
A_CASTER(2,1,2)   3.5 ; deg ! Caster for wheel R3 [I]
A_KPI(2,1,1)        8 ; deg ! Kingpin inclination for wheel L3 [I]
A_KPI(2,1,2)        8 ; deg ! Kingpin inclination for wheel R3 [I]
A_MZ_BETA(2,1,1)    5 ; deg ! Ref. hysteresis angle for L3 parking steer torque
A_MZ_BETA(2,1,2)    5 ; deg ! Ref. hysteresis angle for R3 parking steer torque
BETA_RACK(2,1)    0.5 ; mm ! Ref hys. displ. for steering rack friction, axle 3
D_RACK(2,1)       4.5 ; N-s/mm ! Steering rack viscous damping, axle 3
HYS_RACK(2,1)     250 ; N ! Steering rack hysteresis, axle 3
L_KPO(2,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L3 [I]
L_KPO(2,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R3 [I]
X_KPO(2,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L3 [I]
X_KPO(2,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R3 [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  0 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(3,1)         0 ! [D] Compliant steer option, axle 5: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(3,1)       1 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(3,1,1)   3.5 ; deg ! Caster for wheel L5 [I]
A_CASTER(3,1,2)   3.5 ; deg ! Caster for wheel R5 [I]
A_KPI(3,1,1)        8 ; deg ! Kingpin inclination for wheel L5 [I]
A_KPI(3,1,2)        8 ; deg ! Kingpin inclination for wheel R5 [I]
A_MZ_BETA(3,1,1)    5 ; deg ! Ref. hysteresis angle for L5 parking steer torque
A_MZ_BETA(3,1,2)    5 ; deg ! Ref. hysteresis angle for R5 parking steer torque
BETA_RACK(3,1)    0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 5
D_RACK(3,1)       4.5 ; N-s/mm ! Steering rack viscous damping, axle 5
HYS_RACK(3,1)     280 ; N ! Steering rack hysteresis, axle 5
L_KPO(3,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L5 [I]
L_KPO(3,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R5 [I]
X_KPO(3,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L5 [I]
X_KPO(3,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R5 [I]

OPT_STEER_EXT(3,2)  1 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,1)  0 ! Steer model option for axle 7: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(4,1)         0 ! [D] Compliant steer option, axle 7: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(4,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(4,1,1)   3.5 ; deg ! Caster for wheel L7 [I]
A_CASTER(4,1,2)   3.5 ; deg ! Caster for wheel R7 [I]
A_KPI(4,1,1)        8 ; deg ! Kingpin inclination for wheel L7 [I]
A_KPI(4,1,2)        8 ; deg ! Kingpin inclination for wheel R7 [I]
A_MZ_BETA(4,1,1)    0 ; deg ! Ref. hysteresis angle for L7 parking steer torque
A_MZ_BETA(4,1,2)    0 ; deg ! Ref. hysteresis angle for R7 parking steer torque
BETA_GEAR(4,1)    0.5 ; deg ! Ref hys. angle for steering gear friction, axle 7
D_GEAR(4,1)       7.3 ; N-m-s/deg ! Steering gear viscous damping, axle 7
HYS_GEAR(4,1)     0.1 ; N-m ! Steering gear hysteresis, axle 7
L_KPO(4,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L7 [I]
L_KPO(4,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R7 [I]
X_KPO(4,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L7 [I]
X_KPO(4,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R7 [I]

OPT_STEER_EXT(4,2)  1 ! Steer model option for axle 8: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 1 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1)  100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1,1)    2200 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         0.8 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1,1)    0.4 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1,1)      15 ; kg ! Mass of tire L1
MU_REF_X(1,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1,1)         292 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        284 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1,1)     0.004 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)   2.5e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
R_TIRE_COMB(1,1,1) 1.1 ; - ! Combined slip transition factor: Factor used to
                       ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,1,2) 1 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,1,2) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2)  100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,1,2)    2200 ; N ! Reference vertical force
IT(1,1,2)         0.8 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,1,2)    0.4 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,1,2)      15 ; kg ! Mass of tire R1
MU_REF_X(1,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,1,2)         292 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2)        284 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,1,2)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,1,2) 1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(1,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(1,2,1) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1)  100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(1,2,1)    2200 ; N ! Reference vertical force
IT(1,2,1)         0.8 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(1,2,1)    0.4 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(1,2,1)      15 ; kg ! Mass of tire L2
MU_REF_X(1,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(1,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(1,2,1)         292 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        284 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(1,2,1)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2,1) 1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2) 1 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(1,2,2) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2)  100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(1,2,2)    2200 ; N ! Reference vertical force
IT(1,2,2)         0.8 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(1,2,2)    0.4 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(1,2,2)      15 ; kg ! Mass of tire R2
MU_REF_X(1,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(1,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(1,2,2)         292 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2)        284 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(1,2,2)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2,2) 1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L3 [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1)  100000 ; N ! Maximum allowed vertical force, tire L3 [I]
FZ_REF(2,1,1)   11500 ; N ! Reference vertical force
IT(2,1,1)         2.8 ; kg-m2 ! Spin inertia for tire L3 [I]
IT_XXZZ(2,1,1)    1.6 ; kg-m2 ! XX/ZZ inertia for tire L3 [I]
M_TIRE(2,1,1)      28 ; kg ! Mass of tire L3
MU_REF_X(2,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L3
MU_REF_Y(2,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L3
R0(2,1,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L3 [I]
RR_C(2,1,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, R3 [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2)  100000 ; N ! Maximum allowed vertical force, tire R3 [I]
FZ_REF(2,1,2)   11500 ; N ! Reference vertical force
IT(2,1,2)         2.8 ; kg-m2 ! Spin inertia for tire R3 [I]
IT_XXZZ(2,1,2)    1.6 ; kg-m2 ! XX/ZZ inertia for tire R3 [I]
M_TIRE(2,1,2)      28 ; kg ! Mass of tire R3
MU_REF_X(2,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R3
MU_REF_Y(2,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R3
R0(2,1,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R3 [I]
RR_C(2,1,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, L4 [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1)  100000 ; N ! Maximum allowed vertical force, tire L4 [I]
FZ_REF(2,2,1)   11500 ; N ! Reference vertical force
IT(2,2,1)         2.8 ; kg-m2 ! Spin inertia for tire L4 [I]
IT_XXZZ(2,2,1)    1.6 ; kg-m2 ! XX/ZZ inertia for tire L4 [I]
M_TIRE(2,2,1)      28 ; kg ! Mass of tire L4
MU_REF_X(2,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire L4
MU_REF_Y(2,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire L4
R0(2,2,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L4 [I]
RR_C(2,2,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R4 [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2)  100000 ; N ! Maximum allowed vertical force, tire R4 [I]
FZ_REF(2,2,2)   11500 ; N ! Reference vertical force
IT(2,2,2)         2.8 ; kg-m2 ! Spin inertia for tire R4 [I]
IT_XXZZ(2,2,2)    1.6 ; kg-m2 ! XX/ZZ inertia for tire R4 [I]
M_TIRE(2,2,2)      28 ; kg ! Mass of tire R4
MU_REF_X(2,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R4
MU_REF_Y(2,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R4
R0(2,2,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R4 [I]
RR_C(2,2,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1) 1 ! Internal tire shear-model option, L5 [I]
OPT_TIRE_COMB(3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1)  100000 ; N ! Maximum allowed vertical force, tire L5 [I]
FZ_REF(3,1,1)    5500 ; N ! Reference vertical force
IT(3,1,1)         1.2 ; kg-m2 ! Spin inertia for tire L5 [I]
IT_XXZZ(3,1,1)    0.7 ; kg-m2 ! XX/ZZ inertia for tire L5 [I]
M_TIRE(3,1,1)      20 ; kg ! Mass of tire L5
MU_REF_X(3,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L5
MU_REF_Y(3,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L5
R0(3,1,1)         308 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1)        298 ; mm ! Effective rolling radius (Vx/AVy), tire L5 [I]
RR_C(3,1,1)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2) 1 ! Internal tire shear-model option, R5 [I]
OPT_TIRE_COMB(3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2)  100000 ; N ! Maximum allowed vertical force, tire R5 [I]
FZ_REF(3,1,2)    5500 ; N ! Reference vertical force
IT(3,1,2)         1.2 ; kg-m2 ! Spin inertia for tire R5 [I]
IT_XXZZ(3,1,2)    0.7 ; kg-m2 ! XX/ZZ inertia for tire R5 [I]
M_TIRE(3,1,2)      20 ; kg ! Mass of tire R5
MU_REF_X(3,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire R5
MU_REF_Y(3,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire R5
R0(3,1,2)         308 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2)        298 ; mm ! Effective rolling radius (Vx/AVy), tire R5 [I]
RR_C(3,1,2)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1) 1 ! Internal tire shear-model option, L6 [I]
OPT_TIRE_COMB(3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1)  100000 ; N ! Maximum allowed vertical force, tire L6 [I]
FZ_REF(3,2,1)    5500 ; N ! Reference vertical force
IT(3,2,1)         1.2 ; kg-m2 ! Spin inertia for tire L6 [I]
IT_XXZZ(3,2,1)    0.7 ; kg-m2 ! XX/ZZ inertia for tire L6 [I]
M_TIRE(3,2,1)      20 ; kg ! Mass of tire L6
MU_REF_X(3,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire L6
MU_REF_Y(3,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire L6
R0(3,2,1)         308 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1)        298 ; mm ! Effective rolling radius (Vx/AVy), tire L6 [I]
RR_C(3,2,1)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2) 1 ! Internal tire shear-model option, R6 [I]
OPT_TIRE_COMB(3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2)  100000 ; N ! Maximum allowed vertical force, tire R6 [I]
FZ_REF(3,2,2)    5500 ; N ! Reference vertical force
IT(3,2,2)         1.2 ; kg-m2 ! Spin inertia for tire R6 [I]
IT_XXZZ(3,2,2)    0.7 ; kg-m2 ! XX/ZZ inertia for tire R6 [I]
M_TIRE(3,2,2)      20 ; kg ! Mass of tire R6
MU_REF_X(3,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R6
MU_REF_Y(3,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R6
R0(3,2,2)         308 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2)        298 ; mm ! Effective rolling radius (Vx/AVy), tire R6 [I]
RR_C(3,2,2)     0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2)   2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,1) 7 ! Internal tire shear-model option, L7 [I]
OPT_TIRE_LAG_ALPHA(4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1)  100000 ; N ! Maximum allowed vertical force, tire L7 [I]
FZ_REF(4,1,1)    4100 ; N ! Reference vertical force
IT(4,1,1)         0.7 ; kg-m2 ! Spin inertia for tire L7 [I]
IT_XXZZ(4,1,1)    0.4 ; kg-m2 ! XX/ZZ inertia for tire L7 [I]
M_TIRE(4,1,1)      15 ; kg ! Mass of tire L7
VLOW_ALPHA(4,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(4,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,2) 7 ! Internal tire shear-model option, R7 [I]
OPT_TIRE_LAG_ALPHA(4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2)  100000 ; N ! Maximum allowed vertical force, tire R7 [I]
FZ_REF(4,1,2)    4100 ; N ! Reference vertical force
IT(4,1,2)         0.7 ; kg-m2 ! Spin inertia for tire R7 [I]
IT_XXZZ(4,1,2)    0.4 ; kg-m2 ! XX/ZZ inertia for tire R7 [I]
M_TIRE(4,1,2)      15 ; kg ! Mass of tire R7
VLOW_ALPHA(4,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(4,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1) 7 ! Internal tire shear-model option, L8 [I]
OPT_TIRE_LAG_ALPHA(4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1)  100000 ; N ! Maximum allowed vertical force, tire L8 [I]
FZ_REF(4,2,1)    4100 ; N ! Reference vertical force
IT(4,2,1)         0.7 ; kg-m2 ! Spin inertia for tire L8 [I]
IT_XXZZ(4,2,1)    0.4 ; kg-m2 ! XX/ZZ inertia for tire L8 [I]
M_TIRE(4,2,1)      15 ; kg ! Mass of tire L8
VLOW_ALPHA(4,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(4,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2) 7 ! Internal tire shear-model option, R8 [I]
OPT_TIRE_LAG_ALPHA(4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2)  100000 ; N ! Maximum allowed vertical force, tire R8 [I]
FZ_REF(4,2,2)    4100 ; N ! Reference vertical force
IT(4,2,2)         0.7 ; kg-m2 ! Spin inertia for tire R8 [I]
IT_XXZZ(4,2,2)    0.4 ; kg-m2 ! XX/ZZ inertia for tire R8 [I]
M_TIRE(4,2,2)      15 ; kg ! Mass of tire R8
VLOW_ALPHA(4,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(4,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! PACEJKA 5.2 TIRE MODEL
!------------------------------------------------------------------------------------
INSTALL_TIRE_PAC52    ! Command to install the built-in Pacejka 5.2 model

P52_R0(4,1,1)   0.287 ; m ! Unloaded radius, unit 4, axle 1, left side [I]
P52_FZ0(4,1,1)   4100 ; N ! Nominal vertical load, unit 4, axle 1, left side
P52_LONGVL(4,1,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(4,1,1)     1 ; - ! Nominal load scale factor
P52_LCX(4,1,1)      1 ; - ! Fx shape scale factor
P52_LMUX(4,1,1)     1 ; - ! Fx peak Mu scale factor
P52_LEX(4,1,1)      1 ; - ! Fx curvature scale factor
P52_LKX(4,1,1)      1 ; - ! Fx slip stiffness scale factor
P52_LHX(4,1,1)      0 ; - ! Fx horizontal shift scale factor
P52_LVX(4,1,1)      0 ; - ! Fx vertcal shift scale factor
P52_LGAX(4,1,1)     1 ; - ! Camber scale factor for Fx
P52_LCY(4,1,1)      1 ; - ! Fy shape scale factor
P52_LMUY(4,1,1)     1 ; - ! Fy peak Mu scale factor
P52_LEY(4,1,1)      1 ; - ! Fy curvature scale factor
P52_LKY(4,1,1)      1 ; - ! Fy cornering stiffness scale factor
P52_LHY(4,1,1)      0 ; - ! Fy horizontal shift scale factor
P52_LVY(4,1,1)      0 ; - ! Fy vertcal shift scale factor
P52_LGAY(4,1,1)     1 ; - ! Camber for Fy scale factor
P52_LTR(4,1,1)      1 ; - ! Peak pneumatic trail scale factor
P52_LRES(4,1,1)     0 ; - ! Residual Mz scale factor
P52_LGAZ(4,1,1)     0 ; - ! Camber for Mz scale factor
P52_LXAL(4,1,1)     0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(4,1,1)     0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(4,1,1)    0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(4,1,1)       0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(4,1,1)    1 ; - ! Fx relaxation length scale factor
P52_LSGAL(4,1,1)    1 ; - ! Fy relaxation length scale factor
P52_LGYR(4,1,1)     1 ; - ! Gyroscopic moment scale factor
P52_LMX(4,1,1)      0 ; - ! Overturning moment scale factor
P52_LVMX(4,1,1)     0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(4,1,1)      1 ; - ! Rolling resistance torque scale factor
P52_PCX1(4,1,1)  1.62 ; - ! Fx shape factor
P52_PDX1(4,1,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(4,1,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(4,1,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(4,1,1)   0.5 ; - ! Fx curvature at Fz0
P52_PEX2(4,1,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(4,1,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(4,1,1)     0 ; - ! Curvature in Fx with kappa
P52_PKX1(4,1,1)  19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(4,1,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(4,1,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(4,1,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(4,1,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(4,1,1)     0 ; - ! Fx vertical shift at Fz0
P52_PVX2(4,1,1)     0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(4,1,1)     9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(4,1,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(4,1,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(4,1,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(4,1,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(4,1,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(4,1,1)  1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(4,1,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(4,1,1)  -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(4,1,1)  1.29 ; - ! Fy shape factor
P52_PDY1(4,1,1)  -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(4,1,1)  0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(4,1,1)  -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(4,1,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(4,1,1)  0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(4,1,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(4,1,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(4,1,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(4,1,1)  1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(4,1,1)  0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(4,1,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(4,1,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(4,1,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(4,1,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(4,1,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(4,1,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(4,1,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(4,1,1)  6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(4,1,1)  7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(4,1,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(4,1,1)   1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(4,1,1)  0.23 ; - ! Combined slip Fy curvature
P52_REY2(4,1,1)  0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(4,1,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(4,1,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(4,1,1)     0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(4,1,1)     0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(4,1,1)     0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(4,1,1)    10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(4,1,1)  1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(4,1,1)   -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(4,1,1)  1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(4,1,1)   1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(4,1,1)  8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(4,1,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(4,1,1)  0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(4,1,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(4,1,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(4,1,1)  3.44 ; - ! Residual moment slope factor
P52_QBZ10(4,1,1)    0 ; - ! Residual moment slope factor
P52_QCZ1(4,1,1)  1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(4,1,1)  0.11 ; - ! Peak pneumatic trail
P52_QDZ2(4,1,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(4,1,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(4,1,1)   8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(4,1,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(4,1,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(4,1,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(4,1,1)  0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(4,1,1)  -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(4,1,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(4,1,1)     0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(4,1,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(4,1,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(4,1,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(4,1,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(4,1,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(4,1,1)  0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(4,1,1)     0 ; - ! Overturning moment due to Fz
P52_QSX2(4,1,1)     0 ; - ! Overturning moment due to gamma
P52_QSX3(4,1,1)     0 ; - ! Overturning moment due to Fy
P52_QSY1(4,1,1)  0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(4,1,1)     0 ; - ! Change in rolling resistance with Fx
P52_QSY3(4,1,1)     0 ; - ! Change in rolling resistance with Vx
P52_QSY4(4,1,1)     0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(4,1,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(4,1,1)     0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(4,1,1)   0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(4,1,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(4,1,1)   0.2 ; - ! Gyroscopic moment constant
P52_MBELT(4,1,1)  4.1 ; kg ! Belt mass
P52_MU_REF_X(4,1,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(4,1,1) 1 ; - ! Reference lateral friction

P52_R0(4,1,2)   0.287 ; m ! Unloaded radius, unit 4, axle 1, right side [I]
P52_FZ0(4,1,2)   4100 ; N ! Nominal vertical load, unit 4, axle 1, right side
P52_LONGVL(4,1,2) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(4,1,2)     1 ; - ! Nominal load scale factor
P52_LCX(4,1,2)      1 ; - ! Fx shape scale factor
P52_LMUX(4,1,2)     1 ; - ! Fx peak Mu scale factor
P52_LEX(4,1,2)      1 ; - ! Fx curvature scale factor
P52_LKX(4,1,2)      1 ; - ! Fx slip stiffness scale factor
P52_LHX(4,1,2)      0 ; - ! Fx horizontal shift scale factor
P52_LVX(4,1,2)      0 ; - ! Fx vertcal shift scale factor
P52_LGAX(4,1,2)     1 ; - ! Camber scale factor for Fx
P52_LCY(4,1,2)      1 ; - ! Fy shape scale factor
P52_LMUY(4,1,2)     1 ; - ! Fy peak Mu scale factor
P52_LEY(4,1,2)      1 ; - ! Fy curvature scale factor
P52_LKY(4,1,2)      1 ; - ! Fy cornering stiffness scale factor
P52_LHY(4,1,2)      0 ; - ! Fy horizontal shift scale factor
P52_LVY(4,1,2)      0 ; - ! Fy vertcal shift scale factor
P52_LGAY(4,1,2)     1 ; - ! Camber for Fy scale factor
P52_LTR(4,1,2)      1 ; - ! Peak pneumatic trail scale factor
P52_LRES(4,1,2)     0 ; - ! Residual Mz scale factor
P52_LGAZ(4,1,2)     0 ; - ! Camber for Mz scale factor
P52_LXAL(4,1,2)     0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(4,1,2)     0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(4,1,2)    0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(4,1,2)       0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(4,1,2)    1 ; - ! Fx relaxation length scale factor
P52_LSGAL(4,1,2)    1 ; - ! Fy relaxation length scale factor
P52_LGYR(4,1,2)     1 ; - ! Gyroscopic moment scale factor
P52_LMX(4,1,2)      0 ; - ! Overturning moment scale factor
P52_LVMX(4,1,2)     0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(4,1,2)      1 ; - ! Rolling resistance torque scale factor
P52_PCX1(4,1,2)  1.62 ; - ! Fx shape factor
P52_PDX1(4,1,2) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(4,1,2) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(4,1,2) -2.27 ; - ! Change in friction with gamma
P52_PEX1(4,1,2)   0.5 ; - ! Fx curvature at Fz0
P52_PEX2(4,1,2) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(4,1,2) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(4,1,2)     0 ; - ! Curvature in Fx with kappa
P52_PKX1(4,1,2)  19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(4,1,2) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(4,1,2) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(4,1,2) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(4,1,2) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(4,1,2)     0 ; - ! Fx vertical shift at Fz0
P52_PVX2(4,1,2)     0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(4,1,2)     9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(4,1,2) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(4,1,2) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(4,1,2) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(4,1,2) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(4,1,2) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(4,1,2)  1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(4,1,2) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(4,1,2)  -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(4,1,2)  1.29 ; - ! Fy shape factor
P52_PDY1(4,1,2)  -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(4,1,2)  0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(4,1,2)  -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(4,1,2) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(4,1,2)  0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(4,1,2) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(4,1,2) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(4,1,2) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(4,1,2)  1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(4,1,2)  0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(4,1,2) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(4,1,2) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(4,1,2) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(4,1,2) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(4,1,2) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(4,1,2) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(4,1,2) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(4,1,2)  6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(4,1,2)  7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(4,1,2) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(4,1,2)   1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(4,1,2)  0.23 ; - ! Combined slip Fy curvature
P52_REY2(4,1,2)  0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(4,1,2) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(4,1,2) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(4,1,2)     0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(4,1,2)     0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(4,1,2)     0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(4,1,2)    10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(4,1,2)  1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(4,1,2)   -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(4,1,2)  1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(4,1,2)   1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(4,1,2)  8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(4,1,2) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(4,1,2)  0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(4,1,2) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(4,1,2) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(4,1,2)  3.44 ; - ! Residual moment slope factor
P52_QBZ10(4,1,2)    0 ; - ! Residual moment slope factor
P52_QCZ1(4,1,2)  1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(4,1,2)  0.11 ; - ! Peak pneumatic trail
P52_QDZ2(4,1,2) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(4,1,2) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(4,1,2)   8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(4,1,2) -0.003 ; - ! Peak residual moment
P52_QDZ7(4,1,2) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(4,1,2) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(4,1,2)  0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(4,1,2)  -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(4,1,2) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(4,1,2)     0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(4,1,2) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(4,1,2) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(4,1,2) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(4,1,2) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(4,1,2) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(4,1,2)  0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(4,1,2)     0 ; - ! Overturning moment due to Fz
P52_QSX2(4,1,2)     0 ; - ! Overturning moment due to gamma
P52_QSX3(4,1,2)     0 ; - ! Overturning moment due to Fy
P52_QSY1(4,1,2)  0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(4,1,2)     0 ; - ! Change in rolling resistance with Fx
P52_QSY3(4,1,2)     0 ; - ! Change in rolling resistance with Vx
P52_QSY4(4,1,2)     0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(4,1,2) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(4,1,2)     0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(4,1,2)   0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(4,1,2) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(4,1,2)   0.2 ; - ! Gyroscopic moment constant
P52_MBELT(4,1,2)  4.1 ; kg ! Belt mass
P52_MU_REF_X(4,1,2) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(4,1,2) 1 ; - ! Reference lateral friction

P52_R0(4,2,1)   0.287 ; m ! Unloaded radius, unit 4, axle 2, left side [I]
P52_FZ0(4,2,1)   4100 ; N ! Nominal vertical load, unit 4, axle 2, left side
P52_LONGVL(4,2,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(4,2,1)     1 ; - ! Nominal load scale factor
P52_LCX(4,2,1)      1 ; - ! Fx shape scale factor
P52_LMUX(4,2,1)     1 ; - ! Fx peak Mu scale factor
P52_LEX(4,2,1)      1 ; - ! Fx curvature scale factor
P52_LKX(4,2,1)      1 ; - ! Fx slip stiffness scale factor
P52_LHX(4,2,1)      0 ; - ! Fx horizontal shift scale factor
P52_LVX(4,2,1)      0 ; - ! Fx vertcal shift scale factor
P52_LGAX(4,2,1)     1 ; - ! Camber scale factor for Fx
P52_LCY(4,2,1)      1 ; - ! Fy shape scale factor
P52_LMUY(4,2,1)     1 ; - ! Fy peak Mu scale factor
P52_LEY(4,2,1)      1 ; - ! Fy curvature scale factor
P52_LKY(4,2,1)      1 ; - ! Fy cornering stiffness scale factor
P52_LHY(4,2,1)      0 ; - ! Fy horizontal shift scale factor
P52_LVY(4,2,1)      0 ; - ! Fy vertcal shift scale factor
P52_LGAY(4,2,1)     1 ; - ! Camber for Fy scale factor
P52_LTR(4,2,1)      1 ; - ! Peak pneumatic trail scale factor
P52_LRES(4,2,1)     0 ; - ! Residual Mz scale factor
P52_LGAZ(4,2,1)     0 ; - ! Camber for Mz scale factor
P52_LXAL(4,2,1)     0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(4,2,1)     0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(4,2,1)    0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(4,2,1)       0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(4,2,1)    1 ; - ! Fx relaxation length scale factor
P52_LSGAL(4,2,1)    1 ; - ! Fy relaxation length scale factor
P52_LGYR(4,2,1)     1 ; - ! Gyroscopic moment scale factor
P52_LMX(4,2,1)      0 ; - ! Overturning moment scale factor
P52_LVMX(4,2,1)     0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(4,2,1)      1 ; - ! Rolling resistance torque scale factor
P52_PCX1(4,2,1)  1.62 ; - ! Fx shape factor
P52_PDX1(4,2,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(4,2,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(4,2,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(4,2,1)   0.5 ; - ! Fx curvature at Fz0
P52_PEX2(4,2,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(4,2,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(4,2,1)     0 ; - ! Curvature in Fx with kappa
P52_PKX1(4,2,1)  19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(4,2,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(4,2,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(4,2,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(4,2,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(4,2,1)     0 ; - ! Fx vertical shift at Fz0
P52_PVX2(4,2,1)     0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(4,2,1)     9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(4,2,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(4,2,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(4,2,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(4,2,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(4,2,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(4,2,1)  1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(4,2,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(4,2,1)  -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(4,2,1)  1.29 ; - ! Fy shape factor
P52_PDY1(4,2,1)  -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(4,2,1)  0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(4,2,1)  -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(4,2,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(4,2,1)  0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(4,2,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(4,2,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(4,2,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(4,2,1)  1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(4,2,1)  0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(4,2,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(4,2,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(4,2,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(4,2,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(4,2,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(4,2,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(4,2,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(4,2,1)  6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(4,2,1)  7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(4,2,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(4,2,1)   1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(4,2,1)  0.23 ; - ! Combined slip Fy curvature
P52_REY2(4,2,1)  0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(4,2,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(4,2,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(4,2,1)     0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(4,2,1)     0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(4,2,1)     0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(4,2,1)    10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(4,2,1)  1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(4,2,1)   -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(4,2,1)  1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(4,2,1)   1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(4,2,1)  8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(4,2,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(4,2,1)  0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(4,2,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(4,2,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(4,2,1)  3.44 ; - ! Residual moment slope factor
P52_QBZ10(4,2,1)    0 ; - ! Residual moment slope factor
P52_QCZ1(4,2,1)  1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(4,2,1)  0.11 ; - ! Peak pneumatic trail
P52_QDZ2(4,2,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(4,2,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(4,2,1)   8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(4,2,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(4,2,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(4,2,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(4,2,1)  0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(4,2,1)  -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(4,2,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(4,2,1)     0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(4,2,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(4,2,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(4,2,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(4,2,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(4,2,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(4,2,1)  0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(4,2,1)     0 ; - ! Overturning moment due to Fz
P52_QSX2(4,2,1)     0 ; - ! Overturning moment due to gamma
P52_QSX3(4,2,1)     0 ; - ! Overturning moment due to Fy
P52_QSY1(4,2,1)  0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(4,2,1)     0 ; - ! Change in rolling resistance with Fx
P52_QSY3(4,2,1)     0 ; - ! Change in rolling resistance with Vx
P52_QSY4(4,2,1)     0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(4,2,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(4,2,1)     0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(4,2,1)   0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(4,2,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(4,2,1)   0.2 ; - ! Gyroscopic moment constant
P52_MBELT(4,2,1)  4.1 ; kg ! Belt mass
P52_MU_REF_X(4,2,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(4,2,1) 1 ; - ! Reference lateral friction

P52_R0(4,2,2)   0.287 ; m ! Unloaded radius, unit 4, axle 2, right side [I]
P52_FZ0(4,2,2)   4100 ; N ! Nominal vertical load, unit 4, axle 2, right side
P52_LONGVL(4,2,2) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(4,2,2)     1 ; - ! Nominal load scale factor
P52_LCX(4,2,2)      1 ; - ! Fx shape scale factor
P52_LMUX(4,2,2)     1 ; - ! Fx peak Mu scale factor
P52_LEX(4,2,2)      1 ; - ! Fx curvature scale factor
P52_LKX(4,2,2)      1 ; - ! Fx slip stiffness scale factor
P52_LHX(4,2,2)      0 ; - ! Fx horizontal shift scale factor
P52_LVX(4,2,2)      0 ; - ! Fx vertcal shift scale factor
P52_LGAX(4,2,2)     1 ; - ! Camber scale factor for Fx
P52_LCY(4,2,2)      1 ; - ! Fy shape scale factor
P52_LMUY(4,2,2)     1 ; - ! Fy peak Mu scale factor
P52_LEY(4,2,2)      1 ; - ! Fy curvature scale factor
P52_LKY(4,2,2)      1 ; - ! Fy cornering stiffness scale factor
P52_LHY(4,2,2)      0 ; - ! Fy horizontal shift scale factor
P52_LVY(4,2,2)      0 ; - ! Fy vertcal shift scale factor
P52_LGAY(4,2,2)     1 ; - ! Camber for Fy scale factor
P52_LTR(4,2,2)      1 ; - ! Peak pneumatic trail scale factor
P52_LRES(4,2,2)     0 ; - ! Residual Mz scale factor
P52_LGAZ(4,2,2)     0 ; - ! Camber for Mz scale factor
P52_LXAL(4,2,2)     0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(4,2,2)     0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(4,2,2)    0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(4,2,2)       0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(4,2,2)    1 ; - ! Fx relaxation length scale factor
P52_LSGAL(4,2,2)    1 ; - ! Fy relaxation length scale factor
P52_LGYR(4,2,2)     1 ; - ! Gyroscopic moment scale factor
P52_LMX(4,2,2)      0 ; - ! Overturning moment scale factor
P52_LVMX(4,2,2)     0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(4,2,2)      1 ; - ! Rolling resistance torque scale factor
P52_PCX1(4,2,2)  1.62 ; - ! Fx shape factor
P52_PDX1(4,2,2) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(4,2,2) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(4,2,2) -2.27 ; - ! Change in friction with gamma
P52_PEX1(4,2,2)   0.5 ; - ! Fx curvature at Fz0
P52_PEX2(4,2,2) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(4,2,2) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(4,2,2)     0 ; - ! Curvature in Fx with kappa
P52_PKX1(4,2,2)  19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(4,2,2) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(4,2,2) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(4,2,2) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(4,2,2) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(4,2,2)     0 ; - ! Fx vertical shift at Fz0
P52_PVX2(4,2,2)     0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(4,2,2)     9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(4,2,2) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(4,2,2) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(4,2,2) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(4,2,2) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(4,2,2) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(4,2,2)  1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(4,2,2) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(4,2,2)  -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(4,2,2)  1.29 ; - ! Fy shape factor
P52_PDY1(4,2,2)  -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(4,2,2)  0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(4,2,2)  -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(4,2,2) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(4,2,2)  0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(4,2,2) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(4,2,2) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(4,2,2) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(4,2,2)  1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(4,2,2)  0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(4,2,2) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(4,2,2) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(4,2,2) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(4,2,2) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(4,2,2) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(4,2,2) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(4,2,2) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(4,2,2)  6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(4,2,2)  7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(4,2,2) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(4,2,2)   1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(4,2,2)  0.23 ; - ! Combined slip Fy curvature
P52_REY2(4,2,2)  0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(4,2,2) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(4,2,2) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(4,2,2)     0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(4,2,2)     0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(4,2,2)     0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(4,2,2)    10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(4,2,2)  1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(4,2,2)   -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(4,2,2)  1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(4,2,2)   1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(4,2,2)  8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(4,2,2) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(4,2,2)  0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(4,2,2) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(4,2,2) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(4,2,2)  3.44 ; - ! Residual moment slope factor
P52_QBZ10(4,2,2)    0 ; - ! Residual moment slope factor
P52_QCZ1(4,2,2)  1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(4,2,2)  0.11 ; - ! Peak pneumatic trail
P52_QDZ2(4,2,2) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(4,2,2) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(4,2,2)   8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(4,2,2) -0.003 ; - ! Peak residual moment
P52_QDZ7(4,2,2) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(4,2,2) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(4,2,2)  0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(4,2,2)  -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(4,2,2) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(4,2,2)     0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(4,2,2) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(4,2,2) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(4,2,2) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(4,2,2) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(4,2,2) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(4,2,2)  0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(4,2,2)     0 ; - ! Overturning moment due to Fz
P52_QSX2(4,2,2)     0 ; - ! Overturning moment due to gamma
P52_QSX3(4,2,2)     0 ; - ! Overturning moment due to Fy
P52_QSY1(4,2,2)  0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(4,2,2)     0 ; - ! Change in rolling resistance with Fx
P52_QSY3(4,2,2)     0 ; - ! Change in rolling resistance with Vx
P52_QSY4(4,2,2)     0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(4,2,2) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(4,2,2)     0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(4,2,2)   0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(4,2,2) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(4,2,2)   0.2 ; - ! Gyroscopic moment constant
P52_MBELT(4,2,2)  4.1 ; kg ! Belt mass
P52_MU_REF_X(4,2,2) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(4,2,2) 1 ; - ! Reference lateral friction


!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL(1)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 1

OPT_BK_PEDAL(2)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 2

OPT_BK_PEDAL(3)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 3

OPT_BK_PEDAL(4)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 4

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)     0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)      0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)     0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)      0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)     0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)      0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)     0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)      0 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(2,1,1)     0.06 ; s ! Time constant for brake actuator L3
TLAG_BK(2,1,1)      0 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(2,1,2)     0.06 ; s ! Time constant for brake actuator R3
TLAG_BK(2,1,2)      0 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,2,1)     0.06 ; s ! Time constant for brake actuator L4
TLAG_BK(2,2,1)      0 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,2,2)     0.06 ; s ! Time constant for brake actuator R4
TLAG_BK(2,2,2)      0 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(3,1,1)     0.06 ; s ! Time constant for brake actuator L5
TLAG_BK(3,1,1)      0 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(3,1,2)     0.06 ; s ! Time constant for brake actuator R5
TLAG_BK(3,1,2)      0 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(3,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(3,2,1)     0.06 ; s ! Time constant for brake actuator L6
TLAG_BK(3,2,1)      0 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(3,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(3,2,2)     0.06 ; s ! Time constant for brake actuator R6
TLAG_BK(3,2,2)      0 ; s ! Transport time delay for fluid to reach brake R6 [I]

OPT_BK_DYN(4,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,1) 0 ! [D] Brake L7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L7
TC_BK(4,1,1)     0.06 ; s ! Time constant for brake actuator L7
TLAG_BK(4,1,1)      0 ; s ! Transport time delay for fluid to reach brake L7 [I]

OPT_BK_DYN(4,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,2) 0 ! [D] Brake R7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R7
TC_BK(4,1,2)     0.06 ; s ! Time constant for brake actuator R7
TLAG_BK(4,1,2)      0 ; s ! Transport time delay for fluid to reach brake R7 [I]

OPT_BK_DYN(4,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,1) 0 ! [D] Brake L8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L8
TC_BK(4,2,1)     0.06 ; s ! Time constant for brake actuator L8
TLAG_BK(4,2,1)      0 ; s ! Transport time delay for fluid to reach brake L8 [I]

OPT_BK_DYN(4,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,2) 0 ! [D] Brake R8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R8
TC_BK(4,2,2)     0.06 ; s ! Time constant for brake actuator R8
TLAG_BK(4,2,2)      0 ; s ! Transport time delay for fluid to reach brake R8 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT(1)           1 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise, vehicle 1 [L]
OPT_PT(2)           3 ! Powertrain type, vehicle 2 [L]
OPT_PT(3)           2 ! Powertrain type, vehicle 3 [L]
OPT_PT(4)           2 ! Powertrain type, vehicle 4 [L]

OPT_HEV(1)          0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric, vehicle 1
R_MDRIVE(1)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 1 [I]
VLOW_IW(1)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 1

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1,1) 1 ! Front diff model: 1 -> internal, 0 -> external, vehicle 1
                         ! [I]
OPT_LOCKED_DIFF(1,1) 0 ! Is the front diff locked? 0 -> no, 1 -> yes, vehicle 1 [I]
LOCKED_DIFF_DAMP(1,1) 0.8 ; N-m-s/deg ! Torsional damping for locked front diff,
                          ! vehicle 1 [I]
LOCKED_DIFF_K(1,1) 80 ; N-m/deg ! Torsional spring rate for locked front diff,
                      ! vehicle 1 [I]
R_EFF_F_DIFF(1,1) 0.99 ; - ! Forward efficiency of front diff, vehicle 1 [I]
R_EFF_R_DIFF(1,1) 0.99 ; - ! Reverse efficiency of front diff, vehicle 1 [I]
R_GEAR_DIFF(1,1)  4.1 ; - ! Gear ratio of front diff, vehicle 1 [I]
IDS(1,1)        0.013 ; kg-m2 ! Spin inertia of front diff input shaft, vehicle 1
                      ! [I]
IHS_L(1,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, front diff, vehicle
                      ! 1 [I]
IHS_R(1,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, front diff,
                      ! vehicle 1 [I]
OPT_CLUTCH_DIFF(1,1) 0 ! [D] Clutch control for front diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 1 [I]
OPT_TWIN_CLUTCH(1,1) 0 ! [D] Twin clutches on front diff? 0 -> no, 1 -> yes, vehicle
                       ! 1 [I]

OPT_HEV(2)          0 ! Propulsion type, vehicle 2
R_MDRIVE(2)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 2 [I]
VLOW_IW(2)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 2

OPT_DIFF_INTERNAL(2,1) 1 ! Front diff model: 1 -> internal, 0 -> external, vehicle 2
                         ! [I]
OPT_LOCKED_DIFF(2,1) 0 ! Is the front diff locked? 0 -> no, 1 -> yes, vehicle 2 [I]
LOCKED_DIFF_DAMP(2,1) 1 ; N-m-s/deg ! Torsional damping for locked front diff,
                        ! vehicle 2 [I]
LOCKED_DIFF_K(2,1) 100 ; N-m/deg ! Torsional spring rate for locked front diff,
                       ! vehicle 2 [I]
R_EFF_F_DIFF(2,1) 0.99 ; - ! Forward efficiency of front diff, vehicle 2 [I]
R_EFF_R_DIFF(2,1) 0.99 ; - ! Reverse efficiency of front diff, vehicle 2 [I]
R_GEAR_DIFF(2,1)  4.1 ; - ! Gear ratio of front diff, vehicle 2 [I]
IDS(2,1)        0.013 ; kg-m2 ! Spin inertia of front diff input shaft, vehicle 2
                      ! [I]
IHS_L(2,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, front diff, vehicle
                      ! 2 [I]
IHS_R(2,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, front diff,
                      ! vehicle 2 [I]
OPT_CLUTCH_DIFF(2,1) 0 ! [D] Clutch control for front diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 2 [I]
OPT_TWIN_CLUTCH(2,1) 0 ! [D] Twin clutches on front diff? 0 -> no, 1 -> yes, vehicle
                       ! 2 [I]

OPT_DIFF_INTERNAL(2,2) 1 ! Rear diff model: 1 -> internal, 0 -> external, vehicle 2
                         ! [I]
OPT_LOCKED_DIFF(2,2) 0 ! Is the rear diff locked? 0 -> no, 1 -> yes, vehicle 2 [I]
LOCKED_DIFF_DAMP(2,2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff,
                          ! vehicle 2 [I]
LOCKED_DIFF_K(2,2) 80 ; N-m/deg ! Torsional spring rate for locked rear diff,
                      ! vehicle 2 [I]
R_EFF_F_DIFF(2,2) 0.99 ; - ! Forward efficiency of rear diff, vehicle 2 [I]
R_EFF_R_DIFF(2,2) 0.99 ; - ! Reverse efficiency of rear diff, vehicle 2 [I]
R_GEAR_DIFF(2,2)  4.1 ; - ! Gear ratio of rear diff, vehicle 2 [I]
IDS(2,2)        0.013 ; kg-m2 ! Spin inertia of rear diff input shaft, vehicle 2 [I]
IHS_L(2,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, rear diff, vehicle
                      ! 2 [I]
IHS_R(2,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, rear diff, vehicle
                      ! 2 [I]
OPT_CLUTCH_DIFF(2,2) 0 ! [D] Clutch control for rear diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 2 [I]
OPT_TWIN_CLUTCH(2,2) 0 ! [D] Twin clutches on rear diff? 0 -> no, 1 -> yes, vehicle
                       ! 2 [I]

OPT_DIFF_INTERNAL(2,3) 1 ! Transfer case model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,3) 0 ! Is the transfer case locked? 0 -> no, 1 -> yes, vehicle 2
                       ! [I]
R_REAR_BIAS(2,3)  0.5 ; - ! Fraction: transfer case torque on the transfer case,
                      ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,3) 0.8 ; N-m-s/deg ! Torsional damping for locked transfer case,
                          ! vehicle 2 [I]
LOCKED_DIFF_K(2,3) 80 ; N-m/deg ! Torsional spring rate for locked transfer case,
                      ! vehicle 2 [I]
R_EFF_F_DIFF(2,3) 0.99 ; - ! Forward efficiency of transfer case, vehicle 2 [I]
R_EFF_R_DIFF(2,3) 0.99 ; - ! Reverse efficiency of transfer case, vehicle 2 [I]
R_GEAR_DIFF(2,3)    1 ; - ! Gear ratio of transfer case, vehicle 2 [I]
IDS(2,3)            0 ; kg-m2 ! [D] Spin inertia of transfer case input shaft,
                      ! vehicle 2 [I]
OPT_CLUTCH_DIFF(2,3) 0 ! [D] Clutch control for transfer case: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 2 [I]

OPT_HEV(3)          0 ! Propulsion type, vehicle 3
R_MDRIVE(3)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 3 [I]
VLOW_IW(3)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 3

OPT_DIFF_INTERNAL(3,2) 1 ! Rear diff model: 1 -> internal, 0 -> external, vehicle 3
                         ! [I]
OPT_LOCKED_DIFF(3,2) 0 ! Is the rear diff locked? 0 -> no, 1 -> yes, vehicle 3 [I]
LOCKED_DIFF_DAMP(3,2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff,
                          ! vehicle 3 [I]
LOCKED_DIFF_K(3,2) 80 ; N-m/deg ! Torsional spring rate for locked rear diff,
                      ! vehicle 3 [I]
R_EFF_F_DIFF(3,2) 0.99 ; - ! Forward efficiency of rear diff, vehicle 3 [I]
R_EFF_R_DIFF(3,2) 0.99 ; - ! Reverse efficiency of rear diff, vehicle 3 [I]
R_GEAR_DIFF(3,2)  4.1 ; - ! Gear ratio of rear diff, vehicle 3 [I]
IDS(3,2)        0.013 ; kg-m2 ! Spin inertia of rear diff input shaft, vehicle 3 [I]
IHS_L(3,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, rear diff, vehicle
                      ! 3 [I]
IHS_R(3,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, rear diff, vehicle
                      ! 3 [I]
OPT_CLUTCH_DIFF(3,2) 0 ! [D] Clutch control for rear diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 3 [I]
OPT_TWIN_CLUTCH(3,2) 0 ! [D] Twin clutches on rear diff? 0 -> no, 1 -> yes, vehicle
                       ! 3 [I]

OPT_HEV(4)          0 ! Propulsion type, vehicle 4
R_MDRIVE(4)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 4 [I]
VLOW_IW(4)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 4

OPT_DIFF_INTERNAL(4,2) 1 ! Rear diff model: 1 -> internal, 0 -> external, vehicle 4
                         ! [I]
OPT_LOCKED_DIFF(4,2) 0 ! Is the rear diff locked? 0 -> no, 1 -> yes, vehicle 4 [I]
LOCKED_DIFF_DAMP(4,2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff,
                          ! vehicle 4 [I]
LOCKED_DIFF_K(4,2) 80 ; N-m/deg ! Torsional spring rate for locked rear diff,
                      ! vehicle 4 [I]
R_EFF_F_DIFF(4,2) 0.99 ; - ! Forward efficiency of rear diff, vehicle 4 [I]
R_EFF_R_DIFF(4,2) 0.99 ; - ! Reverse efficiency of rear diff, vehicle 4 [I]
R_GEAR_DIFF(4,2) 5.125 ; - ! Gear ratio of rear diff, vehicle 4 [I]
IDS(4,2)        0.013 ; kg-m2 ! Spin inertia of rear diff input shaft, vehicle 4 [I]
IHS_L(4,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, rear diff, vehicle
                      ! 4 [I]
IHS_R(4,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, rear diff, vehicle
                      ! 4 [I]
OPT_CLUTCH_DIFF(4,2) 0 ! [D] Clutch control for rear diff: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 4 [I]
OPT_TWIN_CLUTCH(4,2) 0 ! [D] Twin clutches on rear diff? 0 -> no, 1 -> yes, vehicle
                       ! 4 [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE(1)     ! VS Command to install an engine, vehicle 1
INSTALL_ENGINE(2)     ! VS Command to install an engine, vehicle 2
INSTALL_ENGINE(3)     ! VS Command to install an engine, vehicle 3
INSTALL_ENGINE(4)     ! VS Command to install an engine, vehicle 4

OPT_ENGINE_INTERNAL(1) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(1) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(1) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(1)    750 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(1)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(1)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(1) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(1)          0.16 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(2) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(2) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(2) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(2)    725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(2)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(2)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(2) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(2)           0.3 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(3) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(3) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(3) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(3)    750 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(3)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(3)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(3) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(3)          0.16 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(3) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(4) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(4) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(4) 1 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(4)   1000 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(4)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(4)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(4) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(4)          0.18 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(4) 0.01 ; kg-m2 ! Spin inertia of input shaft of torque converter
TC_TH_APP(4)     0.05 ; s ! Time constant for engine throttle application, vehicle 4
TC_TH_RELEASE(4)  0.1 ; s ! Time constant for engine throttle release

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE(1)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 1
INSTALL_TORQUE_TRANSFER_DEVICE(2)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 2
INSTALL_TORQUE_TRANSFER_DEVICE(3)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 3
INSTALL_TORQUE_TRANSFER_DEVICE(4)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 4

OPT_CLUTCH(1)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(1) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(2)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(2) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(3)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(3) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(4)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE(4)  1 ! [D] Clutch control mode: 0 -> open-loop, 1 -> closed-loop
                      ! (based on shifting) [I]
OPT_CLUTCH_DELAY(4) 0 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(4) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
T_CL_DISENGAGE(4) 0.1 ; s ! [D] Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD(4) 0.1 ; s ! [D] Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL(4) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(4) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL(4) 0.3 ; s ! [D] Time applying the clutch to full pressure during
                        ! shift [I]
T_CL_RE_ENGAGE(4) 0.5 ; s ! [D] Time clutch is fully re-engaged after starting shift
                      ! [I]
T_GEAR_LAG(4)     0.1 ; s ! [D] Time lag in shifting
! T_TH_RETURN(4)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED(4)  0.4 ; s ! [D] Time when throttle has returned to pre-shift level
                      ! [I]
T_TH_ZERO(4)      0.1 ; s ! [D] Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD(4) 0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL(4) 0.3 ; s ! [D] Time when starting to return throttle [I]
VLOW_CLUTCH(4)      5 ; km/h ! [D] Press the clutch pedal when average of wheel
                      ! speeds is below this speed while deccelerating with brake
                      ! during the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION(1)  ! VS Command to install a transmission, vehicle 1
INSTALL_TRANSMISSION(2)  ! VS Command to install a transmission, vehicle 2
INSTALL_TRANSMISSION(3)  ! VS Command to install a transmission, vehicle 3
INSTALL_TRANSMISSION(4)  ! VS Command to install a transmission, vehicle 4

OPT_TRANS_INTERNAL(1) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(1) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(1)           5 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(1) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(1)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(1)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(1) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(1) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(1) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(1)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 1
R_EFF_TR_F(1,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,1)   3.78 ; - ! 1st-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 1 [I]
T_SHIFT_DOWN(1,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 1 [I]

ITR(1,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,2)   2.12 ; - ! 2nd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 1
T_SHIFT_DOWN(1,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 1

ITR(1,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,3)   1.36 ; - ! 3rd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 1
T_SHIFT_DOWN(1,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 1

ITR(1,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,4)   1.03 ; - ! 4th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 1
T_SHIFT_DOWN(1,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 1

ITR(1,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,5)   0.84 ; - ! 5th-gear ratio of transmission, vehicle 1

DRIVELINE_FREQ(1)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(1) 1.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(2) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(2) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(2)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(2) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(2)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(2)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(2) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(2) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(2) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(2)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(2,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 2
R_EFF_TR_F(2,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,1)  3.538 ; - ! 1st-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 2 [I]
T_SHIFT_DOWN(2,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 2 [I]

ITR(2,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,2)   2.06 ; - ! 2nd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 2
T_SHIFT_DOWN(2,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 2

ITR(2,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,3)  1.404 ; - ! 3rd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 2
T_SHIFT_DOWN(2,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 2

ITR(2,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 2
T_SHIFT_DOWN(2,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 2

ITR(2,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,5)  0.713 ; - ! 5th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 2
T_SHIFT_DOWN(2,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 2

ITR(2,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,6)  0.582 ; - ! 6th-gear ratio of transmission, vehicle 2

DRIVELINE_FREQ(2)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(2) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(3) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(3) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(3)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(3) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(3) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(3)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(3)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(3) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(3) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(3) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(3)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(3,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 3
R_EFF_TR_F(3,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,1)  3.538 ; - ! 1st-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 3 [I]
T_SHIFT_DOWN(3,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 3 [I]

ITR(3,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,2)   2.06 ; - ! 2nd-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 3
T_SHIFT_DOWN(3,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 3

ITR(3,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,3)  1.404 ; - ! 3rd-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 3
T_SHIFT_DOWN(3,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 3

ITR(3,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 3
T_SHIFT_DOWN(3,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 3

ITR(3,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,5)  0.713 ; - ! 5th-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 3
T_SHIFT_DOWN(3,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 3

ITR(3,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,6)  0.582 ; - ! 6th-gear ratio of transmission, vehicle 3

DRIVELINE_FREQ(3)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(3) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(4) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(4) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(4)           5 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(4) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(4) 0.05 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(4)   0.03 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(4)   0.03 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(4) 0.95 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(4) 0.95 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(4) -5.151 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(4)        0.2 ; s ! Shift duration in closed-loop transmission control

ITR(4,1)         0.03 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 4
R_EFF_TR_F(4,1)  0.95 ; - ! 1st-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,1)  0.95 ; - ! 1st-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,1)  5.106 ; - ! 1st-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 4 [I]
T_SHIFT_DOWN(4,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 4 [I]

ITR(4,2)         0.03 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,2)  0.95 ; - ! 2nd-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,2)  0.95 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,2)  3.017 ; - ! 2nd-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 4
T_SHIFT_DOWN(4,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 4

ITR(4,3)         0.03 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,3)  1.908 ; - ! 3rd-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 4
T_SHIFT_DOWN(4,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 4

ITR(4,4)         0.03 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,4)  1.264 ; - ! 4th-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 4
T_SHIFT_DOWN(4,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 4

ITR(4,5)         0.03 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,5)  0.95 ; - ! 5th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,5)  0.95 ; - ! 5th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,5)      1 ; - ! 5th-gear ratio of transmission, vehicle 4

DRIVELINE_FREQ(4)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(4) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH            17 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS       17 ! VS Command to install reference paths

PATH_ID(1)       1000 ; SW Loop, CW, 1000
OPT_PATH_START(1)   0 ! [D] Set initial heading and X-Y coordinates of the path? 0
                      ! -> no (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(1) 741.323608 ; m ! CALC -- Lap distance for this path
! HEADING_START(1) -0.0004118043427 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1) 146.342 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 741.323608 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) -0.0004118043427 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES   16 ! No. of XY spline tables (see the SPLINE TABLES section)

PATH_ID(2)       1001 ; SW Loop, CCW, 1001
OPT_PATH_START(2)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(2) 781.5330211 ; m ! CALC -- Lap distance for this path
! HEADING_START(2) 90 ; deg ! Heading at the start of this path
! X_PATH_START(2) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(2)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        1 ! Number of segments in this path
SEGMENT_TYPE(2,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(2,1)  2 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(2,1) 781.5330211 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 153.658 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; NW Loop, CW, 1002
OPT_PATH_START(3)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(3) 741.3236103 ; m ! CALC -- Lap distance for this path
! HEADING_START(3) -90.0004118 ; deg ! Heading at the start of this path
! X_PATH_START(3) 146.342 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(3) 300 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        1 ! Number of segments in this path
SEGMENT_TYPE(3,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(3,1)  3 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(3,1) 741.3236103 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 146.342 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 300 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) -90.0004118 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1003 ; NW Loop, CCW, 1003
OPT_PATH_START(4)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(4) 781.5203793 ; m ! CALC -- Lap distance for this path
! HEADING_START(4)  0 ; deg ! Heading at the start of this path
! X_PATH_START(4)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(4) 146.342 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        1 ! Number of segments in this path
SEGMENT_TYPE(4,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(4,1)  4 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(4,1) 781.5203793 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       1004 ; NE Loop, CW, 1004
OPT_PATH_START(5)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(5) 741.3236103 ; m ! CALC -- Lap distance for this path
! HEADING_START(5) 179.9995882 ; deg ! Heading at the start of this path
! X_PATH_START(5) 300 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(5) 153.658 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        1 ! Number of segments in this path
SEGMENT_TYPE(5,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(5,1)  5 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(5,1) 741.3236103 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1) 179.9995882 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)       1005 ; NE Loop, CCW, 1005
OPT_PATH_START(6)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(6) 781.5222866 ; m ! CALC -- Lap distance for this path
! HEADING_START(6) -90 ; deg ! Heading at the start of this path
! X_PATH_START(6) 146.342 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(6) 300 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        1 ! Number of segments in this path
SEGMENT_TYPE(6,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(6,1)  6 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(6,1) 781.5222866 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 146.342 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) 300 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1) -90 ; deg ! CALC -- Heading at end of segment

PATH_ID(7)       1006 ; SE Loop, CW, 1006
OPT_PATH_START(7)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(7)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(7)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(7) 741.2960965 ; m ! CALC -- Lap distance for this path
! HEADING_START(7) 89.9995882 ; deg ! Heading at the start of this path
! X_PATH_START(7) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(7)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(7)        1 ! Number of segments in this path
SEGMENT_TYPE(7,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(7,1)  7 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(7,1) 741.2960965 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,1) 153.658 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,1) 89.9995882 ; deg ! CALC -- Heading at end of segment

PATH_ID(8)       1007 ; SE Loop, CCW, 1007
OPT_PATH_START(8)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(8)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(8)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(8) 781.5222866 ; m ! CALC -- Lap distance for this path
! HEADING_START(8) 180 ; deg ! Heading at the start of this path
! X_PATH_START(8) 300 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(8) 153.658 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(8)        1 ! Number of segments in this path
SEGMENT_TYPE(8,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(8,1)  8 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(8,1) 781.5222866 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,1) 180 ; deg ! CALC -- Heading at end of segment

PATH_ID(9)       1008 ; E Loop, CW, 1008
OPT_PATH_START(9)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(9)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(9)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(9) 1124.589355 ; m ! CALC -- Lap distance for this path
! HEADING_START(9) 89.9995882 ; deg ! Heading at the start of this path
! X_PATH_START(9) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(9)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(9)        1 ! Number of segments in this path
SEGMENT_TYPE(9,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(9,1)  9 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(9,1) 1124.589355 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(9,1) 153.658 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(9,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(9,1) 89.9995882 ; deg ! CALC -- Heading at end of segment

PATH_ID(10)      1009 ; W Loop, CW, 1009
OPT_PATH_START(10)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(10)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(10)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(10) 1124.589355 ; m ! CALC -- Lap distance for this path
! HEADING_START(10) -90.0004118 ; deg ! Heading at the start of this path
! X_PATH_START(10) 146.342 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(10) 300 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(10)       1 ! Number of segments in this path
SEGMENT_TYPE(10,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(10,1) 10 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(10,1) 1124.589355 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(10,1) 146.342 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(10,1) 300 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(10,1) -90.0004118 ; deg ! CALC -- Heading at end of segment

PATH_ID(11)      1010 ; N Loop, CW, 1010
OPT_PATH_START(11)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(11)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(11)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(11) 1124.589357 ; m ! CALC -- Lap distance for this path
! HEADING_START(11) 179.9995882 ; deg ! Heading at the start of this path
! X_PATH_START(11) 300 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(11) 153.658 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(11)       1 ! Number of segments in this path
SEGMENT_TYPE(11,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(11,1) 11 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(11,1) 1124.589357 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(11,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(11,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(11,1) 179.9995882 ; deg ! CALC -- Heading at end of segment

PATH_ID(12)      1011 ; S Loop, CW, 1011
OPT_PATH_START(12)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(12)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(12)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(12) 1124.589352 ; m ! CALC -- Lap distance for this path
! HEADING_START(12) -0.0004118043427 ; deg ! Heading at the start of this path
! X_PATH_START(12)  0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(12) 146.342 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(12)       1 ! Number of segments in this path
SEGMENT_TYPE(12,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(12,1) 12 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(12,1) 1124.589352 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(12,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(12,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(12,1) -0.0004118043427 ; deg ! CALC -- Heading at end of segment

PATH_ID(13)      1012 ; E Loop, CCW, 1012
OPT_PATH_START(13)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(13)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(13)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(13) 1166.686228 ; m ! CALC -- Lap distance for this path
! HEADING_START(13) -90 ; deg ! Heading at the start of this path
! X_PATH_START(13) 146.342 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(13) 300 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(13)       1 ! Number of segments in this path
SEGMENT_TYPE(13,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(13,1) 13 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(13,1) 1166.686228 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(13,1) 146.342 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(13,1) 300 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(13,1) -90 ; deg ! CALC -- Heading at end of segment

PATH_ID(14)      1013 ; W Loop, CCW, 1013
OPT_PATH_START(14)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(14)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(14)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(14) 1166.684321 ; m ! CALC -- Lap distance for this path
! HEADING_START(14) 90 ; deg ! Heading at the start of this path
! X_PATH_START(14) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(14)  0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(14)       1 ! Number of segments in this path
SEGMENT_TYPE(14,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(14,1) 14 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(14,1) 1166.684321 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(14,1) 153.658 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(14,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(14,1) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(15)      1014 ; N Loop, CCW, 1014
OPT_PATH_START(15)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(15)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(15)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(15) 1166.686228 ; m ! CALC -- Lap distance for this path
! HEADING_START(15) 0 ; deg ! Heading at the start of this path
! X_PATH_START(15)  0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(15) 146.342 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(15)       1 ! Number of segments in this path
SEGMENT_TYPE(15,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(15,1) 15 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(15,1) 1166.686228 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(15,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(15,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(15,1) 0 ; deg ! CALC -- Heading at end of segment

PATH_ID(16)      1015 ; S Loop, CCW, 1015
OPT_PATH_START(16)  0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(16)   1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(16)     0 ; m ! [D] Station at the start of this path
! SPATH_LAP(16) 1166.684321 ; m ! CALC -- Lap distance for this path
! HEADING_START(16) 180 ; deg ! Heading at the start of this path
! X_PATH_START(16) 300 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(16) 153.658 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(16)       1 ! Number of segments in this path
SEGMENT_TYPE(16,1)  1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(16,1) 16 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(16,1) 1166.684321 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(16,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(16,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(16,1) 180 ; deg ! CALC -- Heading at end of segment

PATH_ID(17)      9998 ; Straight North, ID = 9998
OPT_PATH_START(17)  1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(17)   0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(17)     0 ; m ! Station at the start of this path
HEADING_START(17)  90 ; deg ! Heading at the start of this path
X_PATH_START(17)    0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(17)    0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(17)       1 ! Number of segments in this path
SEGMENT_TYPE(17,1)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(17,1) 100 ; m ! Segment length
! S_SEGMENT_END(17,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(17,1) 6.123233996e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(17,1) 100 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(17,1) 90 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! A VS Terrain surface defines elevation Z, friction MU, and rolling resistance
! RR_SURF as functions of global X and Y coordinates. The terrain data is contained
! in a single vsterrain file loaded with the command VS_TERRAIN_FILE.

CURRENT_ROAD_ID(1)  1 ! [D] ROAD_ID during initialization, vehicle 1 [I]
CURRENT_ROAD_ID(2)  1 ! [D] ROAD_ID during initialization, vehicle 2 [I]
CURRENT_ROAD_ID(3)  1 ! [D] ROAD_ID during initialization, vehicle 3 [I]
CURRENT_ROAD_ID(4)  1 ! [D] ROAD_ID during initialization, vehicle 4 [I]

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             4 ! Number of LTARG datasets that are used in this run

PATH_ID_DM(1)    1013 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(1)      1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0), vehicle 1
OPT_INIT_PATH(1)    1 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_INIT_STA_ROAD(1) 1 ! [D] Find vehicle road station "Sta_Road" automatically when
                       ! the reference path for CURRENT_ROAD_ID is not PATH_ID_DM?
                       ! 1 -> yes, 0 -> no, vehicle 1 [I]
OPT_DIRECTION(1)    1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station, vehicle 1 [I]
SSTART(1)         -40 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]

OPT_DM(1)           3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point, vehicle 1 [I]
OPT_DRIVER_ACTION(1) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ(1)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(1)    720 ; deg ! Limit steering wheel angle for DM, vehicle 1
AV_SW_MAX_DM(1)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 1
VLOW_DM(1)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(1)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(1)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(1)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(1)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(2)    1004 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(2)      2 ! LTARG_ID of LTARG for the DM, vehicle 2
OPT_INIT_PATH(2)    1 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(2) 1 ! [D] Find road station automatically, vehicle 2 [I]
OPT_DIRECTION(2)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 2 [I]
SSTART(2)         110 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(2)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 2 [I]
OPT_DRIVER_ACTION(2) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(2)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(2)    720 ; deg ! Limit steering wheel angle for DM, vehicle 2
AV_SW_MAX_DM(2)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 2
VLOW_DM(2)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(2)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(2)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(2)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(2)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(3)    1003 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(3)      3 ! LTARG_ID of LTARG for the DM, vehicle 3
OPT_INIT_PATH(3)    1 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(3) 1 ! [D] Find road station automatically, vehicle 3 [I]
OPT_DIRECTION(3)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 3 [I]
SSTART(3)          50 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(3)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 3 [I]
OPT_DRIVER_ACTION(3) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(3)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(3)    720 ; deg ! Limit steering wheel angle for DM, vehicle 3
AV_SW_MAX_DM(3)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 3
VLOW_DM(3)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(3)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(3)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(3)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(3)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(4)    1010 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(4)      4 ! LTARG_ID of LTARG for the DM, vehicle 4
OPT_INIT_PATH(4)    1 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(4) 1 ! [D] Find road station automatically, vehicle 4 [I]
OPT_DIRECTION(4)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 4 [I]
SSTART(4)         -50 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(4)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 4 [I]
OPT_DRIVER_ACTION(4) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(4)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(4)    720 ; deg ! Limit steering wheel angle for DM, vehicle 4
AV_SW_MAX_DM(4)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 4
VLOW_DM(4)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(4)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(4)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(4)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(4)          0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      5 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC(1)           4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd, vehicle 1 [I]
OPT_AUTO_RESET_IC(1) 1 ! Reset integral of speed error Vx_Err when Vx_Err changes
                       ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no,
                       ! vehicle 1
OPT_SC_3D(1)        0 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL(1)     2 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING(1) 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018(1)      0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC(1)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 1 [I]
BK_PERF_SC(1)    0.15 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(1)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(1) 4 ; m ! Speed controller: length of path used to calculate
                       ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP(1)       0.3 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(1)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(1)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(1)   80 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(1) 0 ; m ! Speed controller: path preview start (distance in
                         ! front of sprung mass origin), vehicle 1 [I]
SPEED_PREVIEW_STEP(1) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(1)  2 ; m ! Integral control deadband for auto reset

OPT_SC(2)           4 ! Speed controller option: 0 - 5, vehicle 2 [I]
OPT_AUTO_RESET_IC(2) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 2
OPT_SC_3D(2)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(2)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(2) 1 ! Use engine braking in SC?
OPT_SC_2018(2)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(2)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 2 [I]
BK_PERF_SC(2)    0.15 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(2)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(2) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(2)       0.3 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(2)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(2)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(2)   80 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(2) 0 ; m ! Path preview start (front of Xo), vehicle 2 [I]
SPEED_PREVIEW_STEP(2) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(2)  2 ; m ! Integral control deadband for auto reset

OPT_SC(3)           4 ! Speed controller option: 0 - 5, vehicle 3 [I]
OPT_AUTO_RESET_IC(3) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 3
OPT_SC_3D(3)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(3)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(3) 1 ! Use engine braking in SC?
OPT_SC_2018(3)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(3)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 3 [I]
BK_PERF_SC(3)    0.15 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(3)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(3) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(3)       0.3 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(3)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(3)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(3)   80 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(3) 0 ; m ! Path preview start (front of Xo), vehicle 3 [I]
SPEED_PREVIEW_STEP(3) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(3)  2 ; m ! Integral control deadband for auto reset

OPT_SC(4)           4 ! Speed controller option: 0 - 5, vehicle 4 [I]
OPT_AUTO_RESET_IC(4) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 4
OPT_SC_3D(4)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(4)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(4) 1 ! Use engine braking in SC?
OPT_SC_2018(4)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(4)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 4 [I]
BK_PERF_SC(4)    0.15 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(4)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(4) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(4)       0.3 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(4)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(4)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(4)   80 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(4) 0 ; m ! Path preview start (front of Xo), vehicle 4 [I]
SPEED_PREVIEW_STEP(4) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(4)  2 ; m ! Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           4 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      4 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; 160 Deg Sensor
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)      -925 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      1300 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(2)      2 ; 160 Deg Sensor
IOBJECT_SENSOR(2)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(2)     2 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(2) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(2) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(2) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(2) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(2)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(2) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(2) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(2) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(2)      -925 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(2)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(2)      1300 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(2)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(2) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(2)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(3)      3 ; 160 Deg Sensor
IOBJECT_SENSOR(3)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(3)     3 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(3) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(3) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(3) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(3) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(3)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(3) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(3) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(3) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(3)      -925 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(3)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(3)      1300 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(3)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(3) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(3)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(4)      4 ; 160 Deg Sensor
IOBJECT_SENSOR(4)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(4)     4 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(4) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(4) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(4) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(4) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(4)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(4) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(4) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(4) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(4)      -925 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(4)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(4)      1300 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(4)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(4) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(4)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT          17 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 17 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; IUNIT_OBJ
IUNIT_OBJ(1)        1 ! Attach object to sprung mass of this vehicle unit, or 0 ->
                      ! don't attach to a sprung mass [I]
SHAPE_TYPE_OBJ(1)   1 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
H_OBJ(1)         1.24 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)       3 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(1)   0.4 ; m ! Distance from reference point to front of rectangular
                      ! object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)      1.8 ; m ! Width of rectangular object
MsgObj_1            4 ; - ! Output: User-defined Message (code) for object
TypeO_1           200 ; - ! Output: User-defined Type (code) for object
V_Obj_1   18.59986243 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1   153.5751003 ; m ! Output: X coordinate of object 1
Y_Obj_1  -40.00091369 ; m ! Output: Y coordinate of object 1
Z_Obj_1  0.6219453393 ; m ! Output: Z coordinate of object 1
YawO_1    83.17894417 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO1  0.2684847847 ; deg ! Output: Pitch angle of object 1
RollO_1 -3.274680039e-06 ; deg ! Output: Roll angle of object 1

OBJECT_NAME(2)      2 ; City Intersection, Stop Sign
IUNIT_OBJ(2)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(2)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(2)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(2)   2 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)    0.01 ; m ! Length of rectangular or segment object
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
VIS_ANGLE_OBJ(2)  100 ; deg ! Visibility tolerance of angle to viewing sensor
MsgObj_2            3 ; - ! Output: User-defined Message (code) for object
TypeO_2           101 ; - ! Output: User-defined Type (code) for object
V_Obj_2             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2        155.75 ; m ! Output: X coordinate of object 2
Y_Obj_2        138.25 ; m ! Output: Y coordinate of object 2
Z_Obj_2             0 ; m ! Output: Z coordinate of object 2
YawO_2            -90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO2             0 ; deg ! Output: Pitch angle of object 2
RollO_2             0 ; deg ! Output: Roll angle of object 2

OBJECT_NAME(3)      3 ; City Intersection, Stop Sign
IUNIT_OBJ(3)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(3)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(3)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(3)   2 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)    0.01 ; m ! Length of rectangular or segment object
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
VIS_ANGLE_OBJ(3)  100 ; deg ! Visibility tolerance of angle to viewing sensor
MsgObj_3            3 ; - ! Output: User-defined Message (code) for object
TypeO_3           101 ; - ! Output: User-defined Type (code) for object
V_Obj_3             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3        144.25 ; m ! Output: X coordinate of object 3
Y_Obj_3        161.75 ; m ! Output: Y coordinate of object 3
Z_Obj_3             0 ; m ! Output: Z coordinate of object 3
YawO_3             90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO3             0 ; deg ! Output: Pitch angle of object 3
RollO_3             0 ; deg ! Output: Roll angle of object 3

OBJECT_NAME(4)      4 ; Woman: City Environment
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)   9998 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(4)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(4)    0 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_RECYCLE_OBJ(4)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(4)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   0 ! Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    0 ! Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(4)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(4)   0.4 ; m ! Diameter of cylinder object
H_OBJ(4)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(4) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_4             0 ; deg ! Output: Heading of object relative to path
LatO_4           -141 ; m ! Output: Lateral offset, object 4
MsgObj_4            3 ; - ! Output: User-defined Message (code) for object
S_Obj_4           142 ; m ! Output and possibly ODE SV: Station of object
S_RdO_4           141 ; m ! Output: Station of object on road path
TypeO_4           201 ; - ! Output: User-defined Type (code) for object
V_Obj_4             0 ; km/h ! Output and possibly ODE SV: Speed of object
PitchO4             0 ; deg ! Output: Pitch angle of object 4
RollO_4             0 ; deg ! Output: Roll angle of object 4

OBJECT_NAME(5)      5 ; Man: City Environment
IUNIT_OBJ(5)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(5)   9998 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(5)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(5)    0 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_RECYCLE_OBJ(5)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(5)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(5)   0 ! Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(5)    0 ! Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(5)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(5)   0.4 ; m ! Diameter of cylinder object
H_OBJ(5)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(5) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(5)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_5            90 ; deg ! Output: Heading of object relative to path
LatO_5           -178 ; m ! Output: Lateral offset, object 5
MsgObj_5            3 ; - ! Output: User-defined Message (code) for object
S_Obj_5           141 ; m ! Output and possibly ODE SV: Station of object
S_RdO_5           178 ; m ! Output: Station of object on road path
TypeO_5           201 ; - ! Output: User-defined Type (code) for object
V_Obj_5             0 ; km/h ! Output and possibly ODE SV: Speed of object
PitchO5             0 ; deg ! Output: Pitch angle of object 5
RollO_5             0 ; deg ! Output: Roll angle of object 5

OBJECT_NAME(6)      6 ; Bicyclist: City Environment
IUNIT_OBJ(6)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(6)   9998 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(6)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(6)    0 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_RECYCLE_OBJ(6)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(6)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(6)   0 ! Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(6)    0 ! Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(6)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(6)         0.95 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(6)       2 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(6)   1.1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(6) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(6)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(6)      0.6 ; m ! Width of rectangular object
HeadO_6             0 ; deg ! Output: Heading of object relative to path
LatO_6           -155 ; m ! Output: Lateral offset, object 6
MsgObj_6            0 ; - ! Output: User-defined Message (code) for object
S_Obj_6            65 ; m ! Output and possibly ODE SV: Station of object
S_RdO_6           155 ; m ! Output: Station of object on road path
TypeO_6           201 ; - ! Output: User-defined Type (code) for object
V_Obj_6             0 ; km/h ! Output and possibly ODE SV: Speed of object
PitchO6             0 ; deg ! Output: Pitch angle of object 6
RollO_6             0 ; deg ! Output: Roll angle of object 6

OBJECT_NAME(7)      7 ; City Environment: Building
IUNIT_OBJ(7)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(7)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(7)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(7)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(7)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(7) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(7) 1 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(7)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(7) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(7)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_7            0 ; - ! Output: User-defined Message (code) for object
TypeO_7           151 ; - ! Output: User-defined Type (code) for object
V_Obj_7             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_7           150 ; m ! Output: X coordinate of object 7
Y_Obj_7           150 ; m ! Output: Y coordinate of object 7
Z_Obj_7             0 ; m ! Output: Z coordinate of object 7
YawO_7              0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO7             0 ; deg ! Output: Pitch angle of object 7
RollO_7             0 ; deg ! Output: Roll angle of object 7

OBJECT_NAME(8)      8 ; City Environment: Building
IUNIT_OBJ(8)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(8)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(8)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(8)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(8)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(8) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(8) 2 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(8)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(8) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(8)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_8            0 ; - ! Output: User-defined Message (code) for object
TypeO_8           151 ; - ! Output: User-defined Type (code) for object
V_Obj_8             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_8           150 ; m ! Output: X coordinate of object 8
Y_Obj_8           150 ; m ! Output: Y coordinate of object 8
Z_Obj_8             0 ; m ! Output: Z coordinate of object 8
YawO_8             90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO8             0 ; deg ! Output: Pitch angle of object 8
RollO_8             0 ; deg ! Output: Roll angle of object 8

OBJECT_NAME(9)      9 ; City Environment: Building
IUNIT_OBJ(9)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(9)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(9)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(9)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(9)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(9) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(9) 3 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(9)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(9) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(9)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_9            0 ; - ! Output: User-defined Message (code) for object
TypeO_9           151 ; - ! Output: User-defined Type (code) for object
V_Obj_9             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_9           150 ; m ! Output: X coordinate of object 9
Y_Obj_9           150 ; m ! Output: Y coordinate of object 9
Z_Obj_9             0 ; m ! Output: Z coordinate of object 9
YawO_9            180 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO9             0 ; deg ! Output: Pitch angle of object 9
RollO_9             0 ; deg ! Output: Roll angle of object 9

OBJECT_NAME(10)    10 ; City Environment: Building
IUNIT_OBJ(10)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(10)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(10)     0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(10)  3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(10)  1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(10) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(10) 4 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(10)          -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(10) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(10)     1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_10           0 ; - ! Output: User-defined Message (code) for object
TypeO_10          151 ; - ! Output: User-defined Type (code) for object
V_Obj_10            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_10          150 ; m ! Output: X coordinate of object 10
Y_Obj_10          150 ; m ! Output: Y coordinate of object 10
Z_Obj_10            0 ; m ! Output: Z coordinate of object 10
YawO_10           270 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO10            0 ; deg ! Output: Pitch angle of object 10
RollO_10            0 ; deg ! Output: Roll angle of object 10

OBJECT_NAME(11)    11 ; One External Vehicle
IUNIT_OBJ(11)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(11)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(11)     0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(11)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(11)      -1.575 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(11)    4.7 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(11)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(11) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(11)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(11)     2.1 ; m ! Width of rectangular object
MsgObj_11           0 ; - ! Output: User-defined Message (code) for object
TypeO_11          200 ; - ! Output: User-defined Type (code) for object
V_Obj_11            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_11            0 ; m ! Output: X coordinate of object 11
Y_Obj_11            0 ; m ! Output: Y coordinate of object 11
Z_Obj_11            0 ; m ! Output: Z coordinate of object 11
YawO_11             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO11            0 ; deg ! Output: Pitch angle of object 11
RollO_11            0 ; deg ! Output: Roll angle of object 11

OBJECT_NAME(12)    12 ; One External Vehicle
IUNIT_OBJ(12)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(12)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(12)     0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(12)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(12)      -1.575 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(12)    4.7 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(12)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(12) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(12)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(12)     2.1 ; m ! Width of rectangular object
MsgObj_12           0 ; - ! Output: User-defined Message (code) for object
TypeO_12          200 ; - ! Output: User-defined Type (code) for object
V_Obj_12            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_12            0 ; m ! Output: X coordinate of object 12
Y_Obj_12            0 ; m ! Output: Y coordinate of object 12
Z_Obj_12            0 ; m ! Output: Z coordinate of object 12
YawO_12             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO12            0 ; deg ! Output: Pitch angle of object 12
RollO_12            0 ; deg ! Output: Roll angle of object 12

OBJECT_NAME(13)    13 ; One External Vehicle
IUNIT_OBJ(13)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(13)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(13)     0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(13)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(13)      -1.575 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(13)    4.7 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(13)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(13) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(13)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(13)     2.1 ; m ! Width of rectangular object
MsgObj_13           0 ; - ! Output: User-defined Message (code) for object
TypeO_13          200 ; - ! Output: User-defined Type (code) for object
V_Obj_13            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_13            0 ; m ! Output: X coordinate of object 13
Y_Obj_13            0 ; m ! Output: Y coordinate of object 13
Z_Obj_13            0 ; m ! Output: Z coordinate of object 13
YawO_13             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO13            0 ; deg ! Output: Pitch angle of object 13
RollO_13            0 ; deg ! Output: Roll angle of object 13

OBJECT_NAME(14)    14 ; One External Vehicle
IUNIT_OBJ(14)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(14)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(14)     0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(14)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(14)      -1.575 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(14)    4.7 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(14)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(14) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(14)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(14)     2.1 ; m ! Width of rectangular object
MsgObj_14           0 ; - ! Output: User-defined Message (code) for object
TypeO_14          200 ; - ! Output: User-defined Type (code) for object
V_Obj_14            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_14            0 ; m ! Output: X coordinate of object 14
Y_Obj_14            0 ; m ! Output: Y coordinate of object 14
Z_Obj_14            0 ; m ! Output: Z coordinate of object 14
YawO_14             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO14            0 ; deg ! Output: Pitch angle of object 14
RollO_14            0 ; deg ! Output: Roll angle of object 14

OBJECT_NAME(15)    15 ; IUNIT_OBJ
IUNIT_OBJ(15)       2 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(15)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(15)       1.714 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(15)    5.5 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(15)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(15) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(15)     1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(15)   2.176 ; m ! Width of rectangular object
MsgObj_15           4 ; - ! Output: User-defined Message (code) for object
TypeO_15          200 ; - ! Output: User-defined Type (code) for object
V_Obj_15           40 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_15  189.9998885 ; m ! Output: X coordinate of object 15
Y_Obj_15  153.6373052 ; m ! Output: Y coordinate of object 15
Z_Obj_15 0.8581364858 ; m ! Output: Z coordinate of object 15
YawO_15  -179.8036149 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO15 0.2701424574 ; deg ! Output: Pitch angle of object 15
RollO_15 -6.794721786e-09 ; deg ! Output: Roll angle of object 15

OBJECT_NAME(16)    16 ; IUNIT_OBJ
IUNIT_OBJ(16)       3 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(16)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(16)        1.08 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(16)    3.3 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(16)  0.8 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(16) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(16)     1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(16)   1.718 ; m ! Width of rectangular object
MsgObj_16           4 ; - ! Output: User-defined Message (code) for object
TypeO_16          200 ; - ! Output: User-defined Type (code) for object
V_Obj_16           40 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_16           50 ; m ! Output: X coordinate of object 16
Y_Obj_16      146.342 ; m ! Output: Y coordinate of object 16
Z_Obj_16 0.5057510864 ; m ! Output: Z coordinate of object 16
YawO_16             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO16 0.4878115277 ; deg ! Output: Pitch angle of object 16
RollO_16 -1.655987367e-06 ; deg ! Output: Roll angle of object 16

OBJECT_NAME(17)    17 ; IUNIT_OBJ
IUNIT_OBJ(17)       4 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(17)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(17)       1.582 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(17)      4 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(17)  0.5 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(17) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(17)     1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(17)   1.704 ; m ! Width of rectangular object
MsgObj_17           4 ; - ! Output: User-defined Message (code) for object
TypeO_17          200 ; - ! Output: User-defined Type (code) for object
V_Obj_17  14.55565645 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_17  346.3317017 ; m ! Output: X coordinate of object 17
Y_Obj_17  160.4775167 ; m ! Output: Y coordinate of object 17
Z_Obj_17 0.8037604312 ; m ! Output: Z coordinate of object 17
YawO_17  -92.81127546 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO17 0.1877215537 ; deg ! Output: Pitch angle of object 17
RollO_17 -3.264074955e-06 ; deg ! Output: Roll angle of object 17

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   0 ! [D] ABS control option, unit 1, axle 1: 0 -> No ABS, 1->
                      ! Single control channel for axle, 2 -> Independent control
                      ! channels for each wheel

OPT_ABS_CTRL(1,2)   0 ! [D] ABS control option, unit 1, axle 2

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1) 0.12 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.17 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   2 ! ABS control option, unit 3, axle 1
ABS_SLIP_ON(3,1) 0.09 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,1) 0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,1)       2 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,2)   2 ! ABS control option, unit 3, axle 2
ABS_SLIP_ON(3,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,2)       2 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,1)   0 ! ABS control option, unit 4, axle 1

OPT_ABS_CTRL(4,2)   0 ! ABS control option, unit 4, axle 2

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 16 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, 5.44524
 -135, 4.65501
 -120, 3.92781
 -105, 3.25928
 -90, 2.64586
 -75, 2.08471
 -60, 1.5736
 -45, 1.11074
 -30, 0.694784
 -15, 0.32476
 0, 0
 15, -0.279867
 30, -0.514945
 45, -0.705085
 60, -0.849884
 75, -0.948682
 90, -1.00053
 105, -1.00416
 120, -0.957857
 135, -0.85927
 150, -0.705008
ENDTABLE
CAMBER_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, 5.44524
 -135, 4.65501
 -120, 3.92781
 -105, 3.25928
 -90, 2.64586
 -75, 2.08471
 -60, 1.5736
 -45, 1.11074
 -30, 0.694784
 -15, 0.32476
 0, 0
 15, -0.279867
 30, -0.514945
 45, -0.705085
 60, -0.849884
 75, -0.948682
 90, -1.00053
 105, -1.00416
 120, -0.957857
 135, -0.85927
 150, -0.705008
ENDTABLE
CAMBER_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, right side

CAMBER_CONSTANT(2,2,1) 0 ; deg ! [D] Constant camber component due to jounce, unit
                         ! 2, axle 2, left side
CAMBER_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber
CAMBER_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2,1) 1 ; - ! [D] Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 2, left side

CAMBER_CONSTANT(2,2,2) 0 ; deg ! [D] Constant camber component due to jounce, unit
                         ! 2, axle 2, right side
CAMBER_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber
CAMBER_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2,2) 1 ; - ! [D] Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 2, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 1, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,2,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,2,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 2, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(4,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(4,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(4,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(4,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 4, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(4,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(4,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(4,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(4,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 4, axle
                                             ! 1, right side

CAMBER_CONSTANT(4,2,1) 0 ; deg ! [D] Constant camber component due to jounce, unit
                         ! 4, axle 2, left side
CAMBER_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get camber
CAMBER_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(4,2,1) 1 ; - ! [D] Constant camber component due
                                             ! to jounce (other side), unit 4, axle
                                             ! 2, left side

CAMBER_CONSTANT(4,2,2) 0 ; deg ! [D] Constant camber component due to jounce, unit
                         ! 4, axle 2, right side
CAMBER_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get camber
CAMBER_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(4,2,2) 1 ; - ! [D] Constant camber component due
                                             ! to jounce (other side), unit 4, axle
                                             ! 2, right side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CC_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CC_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CC_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CC_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CC_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CC_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CD_MY_COEFFICIENT(1,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CD_MY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CD_MY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CD_MY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CD_MY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CD_MY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CD_MY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_CONSTANT(2,2,1) 0 ; deg ! [D] Constant dive displacement, unit 2, axle 2, left
                        ! side
CD_MY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement

CD_MY_CONSTANT(2,2,2) 0 ; deg ! [D] Constant dive displacement, unit 2, axle 2,
                        ! right side
CD_MY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement

CD_MY_COEFFICIENT(3,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CD_MY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(3,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CD_MY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(3,2,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CD_MY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,2,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(3,2,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CD_MY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,2,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(4,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CD_MY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(4,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(4,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CD_MY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(4,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_CONSTANT(4,2,1) 0 ; deg ! [D] Constant dive displacement, unit 4, axle 2, left
                        ! side
CD_MY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement

CD_MY_CONSTANT(4,2,2) 0 ; deg ! [D] Constant dive displacement, unit 4, axle 2,
                        ! right side
CD_MY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 5e-05 ! Coefficient: inclination displacement per unit
                               ! force (deg/N), unit 2, axle 1, left side
CI_FY_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 5e-05 ! Coefficient: inclination displacement per unit
                               ! force (deg/N), unit 2, axle 1, right side
CI_FY_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0.00014 ! Coefficient: inclination displacement per unit
                                 ! force (deg/N), unit 3, axle 1, left side
CI_FY_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0.00014 ! Coefficient: inclination displacement per unit
                                 ! force (deg/N), unit 3, axle 1, right side
CI_FY_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,1) -0.00032 ! Coefficient: inclination displacement per unit
                                  ! force (deg/N), unit 3, axle 2, left side
CI_FY_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,2) -0.00032 ! Coefficient: inclination displacement per unit
                                  ! force (deg/N), unit 3, axle 2, right side
CI_FY_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CI_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CI_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CI_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CI_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) -5.3e-05 ! Coefficient: inclination displacement per unit
                                  ! moment (deg/N-m), unit 2, axle 1, left side
CI_MZ_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) -5.3e-05 ! Coefficient: inclination displacement per unit
                                  ! moment (deg/N-m), unit 2, axle 1, right side
CI_MZ_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) -0.000275 ! Coefficient: inclination displacement per unit
                                   ! moment (deg/N-m), unit 3, axle 1, left side
CI_MZ_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) -0.000275 ! Coefficient: inclination displacement per unit
                                   ! moment (deg/N-m), unit 3, axle 1, right side
CI_MZ_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,1) -0.0005 ! Coefficient: inclination displacement per unit
                                 ! moment (deg/N-m), unit 3, axle 2, left side
CI_MZ_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,2) -0.0005 ! Coefficient: inclination displacement per unit
                                 ! moment (deg/N-m), unit 3, axle 2, right side
CI_MZ_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CI_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CI_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CI_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CI_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 12 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IVEHICLE and IDIFF are used to
! identify the dataset when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, front diff
CLUTCH_CONTROL_DIFF_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, front diff
CLUTCH_CONTROL_DIFF_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, rear diff
CLUTCH_CONTROL_DIFF_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, transfer case
CLUTCH_CONTROL_DIFF_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 3, rear diff
CLUTCH_CONTROL_DIFF_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(4,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 4, rear diff
CLUTCH_CONTROL_DIFF_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(4) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 80
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(4) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(4) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(4) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 12 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IDIFF are used to identify the
! dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1,1) 0 ; N-m ! [D] Constant available torque, veh 1,
                                   ! front diff
CLUTCH_TORQUE_DIFF_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,1) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! front diff
CLUTCH_TORQUE_DIFF_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,2) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! rear diff
CLUTCH_TORQUE_DIFF_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,3) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! transfer case
CLUTCH_TORQUE_DIFF_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3,2) 0 ; N-m ! [D] Constant available torque, veh 3,
                                   ! rear diff
CLUTCH_TORQUE_DIFF_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(4,2) 0 ; N-m ! [D] Constant available torque, veh 4,
                                   ! rear diff
CLUTCH_TORQUE_DIFF_OFFSET(4,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 0.945 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 0.945 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 0.611 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 0.611 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,1) 0.797 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 2, left side
CMP_DAMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,2) 0.797 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 2, right side
CMP_DAMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, left side
CMP_DAMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, right side
CMP_DAMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, left side
CMP_DAMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, right side
CMP_DAMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 0.945 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                   ! side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 0.945 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                   ! side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 0.611 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 0.611 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                   ! side
CMP_JSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                   ! side
CMP_JSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, left side
CMP_JSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, right side
CMP_JSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, left side
CMP_JSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, right side
CMP_JSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 0.965 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 0.965 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 0.945 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                   ! side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 0.945 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                   ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 0.611 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 0.611 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                   ! side
CMP_RSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                   ! side
CMP_RSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, left side
CMP_RSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, right
                               ! side
CMP_RSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, left side
CMP_RSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, right
                               ! side
CMP_RSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 0.959 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 1, left side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 0.959 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 1, right side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 0.942 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 2, left side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 0.942 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 1, axle
                                      ! 2, right side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 0.6111 ! Coefficient: lower spring seat movement per
                                       ! unit jounce at wheel (mm/mm), unit 2, axle
                                       ! 1, left side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 0.6111 ! Coefficient: lower spring seat movement per
                                       ! unit jounce at wheel (mm/mm), unit 2, axle
                                       ! 1, right side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 0.611 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 3, axle
                                      ! 1, left side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 0.611 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 3, axle
                                      ! 1, right side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,1) 0.797 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 3, axle
                                      ! 2, left side
CMP_SPR_SEAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,2) 0.797 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), unit 3, axle
                                      ! 2, right side
CMP_SPR_SEAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) -4.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 1, left side
CS_FY_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) -4.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 1, right side
CS_FY_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) -1.7e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 2, left side
CS_FY_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) -1.7e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 1, axle 2, right side
CS_FY_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) -3.2e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, left side
CS_FY_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) -3.2e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, right side
CS_FY_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) 5.6e-05 ! Coefficient: Steer displacement per unit force
                                 ! (deg/N), unit 2, axle 2, left side
CS_FY_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) 5.6e-05 ! Coefficient: Steer displacement per unit force
                                 ! (deg/N), unit 2, axle 2, right side
CS_FY_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) -1.4e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 1, left side
CS_FY_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) -1.4e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 1, right side
CS_FY_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,1) -8.3e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 2, left side
CS_FY_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,2) -8.3e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 2, right side
CS_FY_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 4, axle 1, left side
CS_FY_GAIN(4,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 4, axle 1, right side
CS_FY_GAIN(4,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CS_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CS_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 1.3e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 1.3e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 6.3e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_GAIN(1,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 6.3e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_GAIN(1,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0.00014 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0.00014 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) -0.00095 ! Coefficient: steer displacement per unit moment
                                  ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) -0.00095 ! Coefficient: steer displacement per unit moment
                                  ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 0.00064 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 0.00064 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,1) -0.00012 ! Coefficient: steer displacement per unit moment
                                  ! (deg/N-m), unit 3, axle 2, left side
CS_MZ_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,2) -0.00012 ! Coefficient: steer displacement per unit moment
                                  ! (deg/N-m), unit 3, axle 2, right side
CS_MZ_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 4, axle 1, left side
CS_MZ_GAIN(4,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 4, axle 1, right side
CS_MZ_GAIN(4,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CS_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CS_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 6.1e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 1, axle 1, left side
CT_FX_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 6.1e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 1, axle 1, right side
CT_FX_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) -1.9e-06 ! Coefficient: toe displacement per unit force
                                  ! (deg/N), unit 2, axle 1, left side
CT_FX_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) -1.9e-06 ! Coefficient: toe displacement per unit force
                                  ! (deg/N), unit 2, axle 1, right side
CT_FX_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 1.9e-06 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 3, axle 1, left side
CT_FX_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 1.9e-06 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 3, axle 1, right side
CT_FX_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,1) -6.3e-06 ! Coefficient: toe displacement per unit force
                                  ! (deg/N), unit 3, axle 2, left side
CT_FX_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,2) -6.3e-06 ! Coefficient: toe displacement per unit force
                                  ! (deg/N), unit 3, axle 2, right side
CT_FX_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 4, axle 1, left side
CT_FX_GAIN(4,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 4, axle 1, right side
CT_FX_GAIN(4,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CT_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CT_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 16 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 1, left side
C_LAT_GAIN(1,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 1, axle 1, right side
C_LAT_GAIN(1,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,1) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 2, left side
C_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,2) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 2, right side
C_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,1) 2.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, left side
C_LAT_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,2) 2.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, right side
C_LAT_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_CONSTANT(2,2,1) 0 ; mm ! [D] Constant lateral displacement, unit 2, axle 2,
                        ! left side
C_LAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement

C_LAT_CONSTANT(2,2,2) 0 ; mm ! [D] Constant lateral displacement, unit 2, axle 2,
                        ! right side
C_LAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement

C_LAT_COEFFICIENT(3,1,1) 1.6e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 1, left side
C_LAT_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(3,1,2) 1.6e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 1, right side
C_LAT_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(3,2,1) 9.4e-06 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 2, left side
C_LAT_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,2,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(3,2,2) 9.4e-06 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 2, right side
C_LAT_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,2,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(4,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 4, axle 1, left side
C_LAT_GAIN(4,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(4,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(4,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 4, axle 1, right side
C_LAT_GAIN(4,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(4,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_CONSTANT(4,2,1) 0 ; mm ! [D] Constant lateral displacement, unit 4, axle 2,
                        ! left side
C_LAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement

C_LAT_CONSTANT(4,2,2) 0 ; mm ! [D] Constant lateral displacement, unit 4, axle 2,
                        ! right side
C_LAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

C_LONG_COEFFICIENT(1,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 1, left side
C_LONG_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 1, axle 1, right side
C_LONG_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,1) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 2, left side
C_LONG_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,2) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 2, right side
C_LONG_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,1) 2e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, left side
C_LONG_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,2) 2e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, right side
C_LONG_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_CONSTANT(2,2,1) 0 ; mm ! [D] Constant X displacement, unit 2, axle 2, left
                         ! side
C_LONG_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get X displacement

C_LONG_CONSTANT(2,2,2) 0 ; mm ! [D] Constant X displacement, unit 2, axle 2, right
                         ! side
C_LONG_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get X displacement

C_LONG_COEFFICIENT(3,1,1) 1.2e-05 ! Coefficient: X displacement per unit force
                                  ! (mm/N), unit 3, axle 1, left side
C_LONG_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(3,1,2) 1.2e-05 ! Coefficient: X displacement per unit force
                                  ! (mm/N), unit 3, axle 1, right side
C_LONG_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(3,2,1) 3.6e-05 ! Coefficient: X displacement per unit force
                                  ! (mm/N), unit 3, axle 2, left side
C_LONG_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(3,2,2) 3.6e-05 ! Coefficient: X displacement per unit force
                                  ! (mm/N), unit 3, axle 2, right side
C_LONG_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(4,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 4, axle 1, left side
C_LONG_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(4,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(4,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 4, axle 1, right side
C_LONG_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(4,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_CONSTANT(4,2,1) 0 ; mm ! [D] Constant X displacement, unit 4, axle 2, left
                         ! side
C_LONG_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get X displacement

C_LONG_CONSTANT(4,2,2) 0 ; mm ! [D] Constant X displacement, unit 4, axle 2, right
                         ! side
C_LONG_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get X displacement

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 68 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IGEAR are used to identify the
! dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 679
 0.4, 679
 0.8, 1071
 1, 1071
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 1059
 0.4, 1059
 0.8, 1910
 1, 1910
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 1398
 0.4, 1398
 0.8, 2978
 1, 2978
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 1714
 0.4, 1714
 0.8, 3932
 1, 3932
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,1) LINEAR_FLAT ! vehicle 4, gear shift 1<->2
 0, 194.82
 0.1, 194.82
 0.2, 235.04
 0.3, 284.89
 0.4, 352.33
 0.5, 422.29
 0.6, 492.25
 0.7, 904.65
 1, 904.65
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,2) LINEAR_FLAT ! vehicle 4, gear shift 2<->3
 0, 194.82
 0.1, 194.82
 0.2, 235.04
 0.3, 284.89
 0.4, 352.33
 0.5, 422.29
 0.6, 492.25
 0.7, 904.65
 1, 904.65
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,3) LINEAR_FLAT ! vehicle 4, gear shift 3<->4
 0, 1314.4
 0.1, 1314.4
 0.2, 1510.6
 0.3, 1706.8
 0.4, 1903
 0.5, 2099.2
 0.6, 2295.4
 0.7, 2501.2
 0.8, 2776.7
 1, 2776.7
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,4) LINEAR_FLAT ! vehicle 4, gear shift 4<->5
 0, 3458.9
 0.2, 3458.9
 0.3, 3469.6
 0.4, 3480.3
 0.5, 3491
 0.6, 3501.8
 0.7, 3512.5
 0.8, 4339.1
 1, 4339.1
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(3,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(3,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(4,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(4,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(4,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(4,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 18 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 18 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 18 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 18 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(2,1,1) 146 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 146 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

FS_COMP_COEFFICIENT(2,2,1) 46 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, left side
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

FS_COMP_COEFFICIENT(2,2,2) 46 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, right side
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(3,1,1) 130.5 ! Coefficient: spring force per unit spring
                                 ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 130.5 ! Coefficient: spring force per unit spring
                                 ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

FS_COMP_COEFFICIENT(3,2,1) 91 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, left side
FS_COMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, left side

FS_COMP_COEFFICIENT(3,2,2) 91 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, right side
FS_COMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, right side

FS_COMP_COEFFICIENT(4,1,1) 35 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, left side
FS_COMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, left side

FS_COMP_COEFFICIENT(4,1,2) 35 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, right side
FS_COMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 18 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 18 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 18 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 18 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(2,1,1) 146 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 146 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

FS_EXT_COEFFICIENT(2,2,1) 46 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 2, axle 2, left side
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

FS_EXT_COEFFICIENT(2,2,2) 46 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 2, axle 2, right side
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(3,1,1) 130.5 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 130.5 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

FS_EXT_COEFFICIENT(3,2,1) 91 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 3, axle 2, left side
FS_EXT_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, left side

FS_EXT_COEFFICIENT(3,2,2) 91 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 3, axle 2, right side
FS_EXT_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, right side

FS_EXT_COEFFICIENT(4,1,1) 35 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 4, axle 1, left side
FS_EXT_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, left side

FS_EXT_COEFFICIENT(4,1,2) 35 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 4, axle 1, right side
FS_EXT_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

FUEL_RATE_CONSTANT(1) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(1)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(1) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(1) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(2) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(2)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(2) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(2) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(3) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(3)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(3) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(3) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(4) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(4)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(4) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(4) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFX

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FX_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFX2 component due to ride height

FX_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFX2 component due to ride height

FX_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CFX2 component due to ride height

FX_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.02, 497.65, 974.51, 1427.4, 1854.57, 2254.85, 2627.42, 2971.73, 3287.41
 0.04, 766.97, 1507.63, 2217.72, 2894.64, 3536.53, 4141.89, 4709.5, 5238.37
 0.06, 884.12, 1742.03, 2569.37, 3363.41, 4122.12, 4843.79, 5526.98, 6170.42
 0.08, 935.41, 1845.55, 2726.18, 3574.64, 4388.89, 5167.24, 5908.21, 6610.47
 0.1, 958.07, 1891.79, 2797.06, 3671.31, 4512.54, 5319.1, 6089.54, 6822.55
 0.12, 967.18, 1910.79, 2826.86, 3712.88, 4566.94, 5387.41, 6172.88, 6922.07
 0.14, 969.39, 1915.85, 2835.53, 3725.99, 4585.37, 5412.07, 6204.74, 6962.12
 0.16, 967.92, 1913.45, 2832.83, 3723.68, 4584.18, 5412.8, 6208.18, 6969.13
 0.18, 964.45, 1906.97, 2823.87, 3712.83, 4572.06, 5400.05, 6195.51, 6957.25
 0.2, 959.93, 1898.31, 2811.51, 3697.27, 4553.83, 5379.71, 6173.65, 6934.48
 0.22, 954.88, 1888.54, 2797.4, 3679.23, 4532.32, 5355.22, 6146.67, 6905.54
 0.24, 949.63, 1878.3, 2782.51, 3660.05, 4509.23, 5328.63, 6117.03, 6873.3
 0.26, 944.35, 1867.98, 2767.43, 3640.52, 4485.59, 5301.24, 6086.25, 6839.54
 0.28, 939.16, 1857.81, 2752.52, 3621.14, 4462.03, 5273.8, 6055.28, 6805.38
 0.3, 934.13, 1847.92, 2737.99, 3602.2, 4438.93, 5246.82, 6024.7, 6771.51
 0.32, 929.28, 1838.39, 2723.95, 3583.86, 4416.52, 5220.58, 5994.88, 6738.37
 0.34, 924.64, 1829.25, 2710.48, 3566.24, 4394.93, 5195.24, 5966.02, 6706.23
 0.36, 920.22, 1820.53, 2697.59, 3549.35, 4374.23, 5170.9, 5938.24, 6675.22
 0.38, 916.01, 1812.21, 2685.31, 3533.24, 4354.43, 5147.59, 5911.59, 6645.43
 0.4, 912.01, 1804.31, 2673.61, 3517.87, 4335.54, 5125.32, 5886.1, 6616.89
 0.42, 908.21, 1796.79, 2662.47, 3503.23, 4317.52, 5104.06, 5861.74, 6589.58
 0.44, 904.6, 1789.64, 2651.88, 3489.3, 4300.36, 5083.79, 5838.49, 6563.49
 0.46, 901.17, 1782.85, 2641.81, 3476.05, 4284.02, 5064.47, 5816.31, 6538.56
 0.48, 897.91, 1776.39, 2632.23, 3463.43, 4268.46, 5046.06, 5795.15, 6514.77
 0.5, 894.81, 1770.25, 2623.12, 3451.42, 4253.63, 5028.5, 5774.96, 6492.05
 0.52, 891.86, 1764.41, 2614.44, 3439.97, 4239.49, 5011.76, 5755.69, 6470.36
 0.54, 889.06, 1758.85, 2606.18, 3429.07, 4226.01, 4995.78, 5737.3, 6449.63
 0.56, 886.38, 1753.54, 2598.3, 3418.67, 4213.16, 4980.53, 5719.74, 6429.83
 0.58, 883.84, 1748.49, 2590.78, 3408.74, 4200.88, 4965.97, 5702.95, 6410.89
 0.6, 881.41, 1743.67, 2583.61, 3399.26, 4189.15, 4952.05, 5686.9, 6392.77
 0.62, 879.09, 1739.06, 2576.75, 3390.21, 4177.94, 4938.74, 5671.54, 6375.43
 0.64, 876.87, 1734.66, 2570.2, 3381.55, 4167.22, 4926, 5656.84, 6358.82
 0.66, 874.75, 1730.44, 2563.93, 3373.26, 4156.95, 4913.8, 5642.75, 6342.91
 0.68, 872.72, 1726.41, 2557.93, 3365.32, 4147.11, 4902.1, 5629.25, 6327.64
 0.7, 870.78, 1722.55, 2552.17, 3357.71, 4137.68, 4890.89, 5616.3, 6312.99
 0.72, 868.91, 1718.85, 2546.66, 3350.41, 4128.64, 4880.13, 5603.87, 6298.93
 0.74, 867.13, 1715.3, 2541.37, 3343.41, 4119.95, 4869.8, 5591.92, 6285.41
 0.76, 865.41, 1711.89, 2536.29, 3336.68, 4111.61, 4859.87, 5580.44, 6272.42
 0.78, 863.77, 1708.61, 2531.4, 3330.21, 4103.59, 4850.32, 5569.4, 6259.92
 0.8, 862.18, 1705.46, 2526.71, 3324, 4095.87, 4841.14, 5558.77, 6247.88
 0.82, 860.66, 1702.43, 2522.19, 3318.01, 4088.44, 4832.29, 5548.54, 6236.29
 0.84, 859.19, 1699.51, 2517.84, 3312.25, 4081.29, 4823.77, 5538.68, 6225.12
 0.86, 857.78, 1696.7, 2513.65, 3306.69, 4074.39, 4815.56, 5529.17, 6214.34
 0.88, 856.42, 1693.99, 2509.61, 3301.34, 4067.75, 4807.64, 5520, 6203.95
 0.9, 855.11, 1691.38, 2505.71, 3296.17, 4061.33, 4799.99, 5511.15, 6193.91
 0.92, 853.84, 1688.86, 2501.95, 3291.19, 4055.14, 4792.61, 5502.6, 6184.22
 0.94, 852.62, 1686.42, 2498.31, 3286.37, 4049.15, 4785.48, 5494.34, 6174.85
 0.96, 851.44, 1684.07, 2494.8, 3281.72, 4043.37, 4778.58, 5486.35, 6165.78
 0.98, 850.29, 1681.8, 2491.41, 3277.21, 4037.78, 4771.91, 5478.62, 6157.02
 1, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
 1.02, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.02, 497.65, 974.51, 1427.4, 1854.57, 2254.85, 2627.42, 2971.73, 3287.41
 0.04, 766.97, 1507.63, 2217.72, 2894.64, 3536.53, 4141.89, 4709.5, 5238.37
 0.06, 884.12, 1742.03, 2569.37, 3363.41, 4122.12, 4843.79, 5526.98, 6170.42
 0.08, 935.41, 1845.55, 2726.18, 3574.64, 4388.89, 5167.24, 5908.21, 6610.47
 0.1, 958.07, 1891.79, 2797.06, 3671.31, 4512.54, 5319.1, 6089.54, 6822.55
 0.12, 967.18, 1910.79, 2826.86, 3712.88, 4566.94, 5387.41, 6172.88, 6922.07
 0.14, 969.39, 1915.85, 2835.53, 3725.99, 4585.37, 5412.07, 6204.74, 6962.12
 0.16, 967.92, 1913.45, 2832.83, 3723.68, 4584.18, 5412.8, 6208.18, 6969.13
 0.18, 964.45, 1906.97, 2823.87, 3712.83, 4572.06, 5400.05, 6195.51, 6957.25
 0.2, 959.93, 1898.31, 2811.51, 3697.27, 4553.83, 5379.71, 6173.65, 6934.48
 0.22, 954.88, 1888.54, 2797.4, 3679.23, 4532.32, 5355.22, 6146.67, 6905.54
 0.24, 949.63, 1878.3, 2782.51, 3660.05, 4509.23, 5328.63, 6117.03, 6873.3
 0.26, 944.35, 1867.98, 2767.43, 3640.52, 4485.59, 5301.24, 6086.25, 6839.54
 0.28, 939.16, 1857.81, 2752.52, 3621.14, 4462.03, 5273.8, 6055.28, 6805.38
 0.3, 934.13, 1847.92, 2737.99, 3602.2, 4438.93, 5246.82, 6024.7, 6771.51
 0.32, 929.28, 1838.39, 2723.95, 3583.86, 4416.52, 5220.58, 5994.88, 6738.37
 0.34, 924.64, 1829.25, 2710.48, 3566.24, 4394.93, 5195.24, 5966.02, 6706.23
 0.36, 920.22, 1820.53, 2697.59, 3549.35, 4374.23, 5170.9, 5938.24, 6675.22
 0.38, 916.01, 1812.21, 2685.31, 3533.24, 4354.43, 5147.59, 5911.59, 6645.43
 0.4, 912.01, 1804.31, 2673.61, 3517.87, 4335.54, 5125.32, 5886.1, 6616.89
 0.42, 908.21, 1796.79, 2662.47, 3503.23, 4317.52, 5104.06, 5861.74, 6589.58
 0.44, 904.6, 1789.64, 2651.88, 3489.3, 4300.36, 5083.79, 5838.49, 6563.49
 0.46, 901.17, 1782.85, 2641.81, 3476.05, 4284.02, 5064.47, 5816.31, 6538.56
 0.48, 897.91, 1776.39, 2632.23, 3463.43, 4268.46, 5046.06, 5795.15, 6514.77
 0.5, 894.81, 1770.25, 2623.12, 3451.42, 4253.63, 5028.5, 5774.96, 6492.05
 0.52, 891.86, 1764.41, 2614.44, 3439.97, 4239.49, 5011.76, 5755.69, 6470.36
 0.54, 889.06, 1758.85, 2606.18, 3429.07, 4226.01, 4995.78, 5737.3, 6449.63
 0.56, 886.38, 1753.54, 2598.3, 3418.67, 4213.16, 4980.53, 5719.74, 6429.83
 0.58, 883.84, 1748.49, 2590.78, 3408.74, 4200.88, 4965.97, 5702.95, 6410.89
 0.6, 881.41, 1743.67, 2583.61, 3399.26, 4189.15, 4952.05, 5686.9, 6392.77
 0.62, 879.09, 1739.06, 2576.75, 3390.21, 4177.94, 4938.74, 5671.54, 6375.43
 0.64, 876.87, 1734.66, 2570.2, 3381.55, 4167.22, 4926, 5656.84, 6358.82
 0.66, 874.75, 1730.44, 2563.93, 3373.26, 4156.95, 4913.8, 5642.75, 6342.91
 0.68, 872.72, 1726.41, 2557.93, 3365.32, 4147.11, 4902.1, 5629.25, 6327.64
 0.7, 870.78, 1722.55, 2552.17, 3357.71, 4137.68, 4890.89, 5616.3, 6312.99
 0.72, 868.91, 1718.85, 2546.66, 3350.41, 4128.64, 4880.13, 5603.87, 6298.93
 0.74, 867.13, 1715.3, 2541.37, 3343.41, 4119.95, 4869.8, 5591.92, 6285.41
 0.76, 865.41, 1711.89, 2536.29, 3336.68, 4111.61, 4859.87, 5580.44, 6272.42
 0.78, 863.77, 1708.61, 2531.4, 3330.21, 4103.59, 4850.32, 5569.4, 6259.92
 0.8, 862.18, 1705.46, 2526.71, 3324, 4095.87, 4841.14, 5558.77, 6247.88
 0.82, 860.66, 1702.43, 2522.19, 3318.01, 4088.44, 4832.29, 5548.54, 6236.29
 0.84, 859.19, 1699.51, 2517.84, 3312.25, 4081.29, 4823.77, 5538.68, 6225.12
 0.86, 857.78, 1696.7, 2513.65, 3306.69, 4074.39, 4815.56, 5529.17, 6214.34
 0.88, 856.42, 1693.99, 2509.61, 3301.34, 4067.75, 4807.64, 5520, 6203.95
 0.9, 855.11, 1691.38, 2505.71, 3296.17, 4061.33, 4799.99, 5511.15, 6193.91
 0.92, 853.84, 1688.86, 2501.95, 3291.19, 4055.14, 4792.61, 5502.6, 6184.22
 0.94, 852.62, 1686.42, 2498.31, 3286.37, 4049.15, 4785.48, 5494.34, 6174.85
 0.96, 851.44, 1684.07, 2494.8, 3281.72, 4043.37, 4778.58, 5486.35, 6165.78
 0.98, 850.29, 1681.8, 2491.41, 3277.21, 4037.78, 4771.91, 5478.62, 6157.02
 1, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
 1.02, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
ENDTABLE
FX_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.02, 497.65, 974.51, 1427.4, 1854.57, 2254.85, 2627.42, 2971.73, 3287.41
 0.04, 766.97, 1507.63, 2217.72, 2894.64, 3536.53, 4141.89, 4709.5, 5238.37
 0.06, 884.12, 1742.03, 2569.37, 3363.41, 4122.12, 4843.79, 5526.98, 6170.42
 0.08, 935.41, 1845.55, 2726.18, 3574.64, 4388.89, 5167.24, 5908.21, 6610.47
 0.1, 958.07, 1891.79, 2797.06, 3671.31, 4512.54, 5319.1, 6089.54, 6822.55
 0.12, 967.18, 1910.79, 2826.86, 3712.88, 4566.94, 5387.41, 6172.88, 6922.07
 0.14, 969.39, 1915.85, 2835.53, 3725.99, 4585.37, 5412.07, 6204.74, 6962.12
 0.16, 967.92, 1913.45, 2832.83, 3723.68, 4584.18, 5412.8, 6208.18, 6969.13
 0.18, 964.45, 1906.97, 2823.87, 3712.83, 4572.06, 5400.05, 6195.51, 6957.25
 0.2, 959.93, 1898.31, 2811.51, 3697.27, 4553.83, 5379.71, 6173.65, 6934.48
 0.22, 954.88, 1888.54, 2797.4, 3679.23, 4532.32, 5355.22, 6146.67, 6905.54
 0.24, 949.63, 1878.3, 2782.51, 3660.05, 4509.23, 5328.63, 6117.03, 6873.3
 0.26, 944.35, 1867.98, 2767.43, 3640.52, 4485.59, 5301.24, 6086.25, 6839.54
 0.28, 939.16, 1857.81, 2752.52, 3621.14, 4462.03, 5273.8, 6055.28, 6805.38
 0.3, 934.13, 1847.92, 2737.99, 3602.2, 4438.93, 5246.82, 6024.7, 6771.51
 0.32, 929.28, 1838.39, 2723.95, 3583.86, 4416.52, 5220.58, 5994.88, 6738.37
 0.34, 924.64, 1829.25, 2710.48, 3566.24, 4394.93, 5195.24, 5966.02, 6706.23
 0.36, 920.22, 1820.53, 2697.59, 3549.35, 4374.23, 5170.9, 5938.24, 6675.22
 0.38, 916.01, 1812.21, 2685.31, 3533.24, 4354.43, 5147.59, 5911.59, 6645.43
 0.4, 912.01, 1804.31, 2673.61, 3517.87, 4335.54, 5125.32, 5886.1, 6616.89
 0.42, 908.21, 1796.79, 2662.47, 3503.23, 4317.52, 5104.06, 5861.74, 6589.58
 0.44, 904.6, 1789.64, 2651.88, 3489.3, 4300.36, 5083.79, 5838.49, 6563.49
 0.46, 901.17, 1782.85, 2641.81, 3476.05, 4284.02, 5064.47, 5816.31, 6538.56
 0.48, 897.91, 1776.39, 2632.23, 3463.43, 4268.46, 5046.06, 5795.15, 6514.77
 0.5, 894.81, 1770.25, 2623.12, 3451.42, 4253.63, 5028.5, 5774.96, 6492.05
 0.52, 891.86, 1764.41, 2614.44, 3439.97, 4239.49, 5011.76, 5755.69, 6470.36
 0.54, 889.06, 1758.85, 2606.18, 3429.07, 4226.01, 4995.78, 5737.3, 6449.63
 0.56, 886.38, 1753.54, 2598.3, 3418.67, 4213.16, 4980.53, 5719.74, 6429.83
 0.58, 883.84, 1748.49, 2590.78, 3408.74, 4200.88, 4965.97, 5702.95, 6410.89
 0.6, 881.41, 1743.67, 2583.61, 3399.26, 4189.15, 4952.05, 5686.9, 6392.77
 0.62, 879.09, 1739.06, 2576.75, 3390.21, 4177.94, 4938.74, 5671.54, 6375.43
 0.64, 876.87, 1734.66, 2570.2, 3381.55, 4167.22, 4926, 5656.84, 6358.82
 0.66, 874.75, 1730.44, 2563.93, 3373.26, 4156.95, 4913.8, 5642.75, 6342.91
 0.68, 872.72, 1726.41, 2557.93, 3365.32, 4147.11, 4902.1, 5629.25, 6327.64
 0.7, 870.78, 1722.55, 2552.17, 3357.71, 4137.68, 4890.89, 5616.3, 6312.99
 0.72, 868.91, 1718.85, 2546.66, 3350.41, 4128.64, 4880.13, 5603.87, 6298.93
 0.74, 867.13, 1715.3, 2541.37, 3343.41, 4119.95, 4869.8, 5591.92, 6285.41
 0.76, 865.41, 1711.89, 2536.29, 3336.68, 4111.61, 4859.87, 5580.44, 6272.42
 0.78, 863.77, 1708.61, 2531.4, 3330.21, 4103.59, 4850.32, 5569.4, 6259.92
 0.8, 862.18, 1705.46, 2526.71, 3324, 4095.87, 4841.14, 5558.77, 6247.88
 0.82, 860.66, 1702.43, 2522.19, 3318.01, 4088.44, 4832.29, 5548.54, 6236.29
 0.84, 859.19, 1699.51, 2517.84, 3312.25, 4081.29, 4823.77, 5538.68, 6225.12
 0.86, 857.78, 1696.7, 2513.65, 3306.69, 4074.39, 4815.56, 5529.17, 6214.34
 0.88, 856.42, 1693.99, 2509.61, 3301.34, 4067.75, 4807.64, 5520, 6203.95
 0.9, 855.11, 1691.38, 2505.71, 3296.17, 4061.33, 4799.99, 5511.15, 6193.91
 0.92, 853.84, 1688.86, 2501.95, 3291.19, 4055.14, 4792.61, 5502.6, 6184.22
 0.94, 852.62, 1686.42, 2498.31, 3286.37, 4049.15, 4785.48, 5494.34, 6174.85
 0.96, 851.44, 1684.07, 2494.8, 3281.72, 4043.37, 4778.58, 5486.35, 6165.78
 0.98, 850.29, 1681.8, 2491.41, 3277.21, 4037.78, 4771.91, 5478.62, 6157.02
 1, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
 1.02, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.02, 497.65, 974.51, 1427.4, 1854.57, 2254.85, 2627.42, 2971.73, 3287.41
 0.04, 766.97, 1507.63, 2217.72, 2894.64, 3536.53, 4141.89, 4709.5, 5238.37
 0.06, 884.12, 1742.03, 2569.37, 3363.41, 4122.12, 4843.79, 5526.98, 6170.42
 0.08, 935.41, 1845.55, 2726.18, 3574.64, 4388.89, 5167.24, 5908.21, 6610.47
 0.1, 958.07, 1891.79, 2797.06, 3671.31, 4512.54, 5319.1, 6089.54, 6822.55
 0.12, 967.18, 1910.79, 2826.86, 3712.88, 4566.94, 5387.41, 6172.88, 6922.07
 0.14, 969.39, 1915.85, 2835.53, 3725.99, 4585.37, 5412.07, 6204.74, 6962.12
 0.16, 967.92, 1913.45, 2832.83, 3723.68, 4584.18, 5412.8, 6208.18, 6969.13
 0.18, 964.45, 1906.97, 2823.87, 3712.83, 4572.06, 5400.05, 6195.51, 6957.25
 0.2, 959.93, 1898.31, 2811.51, 3697.27, 4553.83, 5379.71, 6173.65, 6934.48
 0.22, 954.88, 1888.54, 2797.4, 3679.23, 4532.32, 5355.22, 6146.67, 6905.54
 0.24, 949.63, 1878.3, 2782.51, 3660.05, 4509.23, 5328.63, 6117.03, 6873.3
 0.26, 944.35, 1867.98, 2767.43, 3640.52, 4485.59, 5301.24, 6086.25, 6839.54
 0.28, 939.16, 1857.81, 2752.52, 3621.14, 4462.03, 5273.8, 6055.28, 6805.38
 0.3, 934.13, 1847.92, 2737.99, 3602.2, 4438.93, 5246.82, 6024.7, 6771.51
 0.32, 929.28, 1838.39, 2723.95, 3583.86, 4416.52, 5220.58, 5994.88, 6738.37
 0.34, 924.64, 1829.25, 2710.48, 3566.24, 4394.93, 5195.24, 5966.02, 6706.23
 0.36, 920.22, 1820.53, 2697.59, 3549.35, 4374.23, 5170.9, 5938.24, 6675.22
 0.38, 916.01, 1812.21, 2685.31, 3533.24, 4354.43, 5147.59, 5911.59, 6645.43
 0.4, 912.01, 1804.31, 2673.61, 3517.87, 4335.54, 5125.32, 5886.1, 6616.89
 0.42, 908.21, 1796.79, 2662.47, 3503.23, 4317.52, 5104.06, 5861.74, 6589.58
 0.44, 904.6, 1789.64, 2651.88, 3489.3, 4300.36, 5083.79, 5838.49, 6563.49
 0.46, 901.17, 1782.85, 2641.81, 3476.05, 4284.02, 5064.47, 5816.31, 6538.56
 0.48, 897.91, 1776.39, 2632.23, 3463.43, 4268.46, 5046.06, 5795.15, 6514.77
 0.5, 894.81, 1770.25, 2623.12, 3451.42, 4253.63, 5028.5, 5774.96, 6492.05
 0.52, 891.86, 1764.41, 2614.44, 3439.97, 4239.49, 5011.76, 5755.69, 6470.36
 0.54, 889.06, 1758.85, 2606.18, 3429.07, 4226.01, 4995.78, 5737.3, 6449.63
 0.56, 886.38, 1753.54, 2598.3, 3418.67, 4213.16, 4980.53, 5719.74, 6429.83
 0.58, 883.84, 1748.49, 2590.78, 3408.74, 4200.88, 4965.97, 5702.95, 6410.89
 0.6, 881.41, 1743.67, 2583.61, 3399.26, 4189.15, 4952.05, 5686.9, 6392.77
 0.62, 879.09, 1739.06, 2576.75, 3390.21, 4177.94, 4938.74, 5671.54, 6375.43
 0.64, 876.87, 1734.66, 2570.2, 3381.55, 4167.22, 4926, 5656.84, 6358.82
 0.66, 874.75, 1730.44, 2563.93, 3373.26, 4156.95, 4913.8, 5642.75, 6342.91
 0.68, 872.72, 1726.41, 2557.93, 3365.32, 4147.11, 4902.1, 5629.25, 6327.64
 0.7, 870.78, 1722.55, 2552.17, 3357.71, 4137.68, 4890.89, 5616.3, 6312.99
 0.72, 868.91, 1718.85, 2546.66, 3350.41, 4128.64, 4880.13, 5603.87, 6298.93
 0.74, 867.13, 1715.3, 2541.37, 3343.41, 4119.95, 4869.8, 5591.92, 6285.41
 0.76, 865.41, 1711.89, 2536.29, 3336.68, 4111.61, 4859.87, 5580.44, 6272.42
 0.78, 863.77, 1708.61, 2531.4, 3330.21, 4103.59, 4850.32, 5569.4, 6259.92
 0.8, 862.18, 1705.46, 2526.71, 3324, 4095.87, 4841.14, 5558.77, 6247.88
 0.82, 860.66, 1702.43, 2522.19, 3318.01, 4088.44, 4832.29, 5548.54, 6236.29
 0.84, 859.19, 1699.51, 2517.84, 3312.25, 4081.29, 4823.77, 5538.68, 6225.12
 0.86, 857.78, 1696.7, 2513.65, 3306.69, 4074.39, 4815.56, 5529.17, 6214.34
 0.88, 856.42, 1693.99, 2509.61, 3301.34, 4067.75, 4807.64, 5520, 6203.95
 0.9, 855.11, 1691.38, 2505.71, 3296.17, 4061.33, 4799.99, 5511.15, 6193.91
 0.92, 853.84, 1688.86, 2501.95, 3291.19, 4055.14, 4792.61, 5502.6, 6184.22
 0.94, 852.62, 1686.42, 2498.31, 3286.37, 4049.15, 4785.48, 5494.34, 6174.85
 0.96, 851.44, 1684.07, 2494.8, 3281.72, 4043.37, 4778.58, 5486.35, 6165.78
 0.98, 850.29, 1681.8, 2491.41, 3277.21, 4037.78, 4771.91, 5478.62, 6157.02
 1, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
 1.02, 849.19, 1679.6, 2488.12, 3272.86, 4032.37, 4765.46, 5471.15, 6148.53
ENDTABLE
FX_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.02, 704.77, 1395.6, 2070.06, 2726.61, 3363.99, 3981.14, 4577.1, 5151
 0.04, 1097.08, 2170.78, 3217.1, 4233.54, 5218.12, 6169.21, 7085.36, 7965.25
 0.06, 1274.84, 2521.28, 3734.55, 4911.69, 6050.38, 7148.75, 8205.15, 9218.1
 0.08, 1357.64, 2684.31, 3974.85, 5226.07, 6435.52, 7601.19, 8721.37, 9794.51
 0.1, 1398.39, 2764.43, 4092.76, 5380.06, 6623.83, 7822.01, 8972.83, 10074.75
 0.12, 1418.63, 2804.15, 4151.09, 5456.06, 6716.52, 7930.39, 9095.89, 10211.48
 0.14, 1427.94, 2822.34, 4177.66, 5490.49, 6758.29, 7978.95, 9150.69, 10271.97
 0.16, 1431.01, 2828.24, 4186.14, 5501.28, 6771.1, 7993.51, 9166.72, 10289.19
 0.18, 1430.36, 2826.84, 4183.86, 5498.01, 6766.72, 7987.9, 9159.78, 10280.81
 0.2, 1427.44, 2820.98, 4175.04, 5486.2, 6751.9, 7970.06, 9138.92, 10256.94
 0.22, 1423.14, 2812.4, 4162.21, 5469.17, 6730.72, 7944.79, 9109.62, 10223.69
 0.24, 1418, 2802.18, 4146.98, 5449.02, 6705.74, 7915.08, 9075.3, 10184.87
 0.26, 1412.37, 2791.01, 4130.38, 5427.09, 6678.6, 7882.87, 9038.16, 10142.94
 0.28, 1406.5, 2779.36, 4113.07, 5404.25, 6650.38, 7849.42, 8999.63, 10099.51
 0.3, 1400.53, 2767.53, 4095.51, 5381.1, 6621.8, 7815.57, 8960.68, 10055.64
 0.32, 1394.57, 2755.73, 4078, 5358.03, 6593.33, 7781.86, 8921.92, 10012.02
 0.34, 1388.69, 2744.08, 4060.73, 5335.29, 6565.28, 7748.68, 8883.79, 9969.12
 0.36, 1382.93, 2732.69, 4043.83, 5313.05, 6537.86, 7716.26, 8846.54, 9927.24
 0.38, 1377.32, 2721.59, 4027.4, 5291.42, 6511.21, 7684.75, 8810.35, 9886.56
 0.4, 1371.89, 2710.84, 4011.47, 5270.47, 6485.39, 7654.23, 8775.32, 9847.2
 0.42, 1366.63, 2700.45, 3996.07, 5250.22, 6460.45, 7624.77, 8741.5, 9809.2
 0.44, 1361.56, 2690.43, 3981.23, 5230.7, 6436.41, 7596.36, 8708.91, 9772.6
 0.46, 1356.68, 2680.77, 3966.93, 5211.9, 6413.26, 7569.02, 8677.55, 9737.38
 0.48, 1351.98, 2671.47, 3953.17, 5193.81, 6390.99, 7542.73, 8647.39, 9703.52
 0.5, 1347.45, 2662.53, 3939.93, 5176.42, 6369.58, 7517.46, 8618.4, 9670.98
 0.52, 1343.1, 2653.94, 3927.21, 5159.7, 6349, 7493.17, 8590.55, 9639.72
 0.54, 1338.92, 2645.68, 3914.98, 5143.64, 6329.23, 7469.83, 8563.79, 9609.69
 0.56, 1334.9, 2637.73, 3903.23, 5128.2, 6310.23, 7447.41, 8538.08, 9580.85
 0.58, 1331.04, 2630.1, 3891.93, 5113.35, 6291.97, 7425.86, 8513.38, 9553.13
 0.6, 1327.32, 2622.75, 3881.07, 5099.08, 6274.41, 7405.14, 8489.64, 9526.5
 0.62, 1323.75, 2615.69, 3870.62, 5085.36, 6257.53, 7385.22, 8466.81, 9500.89
 0.64, 1320.31, 2608.89, 3860.56, 5072.15, 6241.29, 7366.06, 8444.86, 9476.27
 0.66, 1316.99, 2602.35, 3850.89, 5059.45, 6225.66, 7347.63, 8423.73, 9452.58
 0.68, 1313.81, 2596.05, 3841.57, 5047.21, 6210.62, 7329.88, 8403.4, 9429.78
 0.7, 1310.73, 2589.98, 3832.6, 5035.43, 6196.13, 7312.79, 8383.82, 9407.82
 0.72, 1307.77, 2584.14, 3823.95, 5024.07, 6182.16, 7296.32, 8364.95, 9386.67
 0.74, 1304.92, 2578.5, 3815.61, 5013.12, 6168.7, 7280.45, 8346.77, 9366.28
 0.76, 1302.16, 2573.06, 3807.57, 5002.57, 6155.72, 7265.14, 8329.23, 9346.62
 0.78, 1299.5, 2567.81, 3799.8, 4992.38, 6143.19, 7250.37, 8312.31, 9327.65
 0.8, 1296.94, 2562.74, 3792.31, 4982.54, 6131.1, 7236.11, 8295.98, 9309.34
 0.82, 1294.46, 2557.84, 3785.07, 4973.03, 6119.41, 7222.33, 8280.21, 9291.66
 0.84, 1292.06, 2553.11, 3778.08, 4963.85, 6108.13, 7209.02, 8264.97, 9274.58
 0.86, 1289.74, 2548.54, 3771.31, 4954.97, 6097.21, 7196.16, 8250.23, 9258.07
 0.88, 1287.5, 2544.11, 3764.77, 4946.39, 6086.66, 7183.72, 8235.98, 9242.1
 0.9, 1285.33, 2539.83, 3758.44, 4938.08, 6076.44, 7171.68, 8222.2, 9226.65
 0.92, 1283.23, 2535.68, 3752.31, 4930.03, 6066.56, 7160.02, 8208.85, 9211.69
 0.94, 1281.2, 2531.66, 3746.37, 4922.24, 6056.98, 7148.73, 8195.93, 9197.21
 0.96, 1279.22, 2527.77, 3740.62, 4914.69, 6047.7, 7137.79, 8183.41, 9183.17
 0.98, 1277.31, 2524, 3735.04, 4907.37, 6038.71, 7127.19, 8171.27, 9169.57
 1, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
 1.02, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
ENDTABLE
FX_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.02, 704.77, 1395.6, 2070.06, 2726.61, 3363.99, 3981.14, 4577.1, 5151
 0.04, 1097.08, 2170.78, 3217.1, 4233.54, 5218.12, 6169.21, 7085.36, 7965.25
 0.06, 1274.84, 2521.28, 3734.55, 4911.69, 6050.38, 7148.75, 8205.15, 9218.1
 0.08, 1357.64, 2684.31, 3974.85, 5226.07, 6435.52, 7601.19, 8721.37, 9794.51
 0.1, 1398.39, 2764.43, 4092.76, 5380.06, 6623.83, 7822.01, 8972.83, 10074.75
 0.12, 1418.63, 2804.15, 4151.09, 5456.06, 6716.52, 7930.39, 9095.89, 10211.48
 0.14, 1427.94, 2822.34, 4177.66, 5490.49, 6758.29, 7978.95, 9150.69, 10271.97
 0.16, 1431.01, 2828.24, 4186.14, 5501.28, 6771.1, 7993.51, 9166.72, 10289.19
 0.18, 1430.36, 2826.84, 4183.86, 5498.01, 6766.72, 7987.9, 9159.78, 10280.81
 0.2, 1427.44, 2820.98, 4175.04, 5486.2, 6751.9, 7970.06, 9138.92, 10256.94
 0.22, 1423.14, 2812.4, 4162.21, 5469.17, 6730.72, 7944.79, 9109.62, 10223.69
 0.24, 1418, 2802.18, 4146.98, 5449.02, 6705.74, 7915.08, 9075.3, 10184.87
 0.26, 1412.37, 2791.01, 4130.38, 5427.09, 6678.6, 7882.87, 9038.16, 10142.94
 0.28, 1406.5, 2779.36, 4113.07, 5404.25, 6650.38, 7849.42, 8999.63, 10099.51
 0.3, 1400.53, 2767.53, 4095.51, 5381.1, 6621.8, 7815.57, 8960.68, 10055.64
 0.32, 1394.57, 2755.73, 4078, 5358.03, 6593.33, 7781.86, 8921.92, 10012.02
 0.34, 1388.69, 2744.08, 4060.73, 5335.29, 6565.28, 7748.68, 8883.79, 9969.12
 0.36, 1382.93, 2732.69, 4043.83, 5313.05, 6537.86, 7716.26, 8846.54, 9927.24
 0.38, 1377.32, 2721.59, 4027.4, 5291.42, 6511.21, 7684.75, 8810.35, 9886.56
 0.4, 1371.89, 2710.84, 4011.47, 5270.47, 6485.39, 7654.23, 8775.32, 9847.2
 0.42, 1366.63, 2700.45, 3996.07, 5250.22, 6460.45, 7624.77, 8741.5, 9809.2
 0.44, 1361.56, 2690.43, 3981.23, 5230.7, 6436.41, 7596.36, 8708.91, 9772.6
 0.46, 1356.68, 2680.77, 3966.93, 5211.9, 6413.26, 7569.02, 8677.55, 9737.38
 0.48, 1351.98, 2671.47, 3953.17, 5193.81, 6390.99, 7542.73, 8647.39, 9703.52
 0.5, 1347.45, 2662.53, 3939.93, 5176.42, 6369.58, 7517.46, 8618.4, 9670.98
 0.52, 1343.1, 2653.94, 3927.21, 5159.7, 6349, 7493.17, 8590.55, 9639.72
 0.54, 1338.92, 2645.68, 3914.98, 5143.64, 6329.23, 7469.83, 8563.79, 9609.69
 0.56, 1334.9, 2637.73, 3903.23, 5128.2, 6310.23, 7447.41, 8538.08, 9580.85
 0.58, 1331.04, 2630.1, 3891.93, 5113.35, 6291.97, 7425.86, 8513.38, 9553.13
 0.6, 1327.32, 2622.75, 3881.07, 5099.08, 6274.41, 7405.14, 8489.64, 9526.5
 0.62, 1323.75, 2615.69, 3870.62, 5085.36, 6257.53, 7385.22, 8466.81, 9500.89
 0.64, 1320.31, 2608.89, 3860.56, 5072.15, 6241.29, 7366.06, 8444.86, 9476.27
 0.66, 1316.99, 2602.35, 3850.89, 5059.45, 6225.66, 7347.63, 8423.73, 9452.58
 0.68, 1313.81, 2596.05, 3841.57, 5047.21, 6210.62, 7329.88, 8403.4, 9429.78
 0.7, 1310.73, 2589.98, 3832.6, 5035.43, 6196.13, 7312.79, 8383.82, 9407.82
 0.72, 1307.77, 2584.14, 3823.95, 5024.07, 6182.16, 7296.32, 8364.95, 9386.67
 0.74, 1304.92, 2578.5, 3815.61, 5013.12, 6168.7, 7280.45, 8346.77, 9366.28
 0.76, 1302.16, 2573.06, 3807.57, 5002.57, 6155.72, 7265.14, 8329.23, 9346.62
 0.78, 1299.5, 2567.81, 3799.8, 4992.38, 6143.19, 7250.37, 8312.31, 9327.65
 0.8, 1296.94, 2562.74, 3792.31, 4982.54, 6131.1, 7236.11, 8295.98, 9309.34
 0.82, 1294.46, 2557.84, 3785.07, 4973.03, 6119.41, 7222.33, 8280.21, 9291.66
 0.84, 1292.06, 2553.11, 3778.08, 4963.85, 6108.13, 7209.02, 8264.97, 9274.58
 0.86, 1289.74, 2548.54, 3771.31, 4954.97, 6097.21, 7196.16, 8250.23, 9258.07
 0.88, 1287.5, 2544.11, 3764.77, 4946.39, 6086.66, 7183.72, 8235.98, 9242.1
 0.9, 1285.33, 2539.83, 3758.44, 4938.08, 6076.44, 7171.68, 8222.2, 9226.65
 0.92, 1283.23, 2535.68, 3752.31, 4930.03, 6066.56, 7160.02, 8208.85, 9211.69
 0.94, 1281.2, 2531.66, 3746.37, 4922.24, 6056.98, 7148.73, 8195.93, 9197.21
 0.96, 1279.22, 2527.77, 3740.62, 4914.69, 6047.7, 7137.79, 8183.41, 9183.17
 0.98, 1277.31, 2524, 3735.04, 4907.37, 6038.71, 7127.19, 8171.27, 9169.57
 1, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
 1.02, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
ENDTABLE
FX_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1) 2D_FROM_ZERO ! unit 3, axle 2, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.02, 704.77, 1395.6, 2070.06, 2726.61, 3363.99, 3981.14, 4577.1, 5151
 0.04, 1097.08, 2170.78, 3217.1, 4233.54, 5218.12, 6169.21, 7085.36, 7965.25
 0.06, 1274.84, 2521.28, 3734.55, 4911.69, 6050.38, 7148.75, 8205.15, 9218.1
 0.08, 1357.64, 2684.31, 3974.85, 5226.07, 6435.52, 7601.19, 8721.37, 9794.51
 0.1, 1398.39, 2764.43, 4092.76, 5380.06, 6623.83, 7822.01, 8972.83, 10074.75
 0.12, 1418.63, 2804.15, 4151.09, 5456.06, 6716.52, 7930.39, 9095.89, 10211.48
 0.14, 1427.94, 2822.34, 4177.66, 5490.49, 6758.29, 7978.95, 9150.69, 10271.97
 0.16, 1431.01, 2828.24, 4186.14, 5501.28, 6771.1, 7993.51, 9166.72, 10289.19
 0.18, 1430.36, 2826.84, 4183.86, 5498.01, 6766.72, 7987.9, 9159.78, 10280.81
 0.2, 1427.44, 2820.98, 4175.04, 5486.2, 6751.9, 7970.06, 9138.92, 10256.94
 0.22, 1423.14, 2812.4, 4162.21, 5469.17, 6730.72, 7944.79, 9109.62, 10223.69
 0.24, 1418, 2802.18, 4146.98, 5449.02, 6705.74, 7915.08, 9075.3, 10184.87
 0.26, 1412.37, 2791.01, 4130.38, 5427.09, 6678.6, 7882.87, 9038.16, 10142.94
 0.28, 1406.5, 2779.36, 4113.07, 5404.25, 6650.38, 7849.42, 8999.63, 10099.51
 0.3, 1400.53, 2767.53, 4095.51, 5381.1, 6621.8, 7815.57, 8960.68, 10055.64
 0.32, 1394.57, 2755.73, 4078, 5358.03, 6593.33, 7781.86, 8921.92, 10012.02
 0.34, 1388.69, 2744.08, 4060.73, 5335.29, 6565.28, 7748.68, 8883.79, 9969.12
 0.36, 1382.93, 2732.69, 4043.83, 5313.05, 6537.86, 7716.26, 8846.54, 9927.24
 0.38, 1377.32, 2721.59, 4027.4, 5291.42, 6511.21, 7684.75, 8810.35, 9886.56
 0.4, 1371.89, 2710.84, 4011.47, 5270.47, 6485.39, 7654.23, 8775.32, 9847.2
 0.42, 1366.63, 2700.45, 3996.07, 5250.22, 6460.45, 7624.77, 8741.5, 9809.2
 0.44, 1361.56, 2690.43, 3981.23, 5230.7, 6436.41, 7596.36, 8708.91, 9772.6
 0.46, 1356.68, 2680.77, 3966.93, 5211.9, 6413.26, 7569.02, 8677.55, 9737.38
 0.48, 1351.98, 2671.47, 3953.17, 5193.81, 6390.99, 7542.73, 8647.39, 9703.52
 0.5, 1347.45, 2662.53, 3939.93, 5176.42, 6369.58, 7517.46, 8618.4, 9670.98
 0.52, 1343.1, 2653.94, 3927.21, 5159.7, 6349, 7493.17, 8590.55, 9639.72
 0.54, 1338.92, 2645.68, 3914.98, 5143.64, 6329.23, 7469.83, 8563.79, 9609.69
 0.56, 1334.9, 2637.73, 3903.23, 5128.2, 6310.23, 7447.41, 8538.08, 9580.85
 0.58, 1331.04, 2630.1, 3891.93, 5113.35, 6291.97, 7425.86, 8513.38, 9553.13
 0.6, 1327.32, 2622.75, 3881.07, 5099.08, 6274.41, 7405.14, 8489.64, 9526.5
 0.62, 1323.75, 2615.69, 3870.62, 5085.36, 6257.53, 7385.22, 8466.81, 9500.89
 0.64, 1320.31, 2608.89, 3860.56, 5072.15, 6241.29, 7366.06, 8444.86, 9476.27
 0.66, 1316.99, 2602.35, 3850.89, 5059.45, 6225.66, 7347.63, 8423.73, 9452.58
 0.68, 1313.81, 2596.05, 3841.57, 5047.21, 6210.62, 7329.88, 8403.4, 9429.78
 0.7, 1310.73, 2589.98, 3832.6, 5035.43, 6196.13, 7312.79, 8383.82, 9407.82
 0.72, 1307.77, 2584.14, 3823.95, 5024.07, 6182.16, 7296.32, 8364.95, 9386.67
 0.74, 1304.92, 2578.5, 3815.61, 5013.12, 6168.7, 7280.45, 8346.77, 9366.28
 0.76, 1302.16, 2573.06, 3807.57, 5002.57, 6155.72, 7265.14, 8329.23, 9346.62
 0.78, 1299.5, 2567.81, 3799.8, 4992.38, 6143.19, 7250.37, 8312.31, 9327.65
 0.8, 1296.94, 2562.74, 3792.31, 4982.54, 6131.1, 7236.11, 8295.98, 9309.34
 0.82, 1294.46, 2557.84, 3785.07, 4973.03, 6119.41, 7222.33, 8280.21, 9291.66
 0.84, 1292.06, 2553.11, 3778.08, 4963.85, 6108.13, 7209.02, 8264.97, 9274.58
 0.86, 1289.74, 2548.54, 3771.31, 4954.97, 6097.21, 7196.16, 8250.23, 9258.07
 0.88, 1287.5, 2544.11, 3764.77, 4946.39, 6086.66, 7183.72, 8235.98, 9242.1
 0.9, 1285.33, 2539.83, 3758.44, 4938.08, 6076.44, 7171.68, 8222.2, 9226.65
 0.92, 1283.23, 2535.68, 3752.31, 4930.03, 6066.56, 7160.02, 8208.85, 9211.69
 0.94, 1281.2, 2531.66, 3746.37, 4922.24, 6056.98, 7148.73, 8195.93, 9197.21
 0.96, 1279.22, 2527.77, 3740.62, 4914.69, 6047.7, 7137.79, 8183.41, 9183.17
 0.98, 1277.31, 2524, 3735.04, 4907.37, 6038.71, 7127.19, 8171.27, 9169.57
 1, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
 1.02, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
ENDTABLE
FX_TIRE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.02, 704.77, 1395.6, 2070.06, 2726.61, 3363.99, 3981.14, 4577.1, 5151
 0.04, 1097.08, 2170.78, 3217.1, 4233.54, 5218.12, 6169.21, 7085.36, 7965.25
 0.06, 1274.84, 2521.28, 3734.55, 4911.69, 6050.38, 7148.75, 8205.15, 9218.1
 0.08, 1357.64, 2684.31, 3974.85, 5226.07, 6435.52, 7601.19, 8721.37, 9794.51
 0.1, 1398.39, 2764.43, 4092.76, 5380.06, 6623.83, 7822.01, 8972.83, 10074.75
 0.12, 1418.63, 2804.15, 4151.09, 5456.06, 6716.52, 7930.39, 9095.89, 10211.48
 0.14, 1427.94, 2822.34, 4177.66, 5490.49, 6758.29, 7978.95, 9150.69, 10271.97
 0.16, 1431.01, 2828.24, 4186.14, 5501.28, 6771.1, 7993.51, 9166.72, 10289.19
 0.18, 1430.36, 2826.84, 4183.86, 5498.01, 6766.72, 7987.9, 9159.78, 10280.81
 0.2, 1427.44, 2820.98, 4175.04, 5486.2, 6751.9, 7970.06, 9138.92, 10256.94
 0.22, 1423.14, 2812.4, 4162.21, 5469.17, 6730.72, 7944.79, 9109.62, 10223.69
 0.24, 1418, 2802.18, 4146.98, 5449.02, 6705.74, 7915.08, 9075.3, 10184.87
 0.26, 1412.37, 2791.01, 4130.38, 5427.09, 6678.6, 7882.87, 9038.16, 10142.94
 0.28, 1406.5, 2779.36, 4113.07, 5404.25, 6650.38, 7849.42, 8999.63, 10099.51
 0.3, 1400.53, 2767.53, 4095.51, 5381.1, 6621.8, 7815.57, 8960.68, 10055.64
 0.32, 1394.57, 2755.73, 4078, 5358.03, 6593.33, 7781.86, 8921.92, 10012.02
 0.34, 1388.69, 2744.08, 4060.73, 5335.29, 6565.28, 7748.68, 8883.79, 9969.12
 0.36, 1382.93, 2732.69, 4043.83, 5313.05, 6537.86, 7716.26, 8846.54, 9927.24
 0.38, 1377.32, 2721.59, 4027.4, 5291.42, 6511.21, 7684.75, 8810.35, 9886.56
 0.4, 1371.89, 2710.84, 4011.47, 5270.47, 6485.39, 7654.23, 8775.32, 9847.2
 0.42, 1366.63, 2700.45, 3996.07, 5250.22, 6460.45, 7624.77, 8741.5, 9809.2
 0.44, 1361.56, 2690.43, 3981.23, 5230.7, 6436.41, 7596.36, 8708.91, 9772.6
 0.46, 1356.68, 2680.77, 3966.93, 5211.9, 6413.26, 7569.02, 8677.55, 9737.38
 0.48, 1351.98, 2671.47, 3953.17, 5193.81, 6390.99, 7542.73, 8647.39, 9703.52
 0.5, 1347.45, 2662.53, 3939.93, 5176.42, 6369.58, 7517.46, 8618.4, 9670.98
 0.52, 1343.1, 2653.94, 3927.21, 5159.7, 6349, 7493.17, 8590.55, 9639.72
 0.54, 1338.92, 2645.68, 3914.98, 5143.64, 6329.23, 7469.83, 8563.79, 9609.69
 0.56, 1334.9, 2637.73, 3903.23, 5128.2, 6310.23, 7447.41, 8538.08, 9580.85
 0.58, 1331.04, 2630.1, 3891.93, 5113.35, 6291.97, 7425.86, 8513.38, 9553.13
 0.6, 1327.32, 2622.75, 3881.07, 5099.08, 6274.41, 7405.14, 8489.64, 9526.5
 0.62, 1323.75, 2615.69, 3870.62, 5085.36, 6257.53, 7385.22, 8466.81, 9500.89
 0.64, 1320.31, 2608.89, 3860.56, 5072.15, 6241.29, 7366.06, 8444.86, 9476.27
 0.66, 1316.99, 2602.35, 3850.89, 5059.45, 6225.66, 7347.63, 8423.73, 9452.58
 0.68, 1313.81, 2596.05, 3841.57, 5047.21, 6210.62, 7329.88, 8403.4, 9429.78
 0.7, 1310.73, 2589.98, 3832.6, 5035.43, 6196.13, 7312.79, 8383.82, 9407.82
 0.72, 1307.77, 2584.14, 3823.95, 5024.07, 6182.16, 7296.32, 8364.95, 9386.67
 0.74, 1304.92, 2578.5, 3815.61, 5013.12, 6168.7, 7280.45, 8346.77, 9366.28
 0.76, 1302.16, 2573.06, 3807.57, 5002.57, 6155.72, 7265.14, 8329.23, 9346.62
 0.78, 1299.5, 2567.81, 3799.8, 4992.38, 6143.19, 7250.37, 8312.31, 9327.65
 0.8, 1296.94, 2562.74, 3792.31, 4982.54, 6131.1, 7236.11, 8295.98, 9309.34
 0.82, 1294.46, 2557.84, 3785.07, 4973.03, 6119.41, 7222.33, 8280.21, 9291.66
 0.84, 1292.06, 2553.11, 3778.08, 4963.85, 6108.13, 7209.02, 8264.97, 9274.58
 0.86, 1289.74, 2548.54, 3771.31, 4954.97, 6097.21, 7196.16, 8250.23, 9258.07
 0.88, 1287.5, 2544.11, 3764.77, 4946.39, 6086.66, 7183.72, 8235.98, 9242.1
 0.9, 1285.33, 2539.83, 3758.44, 4938.08, 6076.44, 7171.68, 8222.2, 9226.65
 0.92, 1283.23, 2535.68, 3752.31, 4930.03, 6066.56, 7160.02, 8208.85, 9211.69
 0.94, 1281.2, 2531.66, 3746.37, 4922.24, 6056.98, 7148.73, 8195.93, 9197.21
 0.96, 1279.22, 2527.77, 3740.62, 4914.69, 6047.7, 7137.79, 8183.41, 9183.17
 0.98, 1277.31, 2524, 3735.04, 4907.37, 6038.71, 7127.19, 8171.27, 9169.57
 1, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
 1.02, 1275.46, 2520.34, 3729.63, 4900.27, 6029.98, 7116.91, 8159.5, 9156.39
ENDTABLE
FX_TIRE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFY

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FY_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFY2 component due to ride height

FY_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFY2 component due to ride height

FY_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CFY2 component due to ride height

FY_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 136.7, 267.02, 390.03, 505.26, 612.44, 711.39, 802.02, 884.3
 1, 268.55, 524.78, 766.9, 993.96, 1205.4, 1400.86, 1580.15, 1743.18
 1.5, 391.33, 765.21, 1119.05, 1451.47, 1761.62, 2048.93, 2313.07, 2553.84
 2, 501.89, 982.22, 1437.73, 1866.65, 2267.82, 2640.46, 2984.04, 3298.25
 2.5, 598.41, 1172.23, 1717.68, 2232.64, 2715.66, 3165.73, 3582.14, 3964.38
 3, 680.34, 1334.09, 1957.06, 2546.85, 3101.78, 3620.61, 4102.39, 4546.43
 3.5, 748.19, 1468.64, 2156.91, 2810.37, 3427.12, 4005.74, 4545.07, 5044.23
 4, 803.17, 1578.14, 2320.28, 3026.84, 3695.75, 4325.4, 4914.48, 5461.92
 4.5, 846.9, 1665.59, 2451.4, 3201.46, 3913.61, 4586.1, 5217.48, 5806.51
 5, 881.07, 1734.27, 2554.9, 3340.04, 4087.48, 4795.39, 5462.19, 6086.53
 5.5, 907.35, 1787.33, 2635.3, 3448.35, 4224.2, 4960.97, 5657.04, 6310.95
 6, 927.21, 1827.66, 2696.78, 3531.68, 4330.09, 5090.1, 5810.04, 6488.4
 6.5, 941.92, 1857.72, 2742.95, 3594.72, 4410.8, 5189.27, 5928.44, 6626.79
 7, 952.54, 1879.62, 2776.85, 3641.43, 4471.14, 5264.08, 6018.57, 6733.06
 7.5, 959.94, 1895.04, 2801.02, 3675.11, 4515.15, 5319.26, 6085.78, 6813.15
 8, 964.83, 1905.38, 2817.49, 3698.46, 4546.14, 5358.71, 6134.53, 6872.06
 8.5, 967.74, 1911.75, 2827.93, 3713.65, 4566.81, 5385.63, 6168.49, 6913.9
 9, 969.13, 1915.01, 2833.63, 3722.42, 4579.33, 5402.61, 6190.67, 6942.05
 9.5, 969.34, 1915.87, 2835.65, 3726.17, 4585.43, 5411.71, 6203.47, 6959.28
 10, 968.65, 1914.87, 2834.81, 3726.01, 4586.51, 5414.62, 6208.85, 6967.8
 10.5, 967.26, 1912.44, 2831.77, 3722.81, 4583.66, 5412.68, 6208.38, 6969.42
 11, 965.35, 1908.94, 2827.04, 3717.28, 4577.78, 5406.94, 6203.32, 6965.59
 11.5, 963.05, 1904.61, 2821.03, 3709.96, 4569.56, 5398.27, 6194.67, 6957.47
 12, 960.45, 1899.67, 2814.05, 3701.28, 4559.56, 5387.34, 6183.25, 6946.01
 12.5, 957.65, 1894.3, 2806.37, 3691.6, 4548.21, 5374.69, 6169.69, 6931.96
 13, 954.71, 1888.61, 2798.19, 3681.2, 4535.88, 5360.76, 6154.52, 6915.93
 13.5, 951.67, 1882.72, 2789.66, 3670.27, 4522.84, 5345.9, 6138.15, 6898.41
 14, 948.58, 1876.7, 2780.9, 3659.01, 4509.31, 5330.38, 6120.93, 6879.79
 14.5, 945.46, 1870.61, 2772.03, 3647.54, 4495.47, 5314.41, 6103.1, 6860.39
 15, 942.34, 1864.51, 2763.1, 3635.97, 4481.46, 5298.18, 6084.88, 6840.45
 15.5, 939.24, 1858.43, 2754.18, 3624.38, 4467.39, 5281.82, 6066.45, 6820.19
 16, 936.17, 1852.4, 2745.32, 3612.85, 4453.34, 5265.44, 6047.94, 6799.76
 16.5, 933.14, 1846.44, 2736.56, 3601.41, 4439.38, 5249.13, 6029.46, 6779.29
 17, 930.17, 1840.58, 2727.92, 3590.11, 4425.57, 5232.95, 6011.08, 6758.9
 17.5, 927.24, 1834.81, 2719.41, 3578.99, 4411.94, 5216.96, 5992.88, 6738.65
 18, 924.38, 1829.16, 2711.07, 3568.05, 4398.53, 5201.19, 5974.9, 6718.61
 18.5, 921.58, 1823.63, 2702.89, 3557.32, 4385.35, 5185.69, 5957.19, 6698.83
 19, 918.85, 1818.22, 2694.89, 3546.81, 4372.43, 5170.46, 5939.77, 6679.35
 19.5, 916.17, 1812.94, 2687.06, 3536.52, 4359.77, 5155.52, 5922.67, 6660.2
 20, 913.57, 1807.78, 2679.42, 3526.46, 4347.38, 5140.89, 5905.9, 6641.4
 20.5, 911.03, 1802.75, 2671.95, 3516.64, 4335.27, 5126.58, 5889.47, 6622.96
 21, 908.55, 1797.85, 2664.67, 3507.04, 4323.43, 5112.58, 5873.39, 6604.89
 21.5, 906.14, 1793.06, 2657.57, 3497.68, 4311.87, 5098.89, 5857.66, 6587.2
 22, 903.79, 1788.4, 2650.64, 3488.54, 4300.58, 5085.52, 5842.28, 6569.89
 22.5, 901.5, 1783.86, 2643.89, 3479.63, 4289.57, 5072.46, 5827.24, 6552.95
 23, 899.27, 1779.43, 2637.31, 3470.94, 4278.82, 5059.71, 5812.55, 6536.4
 23.5, 897.1, 1775.12, 2630.89, 3462.46, 4268.33, 5047.26, 5798.21, 6520.21
 24, 894.98, 1770.91, 2624.63, 3454.19, 4258.09, 5035.11, 5784.19, 6504.39
 24.5, 892.92, 1766.81, 2618.53, 3446.12, 4248.1, 5023.24, 5770.5, 6488.93
 25, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
 26, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 136.7, 267.02, 390.03, 505.26, 612.44, 711.39, 802.02, 884.3
 1, 268.55, 524.78, 766.9, 993.96, 1205.4, 1400.86, 1580.15, 1743.18
 1.5, 391.33, 765.21, 1119.05, 1451.47, 1761.62, 2048.93, 2313.07, 2553.84
 2, 501.89, 982.22, 1437.73, 1866.65, 2267.82, 2640.46, 2984.04, 3298.25
 2.5, 598.41, 1172.23, 1717.68, 2232.64, 2715.66, 3165.73, 3582.14, 3964.38
 3, 680.34, 1334.09, 1957.06, 2546.85, 3101.78, 3620.61, 4102.39, 4546.43
 3.5, 748.19, 1468.64, 2156.91, 2810.37, 3427.12, 4005.74, 4545.07, 5044.23
 4, 803.17, 1578.14, 2320.28, 3026.84, 3695.75, 4325.4, 4914.48, 5461.92
 4.5, 846.9, 1665.59, 2451.4, 3201.46, 3913.61, 4586.1, 5217.48, 5806.51
 5, 881.07, 1734.27, 2554.9, 3340.04, 4087.48, 4795.39, 5462.19, 6086.53
 5.5, 907.35, 1787.33, 2635.3, 3448.35, 4224.2, 4960.97, 5657.04, 6310.95
 6, 927.21, 1827.66, 2696.78, 3531.68, 4330.09, 5090.1, 5810.04, 6488.4
 6.5, 941.92, 1857.72, 2742.95, 3594.72, 4410.8, 5189.27, 5928.44, 6626.79
 7, 952.54, 1879.62, 2776.85, 3641.43, 4471.14, 5264.08, 6018.57, 6733.06
 7.5, 959.94, 1895.04, 2801.02, 3675.11, 4515.15, 5319.26, 6085.78, 6813.15
 8, 964.83, 1905.38, 2817.49, 3698.46, 4546.14, 5358.71, 6134.53, 6872.06
 8.5, 967.74, 1911.75, 2827.93, 3713.65, 4566.81, 5385.63, 6168.49, 6913.9
 9, 969.13, 1915.01, 2833.63, 3722.42, 4579.33, 5402.61, 6190.67, 6942.05
 9.5, 969.34, 1915.87, 2835.65, 3726.17, 4585.43, 5411.71, 6203.47, 6959.28
 10, 968.65, 1914.87, 2834.81, 3726.01, 4586.51, 5414.62, 6208.85, 6967.8
 10.5, 967.26, 1912.44, 2831.77, 3722.81, 4583.66, 5412.68, 6208.38, 6969.42
 11, 965.35, 1908.94, 2827.04, 3717.28, 4577.78, 5406.94, 6203.32, 6965.59
 11.5, 963.05, 1904.61, 2821.03, 3709.96, 4569.56, 5398.27, 6194.67, 6957.47
 12, 960.45, 1899.67, 2814.05, 3701.28, 4559.56, 5387.34, 6183.25, 6946.01
 12.5, 957.65, 1894.3, 2806.37, 3691.6, 4548.21, 5374.69, 6169.69, 6931.96
 13, 954.71, 1888.61, 2798.19, 3681.2, 4535.88, 5360.76, 6154.52, 6915.93
 13.5, 951.67, 1882.72, 2789.66, 3670.27, 4522.84, 5345.9, 6138.15, 6898.41
 14, 948.58, 1876.7, 2780.9, 3659.01, 4509.31, 5330.38, 6120.93, 6879.79
 14.5, 945.46, 1870.61, 2772.03, 3647.54, 4495.47, 5314.41, 6103.1, 6860.39
 15, 942.34, 1864.51, 2763.1, 3635.97, 4481.46, 5298.18, 6084.88, 6840.45
 15.5, 939.24, 1858.43, 2754.18, 3624.38, 4467.39, 5281.82, 6066.45, 6820.19
 16, 936.17, 1852.4, 2745.32, 3612.85, 4453.34, 5265.44, 6047.94, 6799.76
 16.5, 933.14, 1846.44, 2736.56, 3601.41, 4439.38, 5249.13, 6029.46, 6779.29
 17, 930.17, 1840.58, 2727.92, 3590.11, 4425.57, 5232.95, 6011.08, 6758.9
 17.5, 927.24, 1834.81, 2719.41, 3578.99, 4411.94, 5216.96, 5992.88, 6738.65
 18, 924.38, 1829.16, 2711.07, 3568.05, 4398.53, 5201.19, 5974.9, 6718.61
 18.5, 921.58, 1823.63, 2702.89, 3557.32, 4385.35, 5185.69, 5957.19, 6698.83
 19, 918.85, 1818.22, 2694.89, 3546.81, 4372.43, 5170.46, 5939.77, 6679.35
 19.5, 916.17, 1812.94, 2687.06, 3536.52, 4359.77, 5155.52, 5922.67, 6660.2
 20, 913.57, 1807.78, 2679.42, 3526.46, 4347.38, 5140.89, 5905.9, 6641.4
 20.5, 911.03, 1802.75, 2671.95, 3516.64, 4335.27, 5126.58, 5889.47, 6622.96
 21, 908.55, 1797.85, 2664.67, 3507.04, 4323.43, 5112.58, 5873.39, 6604.89
 21.5, 906.14, 1793.06, 2657.57, 3497.68, 4311.87, 5098.89, 5857.66, 6587.2
 22, 903.79, 1788.4, 2650.64, 3488.54, 4300.58, 5085.52, 5842.28, 6569.89
 22.5, 901.5, 1783.86, 2643.89, 3479.63, 4289.57, 5072.46, 5827.24, 6552.95
 23, 899.27, 1779.43, 2637.31, 3470.94, 4278.82, 5059.71, 5812.55, 6536.4
 23.5, 897.1, 1775.12, 2630.89, 3462.46, 4268.33, 5047.26, 5798.21, 6520.21
 24, 894.98, 1770.91, 2624.63, 3454.19, 4258.09, 5035.11, 5784.19, 6504.39
 24.5, 892.92, 1766.81, 2618.53, 3446.12, 4248.1, 5023.24, 5770.5, 6488.93
 25, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
 26, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
ENDTABLE
FY_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 136.7, 267.02, 390.03, 505.26, 612.44, 711.39, 802.02, 884.3
 1, 268.55, 524.78, 766.9, 993.96, 1205.4, 1400.86, 1580.15, 1743.18
 1.5, 391.33, 765.21, 1119.05, 1451.47, 1761.62, 2048.93, 2313.07, 2553.84
 2, 501.89, 982.22, 1437.73, 1866.65, 2267.82, 2640.46, 2984.04, 3298.25
 2.5, 598.41, 1172.23, 1717.68, 2232.64, 2715.66, 3165.73, 3582.14, 3964.38
 3, 680.34, 1334.09, 1957.06, 2546.85, 3101.78, 3620.61, 4102.39, 4546.43
 3.5, 748.19, 1468.64, 2156.91, 2810.37, 3427.12, 4005.74, 4545.07, 5044.23
 4, 803.17, 1578.14, 2320.28, 3026.84, 3695.75, 4325.4, 4914.48, 5461.92
 4.5, 846.9, 1665.59, 2451.4, 3201.46, 3913.61, 4586.1, 5217.48, 5806.51
 5, 881.07, 1734.27, 2554.9, 3340.04, 4087.48, 4795.39, 5462.19, 6086.53
 5.5, 907.35, 1787.33, 2635.3, 3448.35, 4224.2, 4960.97, 5657.04, 6310.95
 6, 927.21, 1827.66, 2696.78, 3531.68, 4330.09, 5090.1, 5810.04, 6488.4
 6.5, 941.92, 1857.72, 2742.95, 3594.72, 4410.8, 5189.27, 5928.44, 6626.79
 7, 952.54, 1879.62, 2776.85, 3641.43, 4471.14, 5264.08, 6018.57, 6733.06
 7.5, 959.94, 1895.04, 2801.02, 3675.11, 4515.15, 5319.26, 6085.78, 6813.15
 8, 964.83, 1905.38, 2817.49, 3698.46, 4546.14, 5358.71, 6134.53, 6872.06
 8.5, 967.74, 1911.75, 2827.93, 3713.65, 4566.81, 5385.63, 6168.49, 6913.9
 9, 969.13, 1915.01, 2833.63, 3722.42, 4579.33, 5402.61, 6190.67, 6942.05
 9.5, 969.34, 1915.87, 2835.65, 3726.17, 4585.43, 5411.71, 6203.47, 6959.28
 10, 968.65, 1914.87, 2834.81, 3726.01, 4586.51, 5414.62, 6208.85, 6967.8
 10.5, 967.26, 1912.44, 2831.77, 3722.81, 4583.66, 5412.68, 6208.38, 6969.42
 11, 965.35, 1908.94, 2827.04, 3717.28, 4577.78, 5406.94, 6203.32, 6965.59
 11.5, 963.05, 1904.61, 2821.03, 3709.96, 4569.56, 5398.27, 6194.67, 6957.47
 12, 960.45, 1899.67, 2814.05, 3701.28, 4559.56, 5387.34, 6183.25, 6946.01
 12.5, 957.65, 1894.3, 2806.37, 3691.6, 4548.21, 5374.69, 6169.69, 6931.96
 13, 954.71, 1888.61, 2798.19, 3681.2, 4535.88, 5360.76, 6154.52, 6915.93
 13.5, 951.67, 1882.72, 2789.66, 3670.27, 4522.84, 5345.9, 6138.15, 6898.41
 14, 948.58, 1876.7, 2780.9, 3659.01, 4509.31, 5330.38, 6120.93, 6879.79
 14.5, 945.46, 1870.61, 2772.03, 3647.54, 4495.47, 5314.41, 6103.1, 6860.39
 15, 942.34, 1864.51, 2763.1, 3635.97, 4481.46, 5298.18, 6084.88, 6840.45
 15.5, 939.24, 1858.43, 2754.18, 3624.38, 4467.39, 5281.82, 6066.45, 6820.19
 16, 936.17, 1852.4, 2745.32, 3612.85, 4453.34, 5265.44, 6047.94, 6799.76
 16.5, 933.14, 1846.44, 2736.56, 3601.41, 4439.38, 5249.13, 6029.46, 6779.29
 17, 930.17, 1840.58, 2727.92, 3590.11, 4425.57, 5232.95, 6011.08, 6758.9
 17.5, 927.24, 1834.81, 2719.41, 3578.99, 4411.94, 5216.96, 5992.88, 6738.65
 18, 924.38, 1829.16, 2711.07, 3568.05, 4398.53, 5201.19, 5974.9, 6718.61
 18.5, 921.58, 1823.63, 2702.89, 3557.32, 4385.35, 5185.69, 5957.19, 6698.83
 19, 918.85, 1818.22, 2694.89, 3546.81, 4372.43, 5170.46, 5939.77, 6679.35
 19.5, 916.17, 1812.94, 2687.06, 3536.52, 4359.77, 5155.52, 5922.67, 6660.2
 20, 913.57, 1807.78, 2679.42, 3526.46, 4347.38, 5140.89, 5905.9, 6641.4
 20.5, 911.03, 1802.75, 2671.95, 3516.64, 4335.27, 5126.58, 5889.47, 6622.96
 21, 908.55, 1797.85, 2664.67, 3507.04, 4323.43, 5112.58, 5873.39, 6604.89
 21.5, 906.14, 1793.06, 2657.57, 3497.68, 4311.87, 5098.89, 5857.66, 6587.2
 22, 903.79, 1788.4, 2650.64, 3488.54, 4300.58, 5085.52, 5842.28, 6569.89
 22.5, 901.5, 1783.86, 2643.89, 3479.63, 4289.57, 5072.46, 5827.24, 6552.95
 23, 899.27, 1779.43, 2637.31, 3470.94, 4278.82, 5059.71, 5812.55, 6536.4
 23.5, 897.1, 1775.12, 2630.89, 3462.46, 4268.33, 5047.26, 5798.21, 6520.21
 24, 894.98, 1770.91, 2624.63, 3454.19, 4258.09, 5035.11, 5784.19, 6504.39
 24.5, 892.92, 1766.81, 2618.53, 3446.12, 4248.1, 5023.24, 5770.5, 6488.93
 25, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
 26, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 136.7, 267.02, 390.03, 505.26, 612.44, 711.39, 802.02, 884.3
 1, 268.55, 524.78, 766.9, 993.96, 1205.4, 1400.86, 1580.15, 1743.18
 1.5, 391.33, 765.21, 1119.05, 1451.47, 1761.62, 2048.93, 2313.07, 2553.84
 2, 501.89, 982.22, 1437.73, 1866.65, 2267.82, 2640.46, 2984.04, 3298.25
 2.5, 598.41, 1172.23, 1717.68, 2232.64, 2715.66, 3165.73, 3582.14, 3964.38
 3, 680.34, 1334.09, 1957.06, 2546.85, 3101.78, 3620.61, 4102.39, 4546.43
 3.5, 748.19, 1468.64, 2156.91, 2810.37, 3427.12, 4005.74, 4545.07, 5044.23
 4, 803.17, 1578.14, 2320.28, 3026.84, 3695.75, 4325.4, 4914.48, 5461.92
 4.5, 846.9, 1665.59, 2451.4, 3201.46, 3913.61, 4586.1, 5217.48, 5806.51
 5, 881.07, 1734.27, 2554.9, 3340.04, 4087.48, 4795.39, 5462.19, 6086.53
 5.5, 907.35, 1787.33, 2635.3, 3448.35, 4224.2, 4960.97, 5657.04, 6310.95
 6, 927.21, 1827.66, 2696.78, 3531.68, 4330.09, 5090.1, 5810.04, 6488.4
 6.5, 941.92, 1857.72, 2742.95, 3594.72, 4410.8, 5189.27, 5928.44, 6626.79
 7, 952.54, 1879.62, 2776.85, 3641.43, 4471.14, 5264.08, 6018.57, 6733.06
 7.5, 959.94, 1895.04, 2801.02, 3675.11, 4515.15, 5319.26, 6085.78, 6813.15
 8, 964.83, 1905.38, 2817.49, 3698.46, 4546.14, 5358.71, 6134.53, 6872.06
 8.5, 967.74, 1911.75, 2827.93, 3713.65, 4566.81, 5385.63, 6168.49, 6913.9
 9, 969.13, 1915.01, 2833.63, 3722.42, 4579.33, 5402.61, 6190.67, 6942.05
 9.5, 969.34, 1915.87, 2835.65, 3726.17, 4585.43, 5411.71, 6203.47, 6959.28
 10, 968.65, 1914.87, 2834.81, 3726.01, 4586.51, 5414.62, 6208.85, 6967.8
 10.5, 967.26, 1912.44, 2831.77, 3722.81, 4583.66, 5412.68, 6208.38, 6969.42
 11, 965.35, 1908.94, 2827.04, 3717.28, 4577.78, 5406.94, 6203.32, 6965.59
 11.5, 963.05, 1904.61, 2821.03, 3709.96, 4569.56, 5398.27, 6194.67, 6957.47
 12, 960.45, 1899.67, 2814.05, 3701.28, 4559.56, 5387.34, 6183.25, 6946.01
 12.5, 957.65, 1894.3, 2806.37, 3691.6, 4548.21, 5374.69, 6169.69, 6931.96
 13, 954.71, 1888.61, 2798.19, 3681.2, 4535.88, 5360.76, 6154.52, 6915.93
 13.5, 951.67, 1882.72, 2789.66, 3670.27, 4522.84, 5345.9, 6138.15, 6898.41
 14, 948.58, 1876.7, 2780.9, 3659.01, 4509.31, 5330.38, 6120.93, 6879.79
 14.5, 945.46, 1870.61, 2772.03, 3647.54, 4495.47, 5314.41, 6103.1, 6860.39
 15, 942.34, 1864.51, 2763.1, 3635.97, 4481.46, 5298.18, 6084.88, 6840.45
 15.5, 939.24, 1858.43, 2754.18, 3624.38, 4467.39, 5281.82, 6066.45, 6820.19
 16, 936.17, 1852.4, 2745.32, 3612.85, 4453.34, 5265.44, 6047.94, 6799.76
 16.5, 933.14, 1846.44, 2736.56, 3601.41, 4439.38, 5249.13, 6029.46, 6779.29
 17, 930.17, 1840.58, 2727.92, 3590.11, 4425.57, 5232.95, 6011.08, 6758.9
 17.5, 927.24, 1834.81, 2719.41, 3578.99, 4411.94, 5216.96, 5992.88, 6738.65
 18, 924.38, 1829.16, 2711.07, 3568.05, 4398.53, 5201.19, 5974.9, 6718.61
 18.5, 921.58, 1823.63, 2702.89, 3557.32, 4385.35, 5185.69, 5957.19, 6698.83
 19, 918.85, 1818.22, 2694.89, 3546.81, 4372.43, 5170.46, 5939.77, 6679.35
 19.5, 916.17, 1812.94, 2687.06, 3536.52, 4359.77, 5155.52, 5922.67, 6660.2
 20, 913.57, 1807.78, 2679.42, 3526.46, 4347.38, 5140.89, 5905.9, 6641.4
 20.5, 911.03, 1802.75, 2671.95, 3516.64, 4335.27, 5126.58, 5889.47, 6622.96
 21, 908.55, 1797.85, 2664.67, 3507.04, 4323.43, 5112.58, 5873.39, 6604.89
 21.5, 906.14, 1793.06, 2657.57, 3497.68, 4311.87, 5098.89, 5857.66, 6587.2
 22, 903.79, 1788.4, 2650.64, 3488.54, 4300.58, 5085.52, 5842.28, 6569.89
 22.5, 901.5, 1783.86, 2643.89, 3479.63, 4289.57, 5072.46, 5827.24, 6552.95
 23, 899.27, 1779.43, 2637.31, 3470.94, 4278.82, 5059.71, 5812.55, 6536.4
 23.5, 897.1, 1775.12, 2630.89, 3462.46, 4268.33, 5047.26, 5798.21, 6520.21
 24, 894.98, 1770.91, 2624.63, 3454.19, 4258.09, 5035.11, 5784.19, 6504.39
 24.5, 892.92, 1766.81, 2618.53, 3446.12, 4248.1, 5023.24, 5770.5, 6488.93
 25, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
 26, 890.91, 1762.82, 2612.58, 3438.26, 4238.35, 5011.66, 5757.13, 6473.82
ENDTABLE
FY_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 235.28, 461.71, 677.96, 883.33, 1077.34, 1259.69, 1430.17, 1588.65
 1, 459.85, 902.69, 1325.96, 1728.27, 2108.7, 2466.63, 2801.63, 3113.42
 1.5, 664.55, 1305.19, 1918.27, 2501.78, 3054.38, 3575.14, 4063.37, 4518.63
 2, 843.04, 1656.81, 2436.8, 3180.46, 3886.07, 4552.37, 5178.44, 5763.61
 2.5, 992.35, 1951.66, 2872.76, 3752.69, 4589.37, 5381.28, 6127.24, 6826.37
 3, 1112.66, 2189.91, 3226.13, 4218.04, 5163.29, 6060.13, 6907.13, 7703.2
 3.5, 1206.45, 2376.23, 3503.43, 4584.55, 5617.06, 6598.99, 7528.73, 8405
 4, 1277.48, 2517.8, 3714.91, 4865.19, 5965.95, 7015.09, 8010.85, 8951.79
 4.5, 1329.85, 2622.56, 3872.05, 5074.6, 6227.48, 7328.45, 8375.68, 9367.59
 5, 1367.43, 2698.06, 3985.81, 5226.96, 6418.7, 7558.77, 8645.25, 9676.49
 5.5, 1393.59, 2750.87, 4065.83, 5334.73, 6554.78, 7723.66, 8839.44, 9900.39
 6, 1411.08, 2786.41, 4120.06, 5408.32, 6648.39, 7837.97, 8975.08, 10058
 6.5, 1422.06, 2808.96, 4154.83, 5456.01, 6709.73, 7913.68, 9065.89, 10164.61
 7, 1428.23, 2821.85, 4175.08, 5484.32, 6746.8, 7960.25, 9122.7, 10232.41
 7.5, 1430.84, 2827.6, 4184.57, 5498.2, 6765.77, 7985.01, 9153.97, 10270.91
 8, 1430.86, 2828.12, 4186.16, 5501.46, 6771.33, 7993.55, 9166.16, 10287.45
 8.5, 1429.01, 2824.85, 4181.99, 5496.94, 6767.06, 7990.12, 9164.22, 10287.65
 9, 1425.81, 2818.87, 4173.67, 5486.8, 6755.63, 7977.96, 9151.92, 10275.8
 9.5, 1421.68, 2810.96, 4162.41, 5472.64, 6739.06, 7959.5, 9132.08, 10255.15
 10, 1416.91, 2801.73, 4149.1, 5455.67, 6718.87, 7936.55, 9106.87, 10228.17
 10.5, 1411.71, 2791.62, 4134.42, 5436.8, 6696.2, 7910.51, 9077.89, 10196.72
 11, 1406.24, 2780.96, 4118.87, 5416.69, 6671.9, 7882.4, 9046.38, 10162.21
 11.5, 1400.64, 2769.99, 4102.81, 5395.85, 6646.61, 7853, 9013.24, 10125.72
 12, 1394.99, 2758.89, 4086.53, 5374.66, 6620.8, 7822.9, 8979.18, 10088.05
 12.5, 1389.34, 2747.8, 4070.22, 5353.39, 6594.84, 7792.53, 8944.71, 10049.79
 13, 1383.76, 2736.81, 4054.04, 5332.23, 6568.97, 7762.21, 8910.21, 10011.41
 13.5, 1378.27, 2725.99, 4038.08, 5311.35, 6543.39, 7732.17, 8875.97, 9973.24
 14, 1372.89, 2715.4, 4022.43, 5290.85, 6518.23, 7702.59, 8842.2, 9935.52
 14.5, 1367.65, 2705.05, 4007.14, 5270.79, 6493.6, 7673.59, 8809.05, 9898.44
 15, 1362.55, 2694.98, 3992.24, 5251.23, 6469.56, 7645.25, 8776.61, 9862.12
 15.5, 1357.6, 2685.19, 3977.76, 5232.2, 6446.15, 7617.64, 8744.97, 9826.65
 16, 1352.8, 2675.7, 3963.7, 5213.72, 6423.39, 7590.77, 8714.17, 9792.09
 16.5, 1348.16, 2666.5, 3950.08, 5195.79, 6401.31, 7564.68, 8684.23, 9758.47
 17, 1343.66, 2657.6, 3936.88, 5178.42, 6379.9, 7539.37, 8655.16, 9725.81
 17.5, 1339.31, 2648.99, 3924.1, 5161.6, 6359.15, 7514.83, 8626.97, 9694.11
 18, 1335.1, 2640.66, 3911.74, 5145.32, 6339.06, 7491.05, 8599.64, 9663.36
 18.5, 1331.04, 2632.6, 3899.79, 5129.57, 6319.61, 7468.03, 8573.16, 9633.55
 19, 1327.11, 2624.81, 3888.23, 5114.32, 6300.79, 7445.73, 8547.51, 9604.66
 19.5, 1323.31, 2617.28, 3877.04, 5099.57, 6282.57, 7424.15, 8522.66, 9576.67
 20, 1319.64, 2610, 3866.23, 5085.31, 6264.94, 7403.25, 8498.6, 9549.55
 20.5, 1316.09, 2602.96, 3855.76, 5071.5, 6247.88, 7383.02, 8475.29, 9523.28
 21, 1312.65, 2596.14, 3845.64, 5058.14, 6231.36, 7363.42, 8452.72, 9497.82
 21.5, 1309.33, 2589.55, 3835.84, 5045.2, 6215.36, 7344.44, 8430.85, 9473.15
 22, 1306.11, 2583.17, 3826.35, 5032.67, 6199.86, 7326.06, 8409.65, 9449.23
 22.5, 1303, 2576.99, 3817.16, 5020.53, 6184.85, 7308.24, 8389.11, 9426.04
 23, 1299.98, 2571, 3808.26, 5008.78, 6170.3, 7290.97, 8369.19, 9403.55
 23.5, 1297.06, 2565.2, 3799.63, 4997.38, 6156.19, 7274.22, 8349.87, 9381.73
 24, 1294.23, 2559.58, 3791.26, 4986.32, 6142.51, 7257.97, 8331.12, 9360.56
 24.5, 1291.48, 2554.12, 3783.15, 4975.6, 6129.23, 7242.2, 8312.93, 9340.01
 25, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
 26, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
ENDTABLE
FY_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 235.28, 461.71, 677.96, 883.33, 1077.34, 1259.69, 1430.17, 1588.65
 1, 459.85, 902.69, 1325.96, 1728.27, 2108.7, 2466.63, 2801.63, 3113.42
 1.5, 664.55, 1305.19, 1918.27, 2501.78, 3054.38, 3575.14, 4063.37, 4518.63
 2, 843.04, 1656.81, 2436.8, 3180.46, 3886.07, 4552.37, 5178.44, 5763.61
 2.5, 992.35, 1951.66, 2872.76, 3752.69, 4589.37, 5381.28, 6127.24, 6826.37
 3, 1112.66, 2189.91, 3226.13, 4218.04, 5163.29, 6060.13, 6907.13, 7703.2
 3.5, 1206.45, 2376.23, 3503.43, 4584.55, 5617.06, 6598.99, 7528.73, 8405
 4, 1277.48, 2517.8, 3714.91, 4865.19, 5965.95, 7015.09, 8010.85, 8951.79
 4.5, 1329.85, 2622.56, 3872.05, 5074.6, 6227.48, 7328.45, 8375.68, 9367.59
 5, 1367.43, 2698.06, 3985.81, 5226.96, 6418.7, 7558.77, 8645.25, 9676.49
 5.5, 1393.59, 2750.87, 4065.83, 5334.73, 6554.78, 7723.66, 8839.44, 9900.39
 6, 1411.08, 2786.41, 4120.06, 5408.32, 6648.39, 7837.97, 8975.08, 10058
 6.5, 1422.06, 2808.96, 4154.83, 5456.01, 6709.73, 7913.68, 9065.89, 10164.61
 7, 1428.23, 2821.85, 4175.08, 5484.32, 6746.8, 7960.25, 9122.7, 10232.41
 7.5, 1430.84, 2827.6, 4184.57, 5498.2, 6765.77, 7985.01, 9153.97, 10270.91
 8, 1430.86, 2828.12, 4186.16, 5501.46, 6771.33, 7993.55, 9166.16, 10287.45
 8.5, 1429.01, 2824.85, 4181.99, 5496.94, 6767.06, 7990.12, 9164.22, 10287.65
 9, 1425.81, 2818.87, 4173.67, 5486.8, 6755.63, 7977.96, 9151.92, 10275.8
 9.5, 1421.68, 2810.96, 4162.41, 5472.64, 6739.06, 7959.5, 9132.08, 10255.15
 10, 1416.91, 2801.73, 4149.1, 5455.67, 6718.87, 7936.55, 9106.87, 10228.17
 10.5, 1411.71, 2791.62, 4134.42, 5436.8, 6696.2, 7910.51, 9077.89, 10196.72
 11, 1406.24, 2780.96, 4118.87, 5416.69, 6671.9, 7882.4, 9046.38, 10162.21
 11.5, 1400.64, 2769.99, 4102.81, 5395.85, 6646.61, 7853, 9013.24, 10125.72
 12, 1394.99, 2758.89, 4086.53, 5374.66, 6620.8, 7822.9, 8979.18, 10088.05
 12.5, 1389.34, 2747.8, 4070.22, 5353.39, 6594.84, 7792.53, 8944.71, 10049.79
 13, 1383.76, 2736.81, 4054.04, 5332.23, 6568.97, 7762.21, 8910.21, 10011.41
 13.5, 1378.27, 2725.99, 4038.08, 5311.35, 6543.39, 7732.17, 8875.97, 9973.24
 14, 1372.89, 2715.4, 4022.43, 5290.85, 6518.23, 7702.59, 8842.2, 9935.52
 14.5, 1367.65, 2705.05, 4007.14, 5270.79, 6493.6, 7673.59, 8809.05, 9898.44
 15, 1362.55, 2694.98, 3992.24, 5251.23, 6469.56, 7645.25, 8776.61, 9862.12
 15.5, 1357.6, 2685.19, 3977.76, 5232.2, 6446.15, 7617.64, 8744.97, 9826.65
 16, 1352.8, 2675.7, 3963.7, 5213.72, 6423.39, 7590.77, 8714.17, 9792.09
 16.5, 1348.16, 2666.5, 3950.08, 5195.79, 6401.31, 7564.68, 8684.23, 9758.47
 17, 1343.66, 2657.6, 3936.88, 5178.42, 6379.9, 7539.37, 8655.16, 9725.81
 17.5, 1339.31, 2648.99, 3924.1, 5161.6, 6359.15, 7514.83, 8626.97, 9694.11
 18, 1335.1, 2640.66, 3911.74, 5145.32, 6339.06, 7491.05, 8599.64, 9663.36
 18.5, 1331.04, 2632.6, 3899.79, 5129.57, 6319.61, 7468.03, 8573.16, 9633.55
 19, 1327.11, 2624.81, 3888.23, 5114.32, 6300.79, 7445.73, 8547.51, 9604.66
 19.5, 1323.31, 2617.28, 3877.04, 5099.57, 6282.57, 7424.15, 8522.66, 9576.67
 20, 1319.64, 2610, 3866.23, 5085.31, 6264.94, 7403.25, 8498.6, 9549.55
 20.5, 1316.09, 2602.96, 3855.76, 5071.5, 6247.88, 7383.02, 8475.29, 9523.28
 21, 1312.65, 2596.14, 3845.64, 5058.14, 6231.36, 7363.42, 8452.72, 9497.82
 21.5, 1309.33, 2589.55, 3835.84, 5045.2, 6215.36, 7344.44, 8430.85, 9473.15
 22, 1306.11, 2583.17, 3826.35, 5032.67, 6199.86, 7326.06, 8409.65, 9449.23
 22.5, 1303, 2576.99, 3817.16, 5020.53, 6184.85, 7308.24, 8389.11, 9426.04
 23, 1299.98, 2571, 3808.26, 5008.78, 6170.3, 7290.97, 8369.19, 9403.55
 23.5, 1297.06, 2565.2, 3799.63, 4997.38, 6156.19, 7274.22, 8349.87, 9381.73
 24, 1294.23, 2559.58, 3791.26, 4986.32, 6142.51, 7257.97, 8331.12, 9360.56
 24.5, 1291.48, 2554.12, 3783.15, 4975.6, 6129.23, 7242.2, 8312.93, 9340.01
 25, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
 26, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
ENDTABLE
FY_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1) 2D_FROM_ZERO ! unit 3, axle 2, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 235.28, 461.71, 677.96, 883.33, 1077.34, 1259.69, 1430.17, 1588.65
 1, 459.85, 902.69, 1325.96, 1728.27, 2108.7, 2466.63, 2801.63, 3113.42
 1.5, 664.55, 1305.19, 1918.27, 2501.78, 3054.38, 3575.14, 4063.37, 4518.63
 2, 843.04, 1656.81, 2436.8, 3180.46, 3886.07, 4552.37, 5178.44, 5763.61
 2.5, 992.35, 1951.66, 2872.76, 3752.69, 4589.37, 5381.28, 6127.24, 6826.37
 3, 1112.66, 2189.91, 3226.13, 4218.04, 5163.29, 6060.13, 6907.13, 7703.2
 3.5, 1206.45, 2376.23, 3503.43, 4584.55, 5617.06, 6598.99, 7528.73, 8405
 4, 1277.48, 2517.8, 3714.91, 4865.19, 5965.95, 7015.09, 8010.85, 8951.79
 4.5, 1329.85, 2622.56, 3872.05, 5074.6, 6227.48, 7328.45, 8375.68, 9367.59
 5, 1367.43, 2698.06, 3985.81, 5226.96, 6418.7, 7558.77, 8645.25, 9676.49
 5.5, 1393.59, 2750.87, 4065.83, 5334.73, 6554.78, 7723.66, 8839.44, 9900.39
 6, 1411.08, 2786.41, 4120.06, 5408.32, 6648.39, 7837.97, 8975.08, 10058
 6.5, 1422.06, 2808.96, 4154.83, 5456.01, 6709.73, 7913.68, 9065.89, 10164.61
 7, 1428.23, 2821.85, 4175.08, 5484.32, 6746.8, 7960.25, 9122.7, 10232.41
 7.5, 1430.84, 2827.6, 4184.57, 5498.2, 6765.77, 7985.01, 9153.97, 10270.91
 8, 1430.86, 2828.12, 4186.16, 5501.46, 6771.33, 7993.55, 9166.16, 10287.45
 8.5, 1429.01, 2824.85, 4181.99, 5496.94, 6767.06, 7990.12, 9164.22, 10287.65
 9, 1425.81, 2818.87, 4173.67, 5486.8, 6755.63, 7977.96, 9151.92, 10275.8
 9.5, 1421.68, 2810.96, 4162.41, 5472.64, 6739.06, 7959.5, 9132.08, 10255.15
 10, 1416.91, 2801.73, 4149.1, 5455.67, 6718.87, 7936.55, 9106.87, 10228.17
 10.5, 1411.71, 2791.62, 4134.42, 5436.8, 6696.2, 7910.51, 9077.89, 10196.72
 11, 1406.24, 2780.96, 4118.87, 5416.69, 6671.9, 7882.4, 9046.38, 10162.21
 11.5, 1400.64, 2769.99, 4102.81, 5395.85, 6646.61, 7853, 9013.24, 10125.72
 12, 1394.99, 2758.89, 4086.53, 5374.66, 6620.8, 7822.9, 8979.18, 10088.05
 12.5, 1389.34, 2747.8, 4070.22, 5353.39, 6594.84, 7792.53, 8944.71, 10049.79
 13, 1383.76, 2736.81, 4054.04, 5332.23, 6568.97, 7762.21, 8910.21, 10011.41
 13.5, 1378.27, 2725.99, 4038.08, 5311.35, 6543.39, 7732.17, 8875.97, 9973.24
 14, 1372.89, 2715.4, 4022.43, 5290.85, 6518.23, 7702.59, 8842.2, 9935.52
 14.5, 1367.65, 2705.05, 4007.14, 5270.79, 6493.6, 7673.59, 8809.05, 9898.44
 15, 1362.55, 2694.98, 3992.24, 5251.23, 6469.56, 7645.25, 8776.61, 9862.12
 15.5, 1357.6, 2685.19, 3977.76, 5232.2, 6446.15, 7617.64, 8744.97, 9826.65
 16, 1352.8, 2675.7, 3963.7, 5213.72, 6423.39, 7590.77, 8714.17, 9792.09
 16.5, 1348.16, 2666.5, 3950.08, 5195.79, 6401.31, 7564.68, 8684.23, 9758.47
 17, 1343.66, 2657.6, 3936.88, 5178.42, 6379.9, 7539.37, 8655.16, 9725.81
 17.5, 1339.31, 2648.99, 3924.1, 5161.6, 6359.15, 7514.83, 8626.97, 9694.11
 18, 1335.1, 2640.66, 3911.74, 5145.32, 6339.06, 7491.05, 8599.64, 9663.36
 18.5, 1331.04, 2632.6, 3899.79, 5129.57, 6319.61, 7468.03, 8573.16, 9633.55
 19, 1327.11, 2624.81, 3888.23, 5114.32, 6300.79, 7445.73, 8547.51, 9604.66
 19.5, 1323.31, 2617.28, 3877.04, 5099.57, 6282.57, 7424.15, 8522.66, 9576.67
 20, 1319.64, 2610, 3866.23, 5085.31, 6264.94, 7403.25, 8498.6, 9549.55
 20.5, 1316.09, 2602.96, 3855.76, 5071.5, 6247.88, 7383.02, 8475.29, 9523.28
 21, 1312.65, 2596.14, 3845.64, 5058.14, 6231.36, 7363.42, 8452.72, 9497.82
 21.5, 1309.33, 2589.55, 3835.84, 5045.2, 6215.36, 7344.44, 8430.85, 9473.15
 22, 1306.11, 2583.17, 3826.35, 5032.67, 6199.86, 7326.06, 8409.65, 9449.23
 22.5, 1303, 2576.99, 3817.16, 5020.53, 6184.85, 7308.24, 8389.11, 9426.04
 23, 1299.98, 2571, 3808.26, 5008.78, 6170.3, 7290.97, 8369.19, 9403.55
 23.5, 1297.06, 2565.2, 3799.63, 4997.38, 6156.19, 7274.22, 8349.87, 9381.73
 24, 1294.23, 2559.58, 3791.26, 4986.32, 6142.51, 7257.97, 8331.12, 9360.56
 24.5, 1291.48, 2554.12, 3783.15, 4975.6, 6129.23, 7242.2, 8312.93, 9340.01
 25, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
 26, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
ENDTABLE
FY_TIRE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 235.28, 461.71, 677.96, 883.33, 1077.34, 1259.69, 1430.17, 1588.65
 1, 459.85, 902.69, 1325.96, 1728.27, 2108.7, 2466.63, 2801.63, 3113.42
 1.5, 664.55, 1305.19, 1918.27, 2501.78, 3054.38, 3575.14, 4063.37, 4518.63
 2, 843.04, 1656.81, 2436.8, 3180.46, 3886.07, 4552.37, 5178.44, 5763.61
 2.5, 992.35, 1951.66, 2872.76, 3752.69, 4589.37, 5381.28, 6127.24, 6826.37
 3, 1112.66, 2189.91, 3226.13, 4218.04, 5163.29, 6060.13, 6907.13, 7703.2
 3.5, 1206.45, 2376.23, 3503.43, 4584.55, 5617.06, 6598.99, 7528.73, 8405
 4, 1277.48, 2517.8, 3714.91, 4865.19, 5965.95, 7015.09, 8010.85, 8951.79
 4.5, 1329.85, 2622.56, 3872.05, 5074.6, 6227.48, 7328.45, 8375.68, 9367.59
 5, 1367.43, 2698.06, 3985.81, 5226.96, 6418.7, 7558.77, 8645.25, 9676.49
 5.5, 1393.59, 2750.87, 4065.83, 5334.73, 6554.78, 7723.66, 8839.44, 9900.39
 6, 1411.08, 2786.41, 4120.06, 5408.32, 6648.39, 7837.97, 8975.08, 10058
 6.5, 1422.06, 2808.96, 4154.83, 5456.01, 6709.73, 7913.68, 9065.89, 10164.61
 7, 1428.23, 2821.85, 4175.08, 5484.32, 6746.8, 7960.25, 9122.7, 10232.41
 7.5, 1430.84, 2827.6, 4184.57, 5498.2, 6765.77, 7985.01, 9153.97, 10270.91
 8, 1430.86, 2828.12, 4186.16, 5501.46, 6771.33, 7993.55, 9166.16, 10287.45
 8.5, 1429.01, 2824.85, 4181.99, 5496.94, 6767.06, 7990.12, 9164.22, 10287.65
 9, 1425.81, 2818.87, 4173.67, 5486.8, 6755.63, 7977.96, 9151.92, 10275.8
 9.5, 1421.68, 2810.96, 4162.41, 5472.64, 6739.06, 7959.5, 9132.08, 10255.15
 10, 1416.91, 2801.73, 4149.1, 5455.67, 6718.87, 7936.55, 9106.87, 10228.17
 10.5, 1411.71, 2791.62, 4134.42, 5436.8, 6696.2, 7910.51, 9077.89, 10196.72
 11, 1406.24, 2780.96, 4118.87, 5416.69, 6671.9, 7882.4, 9046.38, 10162.21
 11.5, 1400.64, 2769.99, 4102.81, 5395.85, 6646.61, 7853, 9013.24, 10125.72
 12, 1394.99, 2758.89, 4086.53, 5374.66, 6620.8, 7822.9, 8979.18, 10088.05
 12.5, 1389.34, 2747.8, 4070.22, 5353.39, 6594.84, 7792.53, 8944.71, 10049.79
 13, 1383.76, 2736.81, 4054.04, 5332.23, 6568.97, 7762.21, 8910.21, 10011.41
 13.5, 1378.27, 2725.99, 4038.08, 5311.35, 6543.39, 7732.17, 8875.97, 9973.24
 14, 1372.89, 2715.4, 4022.43, 5290.85, 6518.23, 7702.59, 8842.2, 9935.52
 14.5, 1367.65, 2705.05, 4007.14, 5270.79, 6493.6, 7673.59, 8809.05, 9898.44
 15, 1362.55, 2694.98, 3992.24, 5251.23, 6469.56, 7645.25, 8776.61, 9862.12
 15.5, 1357.6, 2685.19, 3977.76, 5232.2, 6446.15, 7617.64, 8744.97, 9826.65
 16, 1352.8, 2675.7, 3963.7, 5213.72, 6423.39, 7590.77, 8714.17, 9792.09
 16.5, 1348.16, 2666.5, 3950.08, 5195.79, 6401.31, 7564.68, 8684.23, 9758.47
 17, 1343.66, 2657.6, 3936.88, 5178.42, 6379.9, 7539.37, 8655.16, 9725.81
 17.5, 1339.31, 2648.99, 3924.1, 5161.6, 6359.15, 7514.83, 8626.97, 9694.11
 18, 1335.1, 2640.66, 3911.74, 5145.32, 6339.06, 7491.05, 8599.64, 9663.36
 18.5, 1331.04, 2632.6, 3899.79, 5129.57, 6319.61, 7468.03, 8573.16, 9633.55
 19, 1327.11, 2624.81, 3888.23, 5114.32, 6300.79, 7445.73, 8547.51, 9604.66
 19.5, 1323.31, 2617.28, 3877.04, 5099.57, 6282.57, 7424.15, 8522.66, 9576.67
 20, 1319.64, 2610, 3866.23, 5085.31, 6264.94, 7403.25, 8498.6, 9549.55
 20.5, 1316.09, 2602.96, 3855.76, 5071.5, 6247.88, 7383.02, 8475.29, 9523.28
 21, 1312.65, 2596.14, 3845.64, 5058.14, 6231.36, 7363.42, 8452.72, 9497.82
 21.5, 1309.33, 2589.55, 3835.84, 5045.2, 6215.36, 7344.44, 8430.85, 9473.15
 22, 1306.11, 2583.17, 3826.35, 5032.67, 6199.86, 7326.06, 8409.65, 9449.23
 22.5, 1303, 2576.99, 3817.16, 5020.53, 6184.85, 7308.24, 8389.11, 9426.04
 23, 1299.98, 2571, 3808.26, 5008.78, 6170.3, 7290.97, 8369.19, 9403.55
 23.5, 1297.06, 2565.2, 3799.63, 4997.38, 6156.19, 7274.22, 8349.87, 9381.73
 24, 1294.23, 2559.58, 3791.26, 4986.32, 6142.51, 7257.97, 8331.12, 9360.56
 24.5, 1291.48, 2554.12, 3783.15, 4975.6, 6129.23, 7242.2, 8312.93, 9340.01
 25, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
 26, 1288.81, 2548.83, 3775.27, 4965.19, 6116.34, 7226.89, 8295.26, 9320.05
ENDTABLE
FY_TIRE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

FZ_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CFZ2 component due to ride height

FZ_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CFZ2 component due to ride height

FZ_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CFZ2 component due to ride height

FZ_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 16 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 230 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 1, left side
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2) 230 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 1, right side
FZ_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 230 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 2, left side
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2) 230 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 1, axle 2, right side
FZ_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 1, left side
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 1, right side
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 2, left side
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 2, axle 2, right side
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1) 242 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 1, left side
FZ_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2) 242 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 1, right side
FZ_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1) 242 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 2, left side
FZ_TIRE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2) 242 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 3, axle 2, right side
FZ_TIRE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1) 220 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 4, axle 1, left side
FZ_TIRE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2) 220 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 4, axle 1, right side
FZ_TIRE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1) 220 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 4, axle 2, left side
FZ_TIRE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2) 220 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), unit 4, axle 2, right side
FZ_TIRE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

F_BOOST_R_CONSTANT(1) 0 ; N ! [D] Constant boost force component due to torsion bar
                        ! torque
F_BOOST_R_GAIN(1)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(1) 0 ; N ! Offset added (after gain) to get boost force
F_BOOST_R_COMBINE(1) MULTIPLY ! How to combine the two components
F_BOOST_R_V_CONSTANT(1) 1 ; - ! [D] Constant boost force component due to speed

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost force (N)
F_BOOST_R_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -7.92, -6192.8
 -7.788, -6037.9
 -7.656, -5883.1
 -7.524, -5728.3
 -7.392, -5573.4
 -7.26, -5418.6
 -7.128, -5263.8
 -6.996, -5109
 -6.864, -4954.2
 -6.732, -4799.3
 -6.6, -4644.5
 -6.468, -4489.8
 -6.336, -4334.9
 -6.204, -4180.1
 -6.072, -4025.2
 -5.94, -3870.4
 -5.808, -3715.6
 -5.676, -3560.8
 -5.544, -3406
 -5.016, -2895.1
 -4.884, -2794.4
 -4.752, -2693.8
 -4.62, -2593.2
 -4.488, -2492.6
 -4.356, -2392
 -4.224, -2291.3
 -4.092, -2190.7
 -3.96, -2090
 -3.828, -1989.4
 -3.696, -1888.8
 -3.564, -1788.2
 -3.432, -1687.5
 -3.3, -1586.9
 -3.168, -1486.2
 -3.036, -1385.6
 -2.904, -1285
 -2.772, -1184.4
 -2.64, -1083.7
 -2.508, -983.06
 -2.376, -882.5
 -2.244, -781.86
 -2.112, -681.2
 -1.98, -580.57
 -1.848, -479.93
 -1.716, -379.3
 -1.584, -278.67
 -1.056, -61.927
 -0.924, -54.186
 -0.792, -46.445
 -0.66, -38.704
 -0.528, -30.963
 -0.396, -23.222
 -0.264, -15.481
 -0.132, -7.7408
 0, 0
 0.132, 7.7408
 0.264, 15.481
 0.396, 23.222
 0.528, 30.963
 0.66, 38.704
 0.792, 46.445
 0.924, 54.186
 1.056, 61.927
 1.584, 278.67
 1.716, 379.3
 1.848, 479.93
 1.98, 580.57
 2.112, 681.2
 2.244, 781.86
 2.376, 882.5
 2.508, 983.06
 2.64, 1083.7
 2.772, 1184.4
 2.904, 1285
 3.036, 1385.6
 3.168, 1486.2
 3.3, 1586.9
 3.432, 1687.5
 3.564, 1788.2
 3.696, 1888.8
 3.828, 1989.4
 3.96, 2090
 4.092, 2190.7
 4.224, 2291.3
 4.356, 2392
 4.488, 2492.6
 4.62, 2593.2
 4.752, 2693.8
 4.884, 2794.4
 5.016, 2895.1
 5.544, 3406
 5.676, 3560.8
 5.808, 3715.6
 5.94, 3870.4
 6.072, 4025.2
 6.204, 4180.1
 6.336, 4334.9
 6.468, 4489.8
 6.6, 4644.5
 6.732, 4799.3
 6.864, 4954.2
 6.996, 5109
 7.128, 5263.8
 7.26, 5418.6
 7.392, 5573.4
 7.524, 5728.3
 7.656, 5883.1
 7.788, 6037.9
 7.92, 6192.8
ENDTABLE
F_BOOST_R_GAIN(2)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(2) 0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST(2) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST(2) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_F_BOOST)
F_BOOST_R_COMBINE(2) ADD ! How to combine the two components
SET_UNITS F_BOOST_R_V_TABLE(2) N ;
F_BOOST_R_V_CONSTANT(2) 0 ; N ! Constant boost force component due to speed

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost force (N)
F_BOOST_R_TABLE(3) SPLINE ! spline interpolation and extrapolation
 -8.1, -2232.1
 -7.965, -2176.4
 -7.83, -2120.6
 -7.695, -2064.8
 -7.56, -2008.9
 -7.425, -1953.1
 -7.29, -1897.4
 -7.155, -1841.6
 -7.02, -1785.8
 -6.885, -1729.9
 -6.75, -1674.1
 -6.615, -1618.4
 -6.48, -1562.6
 -6.345, -1506.8
 -6.21, -1450.9
 -6.075, -1395.2
 -5.94, -1339.3
 -5.805, -1283.5
 -5.67, -1227.7
 -5.13, -1043.6
 -4.995, -1007.2
 -4.86, -971.03
 -4.725, -934.72
 -4.59, -898.43
 -4.455, -862.2
 -4.32, -825.9
 -4.185, -789.6
 -4.05, -753.38
 -3.915, -717.09
 -3.78, -680.81
 -3.645, -644.54
 -3.51, -608.27
 -3.375, -572
 -3.24, -535.72
 -3.105, -499.45
 -2.97, -463.18
 -2.835, -426.91
 -2.7, -390.63
 -2.565, -354.36
 -2.43, -318.09
 -2.295, -281.81
 -2.16, -245.54
 -2.025, -209.26
 -1.89, -173
 -1.755, -136.73
 -1.62, -100.45
 -1.08, -22.322
 -0.945, -19.532
 -0.81, -16.741
 -0.675, -13.951
 -0.54, -11.161
 -0.405, -8.3707
 -0.27, -5.5804
 -0.135, -2.7902
 0, 0
 0.135, 2.7902
 0.27, 5.5804
 0.405, 8.3707
 0.54, 11.161
 0.675, 13.951
 0.81, 16.741
 0.945, 19.532
 1.08, 22.322
 1.62, 100.45
 1.755, 136.73
 1.89, 173
 2.025, 209.26
 2.16, 245.54
 2.295, 281.81
 2.43, 318.09
 2.565, 354.36
 2.7, 390.63
 2.835, 426.91
 2.97, 463.18
 3.105, 499.45
 3.24, 535.72
 3.375, 572
 3.51, 608.27
 3.645, 644.54
 3.78, 680.81
 3.915, 717.09
 4.05, 753.38
 4.185, 789.6
 4.32, 825.9
 4.455, 862.2
 4.59, 898.43
 4.725, 934.72
 4.86, 971.03
 4.995, 1007.2
 5.13, 1043.6
 5.67, 1227.7
 5.805, 1283.5
 5.94, 1339.3
 6.075, 1395.2
 6.21, 1450.9
 6.345, 1506.8
 6.48, 1562.6
 6.615, 1618.4
 6.75, 1674.1
 6.885, 1729.9
 7.02, 1785.8
 7.155, 1841.6
 7.29, 1897.4
 7.425, 1953.1
 7.56, 2008.9
 7.695, 2064.8
 7.83, 2120.6
 7.965, 2176.4
 8.1, 2232.1
ENDTABLE
F_BOOST_R_GAIN(3)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(3) 0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST(3) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST(3) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_F_BOOST)
F_BOOST_R_COMBINE(3) ADD ! How to combine the two components
SET_UNITS F_BOOST_R_V_TABLE(3) N ;
F_BOOST_R_V_CONSTANT(3) 0 ; N ! Constant boost force component due to speed

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 23, 0
 24, 0
 25, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 23, 0
 24, 0
 25, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 16 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 -55, -10000
 -54, 0
 -53, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 -55, -10000
 -54, 0
 -53, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(4,1) 0.04444444444 ! Coefficient: pitman arm angle per unit
                                        ! steering gear input angle (deg/deg), unit
                                        ! 4, axle 1
GEAR_ROT_GAIN(4,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

GEAR_TRANS_CONSTANT(1) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(2) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(3) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(4) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(4)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(4) 0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.00497996
 0.1, 0.00497996
 0.2, 0.00497996
 0.3, 0.00497993
 0.4, 0.00497944
 0.5, 0.0049751
 0.6, 0.00494985
 0.7, 0.00483929
 0.8, 0.00444524
 0.9, 0.00324356
 0.95, 0.00199827
 0.99, 0.000476173
 1.01, -0.000476173
 1.05, -0.00199827
 1.1, -0.00324356
 1.2, -0.00444524
 1.3, -0.00483929
 1.4, -0.00494985
 1.5, -0.0049751
 1.6, -0.00497944
 1.7, -0.00497993
 1.8, -0.00497996
 1.9, -0.00497996
 2, -0.00497996
ENDTABLE
INV_CAP_TC_GAIN(1)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(1) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(1) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(1) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.00819756
 0.1, 0.0081164
 0.2, 0.00803682
 0.3, 0.00795875
 0.4, 0.00788144
 0.5, 0.00779958
 0.6, 0.00768679
 0.7, 0.00744486
 0.8, 0.00677533
 0.9, 0.00489839
 0.95, 0.003004
 0.99, 0.000713225
 1, 0
 1.01, -0.000713225
 1.05, -0.003004
 1.1, -0.00489839
 1.2, -0.00677533
 1.3, -0.00744486
 1.4, -0.00768679
 1.5, -0.00779958
 1.6, -0.00788144
 1.7, -0.00795875
 1.8, -0.00803682
 1.9, -0.00819756
 2, -0.00819756
ENDTABLE
INV_CAP_TC_GAIN(2)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(2) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(2) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.006425
 0.1, 0.006425
 0.2, 0.006425
 0.3, 0.006425
 0.4, 0.006424
 0.5, 0.006419
 0.6, 0.006386
 0.7, 0.006243
 0.8, 0.005735
 0.9, 0.004185
 0.95, 0.002578
 0.99, 0.000614
 1.01, -0.000614
 1.05, -0.002578
 1.1, -0.004185
 1.2, -0.005735
 1.3, -0.006243
 1.4, -0.006386
 1.5, -0.006419
 1.6, -0.006424
 1.7, -0.006425
 1.8, -0.006425
 1.9, -0.006425
 2, -0.006425
ENDTABLE
INV_CAP_TC_GAIN(3)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(3) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(3) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(3) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IVEHICLE is used to identify the dataset when reading data.

ISHAFT_KIN_COEFFICIENT(1) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(1)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(1) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(2) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(2)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(2) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(3) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(3)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(3) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(4) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(4)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(4) 0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 16 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 0, 0
 392.266, -2.4511
 784.532, -4.8618
 1176.798, -7.2255
 1569.064, -9.5381
 1961.33, -11.7965
 2353.596, -13.9982
 2745.862, -16.1412
 3138.128, -18.2236
 3530.394, -20.2437
 3922.66, -22.2
 4314.926, -24.0912
 4707.192, -25.9161
 5099.458, -27.6734
 5491.724, -29.3621
 5883.99, -30.9812
 6276.256, -32.5296
 6668.522, -34.0065
 7060.788, -35.411
 7453.054, -36.7423
 7845.32, -37.9995
ENDTABLE
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 0, 0
 392.266, -2.4511
 784.532, -4.8618
 1176.798, -7.2255
 1569.064, -9.5381
 1961.33, -11.7965
 2353.596, -13.9982
 2745.862, -16.1412
 3138.128, -18.2236
 3530.394, -20.2437
 3922.66, -22.2
 4314.926, -24.0912
 4707.192, -25.9161
 5099.458, -27.6734
 5491.724, -29.3621
 5883.99, -30.9812
 6276.256, -32.5296
 6668.522, -34.0065
 7060.788, -35.411
 7453.054, -36.7423
 7845.32, -37.9995
ENDTABLE
KGAMMA_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 0, 0
 392.266, -2.4511
 784.532, -4.8618
 1176.798, -7.2255
 1569.064, -9.5381
 1961.33, -11.7965
 2353.596, -13.9982
 2745.862, -16.1412
 3138.128, -18.2236
 3530.394, -20.2437
 3922.66, -22.2
 4314.926, -24.0912
 4707.192, -25.9161
 5099.458, -27.6734
 5491.724, -29.3621
 5883.99, -30.9812
 6276.256, -32.5296
 6668.522, -34.0065
 7060.788, -35.411
 7453.054, -36.7423
 7845.32, -37.9995
ENDTABLE
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 0, 0
 392.266, -2.4511
 784.532, -4.8618
 1176.798, -7.2255
 1569.064, -9.5381
 1961.33, -11.7965
 2353.596, -13.9982
 2745.862, -16.1412
 3138.128, -18.2236
 3530.394, -20.2437
 3922.66, -22.2
 4314.926, -24.0912
 4707.192, -25.9161
 5099.458, -27.6734
 5491.724, -29.3621
 5883.99, -30.9812
 6276.256, -32.5296
 6668.522, -34.0065
 7060.788, -35.411
 7453.054, -36.7423
 7845.32, -37.9995
ENDTABLE
KGAMMA_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 0, 0
 539.36575, -3.948
 1078.7315, -7.9302
 1618.09725, -11.9585
 2157.463, -16.0411
 2696.82875, -20.1848
 3236.1945, -24.3954
 3775.56025, -28.6777
 4314.926, -33.0365
 4854.29175, -37.476
 5393.6575, -42
 5933.02325, -46.6122
 6472.389, -51.316
 7011.75475, -56.1146
 7551.1205, -61.0112
 8090.48625, -66.0087
 8629.852, -71.1099
 9169.21775, -76.3176
 9708.5835, -81.6343
 10247.94925, -87.0626
 10787.315, -92.6048
ENDTABLE
KGAMMA_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 0, 0
 539.36575, -3.948
 1078.7315, -7.9302
 1618.09725, -11.9585
 2157.463, -16.0411
 2696.82875, -20.1848
 3236.1945, -24.3954
 3775.56025, -28.6777
 4314.926, -33.0365
 4854.29175, -37.476
 5393.6575, -42
 5933.02325, -46.6122
 6472.389, -51.316
 7011.75475, -56.1146
 7551.1205, -61.0112
 8090.48625, -66.0087
 8629.852, -71.1099
 9169.21775, -76.3176
 9708.5835, -81.6343
 10247.94925, -87.0626
 10787.315, -92.6048
ENDTABLE
KGAMMA_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 0, 0
 539.36575, -3.948
 1078.7315, -7.9302
 1618.09725, -11.9585
 2157.463, -16.0411
 2696.82875, -20.1848
 3236.1945, -24.3954
 3775.56025, -28.6777
 4314.926, -33.0365
 4854.29175, -37.476
 5393.6575, -42
 5933.02325, -46.6122
 6472.389, -51.316
 7011.75475, -56.1146
 7551.1205, -61.0112
 8090.48625, -66.0087
 8629.852, -71.1099
 9169.21775, -76.3176
 9708.5835, -81.6343
 10247.94925, -87.0626
 10787.315, -92.6048
ENDTABLE
KGAMMA_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 0, 0
 539.36575, -3.948
 1078.7315, -7.9302
 1618.09725, -11.9585
 2157.463, -16.0411
 2696.82875, -20.1848
 3236.1945, -24.3954
 3775.56025, -28.6777
 4314.926, -33.0365
 4854.29175, -37.476
 5393.6575, -42
 5933.02325, -46.6122
 6472.389, -51.316
 7011.75475, -56.1146
 7551.1205, -61.0112
 8090.48625, -66.0087
 8629.852, -71.1099
 9169.21775, -76.3176
 9708.5835, -81.6343
 10247.94925, -87.0626
 10787.315, -92.6048
ENDTABLE
KGAMMA_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.5s Preview (No Path Line)
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! 0.5s Preview (No Path Line)
LTARG_CONSTANT(2)   0 ; m ! Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(3)         3  ! 0.5s Preview (No Path Line)
LTARG_CONSTANT(3)   0 ; m ! Constant lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(4)         4  ! 0.5s Preview (No Path Line)
LTARG_CONSTANT(4)   0 ; m ! Constant lateral offset
LTARG_OFFSET(4)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 70 ; mm ! Constant tire contact length, unit 1, axle 1,
                               ! left side
L_CONTACT_X_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,1,2) 70 ; mm ! Constant tire contact length, unit 1, axle 1,
                               ! right side
L_CONTACT_X_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 70 ; mm ! Constant tire contact length, unit 1, axle 2,
                               ! left side
L_CONTACT_X_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,2) 70 ; mm ! Constant tire contact length, unit 1, axle 2,
                               ! right side
L_CONTACT_X_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 85 ; mm ! Constant tire contact length, unit 2, axle 1,
                               ! left side
L_CONTACT_X_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 85 ; mm ! Constant tire contact length, unit 2, axle 1,
                               ! right side
L_CONTACT_X_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 85 ; mm ! Constant tire contact length, unit 2, axle 2,
                               ! left side
L_CONTACT_X_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 85 ; mm ! Constant tire contact length, unit 2, axle 2,
                               ! right side
L_CONTACT_X_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,1,1) 80 ; mm ! Constant tire contact length, unit 3, axle 1,
                               ! left side
L_CONTACT_X_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,1,2) 80 ; mm ! Constant tire contact length, unit 3, axle 1,
                               ! right side
L_CONTACT_X_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,2,1) 80 ; mm ! Constant tire contact length, unit 3, axle 2,
                               ! left side
L_CONTACT_X_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(3,2,2) 80 ; mm ! Constant tire contact length, unit 3, axle 2,
                               ! right side
L_CONTACT_X_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(4,1,1) 70 ; mm ! Constant tire contact length, unit 4, axle 1,
                               ! left side
L_CONTACT_X_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(4,1,2) 70 ; mm ! Constant tire contact length, unit 4, axle 1,
                               ! right side
L_CONTACT_X_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(4,2,1) 70 ; mm ! Constant tire contact length, unit 4, axle 2,
                               ! left side
L_CONTACT_X_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(4,2,2) 70 ; mm ! Constant tire contact length, unit 4, axle 2,
                               ! right side
L_CONTACT_X_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 175 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,1,2) 175 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 175 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,2) 175 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 265 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 265 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 265 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 265 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,1,1) 205 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,1,2) 205 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,2,1) 205 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(3,2,2) 205 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(4,1,1) 205 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left side
L_CONTACT_Y_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(4,1,2) 205 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right side
L_CONTACT_Y_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(4,2,1) 205 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left side
L_CONTACT_Y_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(4,2,2) 205 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right side
L_CONTACT_Y_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! unit 1, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.0568 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2) SPLINE_FLAT ! unit 1, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2) 0.0568 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! unit 1, axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.0568 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2) SPLINE_FLAT ! unit 1, axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2) 0.0568 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! unit 2, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! unit 2, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! unit 2, axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! unit 2, axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1) SPLINE_FLAT ! unit 3, axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1) 0.0596 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2) SPLINE_FLAT ! unit 3, axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2) 0.0596 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1) SPLINE_FLAT ! unit 3, axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1) 0.0596 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2) SPLINE_FLAT ! unit 3, axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2) 0.0596 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2) 5500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! unit 1, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 0.568 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2) SPLINE_FLAT ! unit 1, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2) 0.568 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! unit 1, axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 0.568 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2) SPLINE_FLAT ! unit 1, axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2) 0.568 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2) 2200 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! unit 2, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! unit 2, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! unit 2, axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! unit 2, axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1) SPLINE_FLAT ! unit 3, axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1) 0.596 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2) SPLINE_FLAT ! unit 3, axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2) 0.596 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1) SPLINE_FLAT ! unit 3, axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1) 0.596 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1) 5500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2) SPLINE_FLAT ! unit 3, axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2) 0.596 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2) 5500 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(1) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 517, 12.38, 38.05, 50.69, 51.72, 52.3, 52.59, 52.69, 52.71, 52.73, 52.71
 633, 14.85, 46.44, 69.83, 74.57, 75.33, 75.64, 75.75, 75.76, 75.76, 75.76
 750, 0, 43.69, 74.01, 80.68, 82.47, 83.13, 83.37, 83.39, 83.38, 83.37
 1107, -4.95, 35.31, 86.8, 99.33, 104.31, 106.01, 106.64, 106.7, 106.69, 106.64
 1463, -7.43, 23.56, 83.66, 103.95, 110.57, 113.58, 115.04, 115.39, 115.61, 117.81
 1820, -8.42, 12.87, 74.25, 105.8, 116.84, 121.14, 123.44, 124.07, 124.53, 127.71
 2177, -10.08, 4.95, 58.82, 101.84, 118.8, 128.7, 130.19, 131.67, 133.16, 136.44
 2533, -12.66, -3.2, 40.65, 91.04, 119.79, 133.5, 137.12, 139.62, 141.08, 143.55
 2890, -15.07, -7.58, 28.2, 76.75, 116.56, 134.95, 142.61, 144.54, 147.51, 149.99
 3247, -17.19, -11.03, 18.83, 61.24, 111.72, 133.65, 143.55, 147.51, 150.48, 153.45
 3603, -19.28, -14.05, 11.74, 48.27, 100.52, 129.69, 144.05, 148.5, 151.97, 154.94
 3960, -21.38, -16.86, 5.9, 38.21, 87.18, 124.31, 142.56, 148.01, 151.47, 153.45
 4317, -23.6, -19.69, 0.14, 28.73, 75.12, 118.65, 140.09, 145.04, 148.5, 151.44
 4673, -25.91, -22.51, -4.98, 20.6, 62.53, 110.16, 136.13, 141.08, 146.03, 148.5
 5030, -28.37, -25.29, -9.54, 13.5, 51.33, 99.48, 131.18, 136.13, 141.08, 143.55
 5387, -30.84, -28.12, -13.77, 7.22, 41.76, 88.29, 123.42, 128.21, 134.82, 136.24
 5743, -33.6, -31.08, -17.86, 1.41, 33.1, 76.64, 110.71, 118.26, 121.8, 123.21
 6100, -36.6, -34.2, -21.94, -4.08, 25.19, 65.33, 96.93, 103.96, 107.26, 108.53
 6500, -40.1, -40.1, -40.1, -40.1, -40.1, -40.1, -40.1, -40.1, -40.1, -40.1
 6700, -40.59, -40.59, -40.59, -40.59, -40.59, -40.59, -40.59, -40.59, -40.59, -40.59
ENDTABLE
MENGINE_GAIN(1)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(1)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(1) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(1) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(1) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(1) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(2) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 508, 33, 101.48, 135.16, 137.91, 139.47, 140.24, 140.51, 140.57, 140.61, 140.57
 617, 39.6, 123.83, 186.22, 198.86, 200.89, 201.71, 202, 202.03, 202.03, 202.03
 725, 0, 116.94, 196.72, 214.19, 218.83, 220.51, 221.13, 221.18, 221.17, 221.15
 1083, -13.2, 94.17, 231.45, 264.88, 278.15, 282.69, 284.38, 284.54, 284.5, 284.38
 1442, -19.8, 62.82, 223.08, 277.2, 294.86, 302.87, 306.78, 307.69, 308.29, 314.16
 1800, -22.44, 34.32, 198, 282.13, 311.58, 323.05, 329.18, 330.85, 332.08, 340.56
 2158, -26.89, 13.2, 156.87, 271.56, 316.8, 343.2, 347.16, 351.12, 355.08, 363.84
 2517, -33.76, -8.54, 108.4, 242.77, 319.44, 355.99, 365.64, 372.32, 376.2, 382.8
 2875, -40.18, -20.21, 75.21, 204.67, 310.83, 359.87, 380.3, 385.44, 393.36, 399.96
 3233, -45.85, -29.41, 50.22, 163.32, 297.93, 356.4, 382.8, 393.36, 401.28, 409.2
 3592, -51.42, -37.47, 31.31, 128.71, 268.05, 345.84, 384.12, 396, 405.24, 413.16
 3950, -57.02, -44.95, 15.74, 101.9, 232.47, 331.5, 380.16, 394.68, 403.92, 409.2
 4308, -62.94, -52.5, 0.37, 76.6, 200.32, 316.39, 373.56, 386.76, 396, 403.84
 4667, -69.1, -60.01, -13.29, 54.92, 166.75, 293.75, 363, 376.2, 389.4, 396
 5025, -75.65, -67.43, -25.45, 35.99, 136.87, 265.28, 349.8, 363, 376.2, 382.8
 5383, -82.23, -74.99, -36.71, 19.26, 111.36, 235.45, 329.12, 341.88, 359.52, 363.32
 5742, -89.59, -82.89, -47.62, 3.76, 88.26, 204.37, 295.22, 315.36, 324.81, 328.55
 6100, -97.61, -91.21, -58.51, -10.89, 67.17, 174.21, 258.48, 277.23, 286.03, 289.4
 6500, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92
 6700, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24
ENDTABLE
MENGINE_GAIN(2)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(2)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(2) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(2) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(2) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(2) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(3) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 517, 20.63, 63.42, 84.48, 86.19, 87.17, 87.65, 87.82, 87.86, 87.88, 87.86
 633, 24.75, 77.39, 116.38, 124.29, 125.56, 126.07, 126.25, 126.27, 126.27, 126.27
 750, 0, 72.82, 123.35, 134.46, 137.46, 138.54, 138.94, 138.98, 138.97, 138.96
 1107, -8.25, 58.85, 144.66, 165.55, 173.84, 176.68, 177.74, 177.84, 177.81, 177.74
 1463, -12.38, 39.26, 139.43, 173.25, 184.29, 189.29, 191.74, 192.31, 192.68, 196.35
 1820, -14.03, 21.45, 123.75, 176.33, 194.74, 201.9, 205.74, 206.78, 207.55, 212.85
 2177, -16.81, 8.25, 98.04, 169.73, 198, 214.5, 216.98, 219.45, 221.93, 227.4
 2533, -21.1, -5.34, 67.75, 151.73, 199.65, 222.5, 228.53, 232.7, 235.13, 239.25
 2890, -25.11, -12.63, 47.01, 127.92, 194.27, 224.92, 237.69, 240.9, 245.85, 249.98
 3247, -28.65, -18.38, 31.39, 102.07, 186.21, 222.75, 239.25, 245.85, 250.8, 255.75
 3603, -32.14, -23.42, 19.57, 80.44, 167.53, 216.15, 240.08, 247.5, 253.28, 258.23
 3960, -35.64, -28.09, 9.84, 63.68, 145.29, 207.19, 237.6, 246.68, 252.45, 255.75
 4317, -39.34, -32.81, 0.23, 47.88, 125.2, 197.75, 233.48, 241.73, 247.5, 252.4
 4673, -43.19, -37.51, -8.31, 34.33, 104.22, 183.59, 226.88, 235.13, 243.38, 247.5
 5030, -47.28, -42.14, -15.9, 22.49, 85.54, 165.8, 218.63, 226.88, 235.13, 239.25
 5387, -51.39, -46.87, -22.94, 12.04, 69.6, 147.15, 205.7, 213.68, 224.7, 227.07
 5743, -55.99, -51.8, -29.76, 2.35, 55.16, 127.73, 184.51, 197.1, 203.01, 205.34
 6100, -61.01, -57.01, -36.57, -6.8, 41.98, 108.88, 161.55, 173.27, 178.77, 180.88
 6500, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83
 6700, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65
ENDTABLE
MENGINE_GAIN(3)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(3)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(3) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(3) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(3) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(3) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 22 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 22 values of engine
! torque (N-m).
MENGINE_CARPET(4) 2D_LINEAR
 0, 0, 0.00098, 0.0022, 0.0039, 0.0061, 0.0088, 0.012, 0.016, 0.024, 0.035, 0.048, 0.071, 0.098, 0.13, 0.18, 0.23, 0.3, 0.39, 0.52, 0.66, 0.82, 1
 508, -1.7099, 1.4168, 5.0266, 8.3318, 11.075, 13.301, 15.099, 16.581, 18.67, 19.716, 20.11, 20.354, 20.519, 20.639, 20.752, 20.832, 20.867, 20.89, 20.906, 20.916, 20.921, 20.916
 596, -3.3267, -0.31634, 3.6703, 7.9795, 12.028, 15.535, 18.425, 20.744, 24.059, 26.223, 27.708, 29.07, 29.589, 29.764, 29.891, 29.967, 30.013, 30.043, 30.057, 30.061, 30.062, 30.061
 860, -4.85, -3.4735, -1.5911, 1.2889, 4.9004, 9.2728, 14.011, 18.519, 25.92, 31.029, 34.439, 37.584, 39.413, 40.54, 41.387, 41.829, 42.062, 42.224, 42.314, 42.337, 42.332, 42.315
 1300, -5.5606, -4.7937, -3.9451, -2.5289, -0.5629, 1.8561, 4.684, 7.9211, 15.865, 24.168, 30.917, 37.844, 41.98, 44.461, 46.36, 47.424, 48.067, 48.578, 48.98, 49.229, 49.412, 49.553
 1740, -5.9874, -5.5028, -4.8959, -4.0014, -2.6936, -1.015, 0.9789, 3.2793, 8.7723, 15.592, 23.341, 33.371, 40.407, 45.021, 48.789, 51.007, 52.351, 53.273, 53.798, 54.013, 54.104, 54.138
 2180, -6.4971, -6.1404, -5.6641, -5.0222, -4.0761, -2.8132, -1.2707, 0.50982, 4.7527, 9.9184, 16.129, 26.921, 36.122, 42.632, 48.061, 51.165, 52.969, 54.24, 55.029, 55.398, 55.549, 55.6
 2620, -7.1433, -6.8629, -6.4792, -5.979, -5.241, -4.245, -3.0075, -1.5561, 1.9364, 6.1587, 11.19, 20.329, 30.452, 38.708, 46.251, 50.825, 53.547, 55.455, 56.587, 57.098, 57.309, 57.381
 3060, -7.8102, -7.5713, -7.2301, -6.821, -6.2171, -5.3994, -4.3767, -3.1724, -0.265, 3.2927, 7.4729, 15.095, 24.3, 34.087, 44.331, 51.144, 55.439, 58.578, 60.502, 61.395, 61.775, 61.908
 3500, -8.5108, -8.3058, -7.9963, -7.6517, -7.1423, -6.449, -5.5757, -4.5409, -2.0388, 1.0305, 4.6584, 11.225, 19.151, 28.38, 39.884, 48.276, 53.88, 58.167, 60.906, 62.218, 62.793, 63
 3940, -9.2271, -9.0547, -8.7838, -8.4854, -8.0456, -7.4461, -6.6881, -5.784, -3.5829, -0.8751, 2.342, 8.1401, 15.162, 23.368, 34.589, 43.288, 49.325, 54.055, 57.119, 58.588, 59.226, 59.448
 4380, -10.02, -9.8682, -9.6252, -9.3649, -8.9838, -8.4647, -7.811, -7.0296, -5.1226, -2.7647, 0.054898, 5.1638, 11.398, 18.671, 29.806, 39.752, 47.078, 53.025, 56.982, 58.913, 59.771, 60.089
 4820, -10.865, -10.728, -10.508, -10.282, -9.9532, -9.5025, -8.9304, -8.244, -6.5609, -4.4738, -1.9772, 2.575, 8.1724, 14.686, 24.812, 35.363, 43.708, 50.817, 55.739, 58.216, 59.343, 59.772
 5260, -11.744, -11.632, -11.456, -11.257, -10.96, -10.551, -10.032, -9.4116, -7.897, -6.024, -3.7859, 0.3026, 5.3541, 11.248, 20.365, 30.644, 39.472, 47.318, 52.919, 55.808, 57.144, 57.658
 5700, -12.72, -12.61, -12.459, -12.235, -11.99, -11.632, -11.158, -10.593, -9.2118, -7.5029, -5.4619, -1.7337, 2.8658, 8.2565, 16.569, 26.203, 35.033, 43.108, 48.971, 52.045, 53.494, 54.06
 6140, -13.782, -13.685, -13.542, -13.33, -13.098, -12.771, -12.334, -11.813, -10.536, -8.9631, -7.085, -3.6581, 0.55991, 5.5114, 13.132, 22.01, 30.41, 38.215, 43.928, 46.923, 48.33, 48.886
 6580, -14.946, -14.853, -14.712, -14.524, -14.305, -13.979, -13.572, -13.083, -11.905, -10.447, -8.7055, -5.5284, -1.6205, 2.964, 9.9945, 18.163, 25.922, 33.148, 38.46, 41.25, 42.56, 43.061
ENDTABLE
MENGINE_GAIN(4)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(4)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(4) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(4) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(4) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(4) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

MODE_TRANS_CONSTANT(1) 5 ; - ! Constant transmission mode
MODE_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(2) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(3) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(4) 5 ; - ! Constant transmission mode
MODE_TRANS_GAIN(4)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(4) 0 ; - ! Offset added (after gain) to get transmission mode

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(3) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMX

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MX_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMX2 component due to ride height

MX_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMX2 component due to ride height

MX_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CMX2 component due to ride height

MX_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 8 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 205 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 184 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(2,1) 384 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

MX_AUX_COEFFICIENT(3,1) 384 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 1
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 1

MX_AUX_COEFFICIENT(3,2) 384 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 2
MX_AUX_GAIN(3,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 2

MX_AUX_CONSTANT(4,1) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 4, axle 1
MX_AUX_GAIN(4,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 1

MX_AUX_CONSTANT(4,2) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 4, axle 2
MX_AUX_GAIN(4,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMY

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MY_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMY2 component due to ride height

MY_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMY2 component due to ride height

MY_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CMY2 component due to ride height

MY_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MY_BRAKE_COEFFICIENT(1,1,1) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 1, left side
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,1,2) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 1, axle 1, right side
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2,1) 75 ! Coefficient: brake torque per unit wheel cylinder
                               ! pressure (N-m/MPa), unit 1, axle 2, left side
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2,2) 75 ! Coefficient: brake torque per unit wheel cylinder
                               ! pressure (N-m/MPa), unit 1, axle 2, right side
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,1) 350 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, left side
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,2) 350 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, right side
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, left side
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, right side
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,1) 200 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 1, left side
MY_BRAKE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,2) 200 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 1, right side
MY_BRAKE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,2,1) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 2, left side
MY_BRAKE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,2,2) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 2, right side
MY_BRAKE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(4,1,1) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 4, axle 1, left side
MY_BRAKE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(4,1,2) 100 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 4, axle 1, right side
MY_BRAKE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(4,2,1) 75 ! Coefficient: brake torque per unit wheel cylinder
                               ! pressure (N-m/MPa), unit 4, axle 2, left side
MY_BRAKE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(4,2,2) 75 ! Coefficient: brake torque per unit wheel cylinder
                               ! pressure (N-m/MPa), unit 4, axle 2, right side
MY_BRAKE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

MZ_AERO_SHAPING_2_CONSTANT(1) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(1) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(1) 1 ; - ! [D] Constant CMZ2 component due to ride height

MZ_AERO_SHAPING_2_CONSTANT(2) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(2) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(2) 1 ; - ! [D] Constant CMZ2 component due to ride height

MZ_AERO_SHAPING_2_CONSTANT(3) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(3) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(3) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(3) 1 ; - ! [D] Constant CMZ2 component due to ride height

MZ_AERO_SHAPING_2_CONSTANT(4) 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN(4) 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE(4) MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT(4) 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1,1) LINEAR_FLAT ! unit 1, axle 1, left side
 0, 50
 0.1, 45.125
 0.2, 40.5
 0.3, 36.125
 0.4, 32
 0.5, 28.125
 0.6, 24.5
 0.7, 21.125
 0.8, 18
 0.9, 15.125
 1, 12.5
 1.1, 10.125
 1.2, 8
 1.3, 6.125
 1.4, 4.5
 1.5, 3.125
 1.6, 2
 1.7, 1.125
 1.8, 0.5
 1.9, 0.125
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1,2) LINEAR_FLAT ! unit 1, axle 1, right side
 0, 50
 0.1, 45.125
 0.2, 40.5
 0.3, 36.125
 0.4, 32
 0.5, 28.125
 0.6, 24.5
 0.7, 21.125
 0.8, 18
 0.9, 15.125
 1, 12.5
 1.1, 10.125
 1.2, 8
 1.3, 6.125
 1.4, 4.5
 1.5, 3.125
 1.6, 2
 1.7, 1.125
 1.8, 0.5
 1.9, 0.125
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(2,1,1) LINEAR_FLAT ! unit 2, axle 1, left side
 0, 160.05
 2, 0.05
 2.01, 0.05
ENDTABLE
MZ_PARKING_STEER_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(2,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(2,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, left side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(2,1,2) LINEAR_FLAT ! unit 2, axle 1, right side
 0, 160.05
 2, 0.05
 2.01, 0.05
ENDTABLE
MZ_PARKING_STEER_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(2,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(2,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, right side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(3,1,1) LINEAR_FLAT ! unit 3, axle 1, left side
 0, 65
 0.1, 58.662
 0.2, 52.65
 0.3, 46.962
 0.4, 41.6
 0.5, 36.562
 0.6, 31.85
 0.7, 27.462
 0.8, 23.4
 0.9, 19.662
 1, 16.25
 1.1, 13.162
 1.2, 10.4
 1.3, 7.9625
 1.4, 5.85
 1.5, 4.0625
 1.6, 2.6
 1.7, 1.4625
 1.8, 0.65
 1.9, 0.1625
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(3,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(3,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(3,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, left side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(3,1,2) LINEAR_FLAT ! unit 3, axle 1, right side
 0, 65
 0.1, 58.662
 0.2, 52.65
 0.3, 46.962
 0.4, 41.6
 0.5, 36.562
 0.6, 31.85
 0.7, 27.462
 0.8, 23.4
 0.9, 19.662
 1, 16.25
 1.1, 13.162
 1.2, 10.4
 1.3, 7.9625
 1.4, 5.85
 1.5, 4.0625
 1.6, 2.6
 1.7, 1.4625
 1.8, 0.65
 1.9, 0.1625
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(3,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(3,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(3,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(4,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 4, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(4,1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 4,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(4,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 4, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(4,1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                      ! component due to vertical load, unit 4,
                                      ! axle 1, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 3.63841689, 7.167976437, 10.57049835, 13.83887621, 16.96898498, 19.96037444, 22.80465341, 25.50938705
 1, 7.380277171, 14.54752918, 21.46738822, 28.11913715, 34.49190055, 40.57246253, 46.35456265, 51.83878832
 1.5, 10.48921868, 20.81311684, 30.92379499, 40.78308075, 50.3458885, 59.58130303, 68.44983319, 76.92471145
 2, 11.74443143, 23.62625851, 35.62169635, 47.68768585, 59.76248468, 71.77420133, 83.63899602, 95.27175876
 2.5, 10.96767339, 22.41946337, 34.41959155, 46.97083594, 60.05591821, 73.61586927, 87.57710917, 101.8305202
 3, 9.122542075, 18.92289782, 29.53128661, 41.03357141, 53.48995454, 66.93960538, 81.37940398, 96.78482364
 3.5, 7.137325838, 14.97671133, 23.68308305, 33.39830551, 44.24529378, 56.353012, 69.82218654, 84.74985902
 4, 5.419001151, 11.47927204, 18.35211567, 26.1890575, 35.15539347, 45.41949424, 57.16284914, 70.56509916
 4.5, 4.044161405, 8.643689616, 13.95936861, 20.13849321, 27.34805336, 35.76697791, 45.60756495, 57.10260803
 5, 2.970233893, 6.417288173, 10.47522155, 15.28215293, 20.99454451, 27.78532256, 35.86185794, 45.473943
 5.5, 2.13714156, 4.674578551, 7.736987608, 11.44036263, 15.92276463, 21.34582916, 27.90654532, 35.83791206
 6, 1.482392449, 3.30371486, 5.575148667, 8.39538635, 11.88329357, 16.18824325, 21.48265341, 27.98087306
 6.5, 0.959245108, 2.21543133, 3.853178934, 5.961269877, 8.650520029, 12.0383941, 16.29064599, 21.59285197
 7, 0.542227671, 1.337084389, 2.461369732, 3.995589128, 6.03179882, 8.676040678, 12.06763631, 16.38173376
 7.5, 0.197709305, 0.618047049, 1.325280968, 2.389598435, 3.891619551, 5.921286011, 8.605957496, 12.09662467
 8, -0.087042267, 0.023489511, 0.387017386, 1.061296605, 2.119439583, 3.642792007, 5.738979325, 8.543108516
 8.5, -0.324443679, -0.474805078, -0.401070818, -0.051280358, 0.635046768, 1.734623103, 3.339823438, 5.571607342
 9, -0.526651204, -0.898610862, -1.067856374, -0.993614804, -0.618381073, 0.121591261, 1.313704185, 3.056497503
 9.5, -0.699834109, -1.260520239, -1.641548768, -1.801143368, -1.693188302, -1.257106259, -0.41891511, 0.911271955
 10, -0.850047206, -1.572827873, -2.135045241, -2.499552612, -2.619269832, -2.445293973, -1.910263562, -0.931977435
 10.5, -0.980335157, -1.84762192, -2.566826454, -3.104987936, -3.425774767, -3.479561876, -3.20805171, -2.536088481
 11, -1.096591118, -2.091021553, -2.94918743, -3.642240051, -4.135219915, -4.386419389, -4.343149537, -3.936686718
 11.5, -1.201770076, -2.306060869, -3.288347975, -4.117790845, -4.763616099, -5.188753072, -5.345682635, -5.174875018
 12, -1.295872734, -2.498678879, -3.59036317, -4.540928827, -5.32365716, -5.905927377, -6.238939527, -6.274905524
 12.5, -1.37891982, -2.674768086, -3.864216916, -4.923843639, -5.827815295, -6.547732161, -7.039459151, -7.257273084
 13, -1.4537937, -2.831360412, -4.109920515, -5.269607342, -6.282366325, -7.12686778, -7.760373058, -8.142087748
 13.5, -1.523359668, -2.977234243, -4.336319959, -5.584193004, -6.696496754, -7.652792055, -8.414593434, -8.942725778
 14, -1.587602411, -3.109394582, -4.543364246, -5.870582039, -7.07629129, -8.131725361, -9.008596783, -9.669136443
 14.5, -1.646464461, -3.230697854, -4.733966272, -6.137724695, -7.424731633, -8.572944709, -9.555021505, -10.33758867
 15, -1.702858601, -3.344046838, -4.910973486, -6.382494155, -7.744782408, -8.979496216, -10.06016691, -10.94806843
 15.5, -1.753809988, -3.449362042, -5.07430977, -6.610812065, -8.045511586, -9.357473242, -10.52392997, -11.5134668
 16, -1.802208411, -3.549542946, -5.226852856, -6.822570925, -8.320608279, -9.706712278, -10.95569575, -12.03688084
 16.5, -1.848021182, -3.641525051, -5.368516251, -7.020636384, -8.582247882, -10.0333132, -11.35847343, -12.52465075
 17, -1.888279674, -3.728253902, -5.505205966, -7.20795245, -8.824124572, -10.34022802, -11.73204573, -12.98311133
 17.5, -1.928801647, -3.809605574, -5.630774089, -7.384423548, -9.052247146, -10.62729644, -12.08584214, -13.40877993
 18, -1.966672621, -3.888565339, -5.751220093, -7.549863981, -9.269589549, -10.8974694, -12.41964953, -13.81122754
 18.5, -2.001812, -3.962062308, -5.86642358, -7.707265752, -9.472868519, -11.15376829, -12.73329498, -14.18699714
 19, -2.037195221, -4.030015108, -5.973286505, -7.856521906, -9.668216545, -11.39599876, -13.02979542, -14.5456923
 19.5, -2.069781353, -4.098431725, -6.077782978, -7.997483509, -9.852352312, -11.62717123, -13.30898271, -14.88384402
 20, -2.099597028, -4.161188024, -6.176839821, -8.13318378, -10.02829867, -11.84716212, -13.57711333, -15.20783486
 20.5, -2.129571102, -4.221294637, -6.270341358, -8.263543881, -10.19595061, -12.05585423, -13.83405302, -15.51418331
 21, -2.159693551, -4.281761917, -6.358250514, -8.388427979, -10.35515812, -12.25625792, -14.0764105, -15.80599194
 21.5, -2.186974273, -4.336412718, -6.446660725, -8.504692065, -10.50899951, -12.44825642, -14.31051737, -16.0864329
 22, -2.211334173, -4.391361244, -6.529337881, -8.621594796, -10.65738825, -12.63177241, -14.53299819, -16.35200842
 22.5, -2.238856814, -4.443504924, -6.609343532, -8.729707159, -10.79706617, -12.80664131, -14.74694998, -16.60919195
 23, -2.263448974, -4.492791277, -6.686615255, -8.835213062, -10.93429681, -12.97927074, -14.95557897, -16.85458016
 23.5, -2.285073155, -4.542311582, -6.7611099, -8.938059357, -11.06580848, -13.14307549, -15.1522051, -17.09464775
 24, -2.309838271, -4.588898156, -6.832787181, -9.03820591, -11.19474363, -13.3012125, -15.3465585, -17.32263556
 24.5, -2.331625008, -4.635669156, -6.904771149, -9.132429111, -11.31784295, -13.45357654, -15.53197875, -17.54173239
 25, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
 26, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2) 2D_FROM_ZERO ! unit 1, axle 1, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 3.63841689, 7.167976437, 10.57049835, 13.83887621, 16.96898498, 19.96037444, 22.80465341, 25.50938705
 1, 7.380277171, 14.54752918, 21.46738822, 28.11913715, 34.49190055, 40.57246253, 46.35456265, 51.83878832
 1.5, 10.48921868, 20.81311684, 30.92379499, 40.78308075, 50.3458885, 59.58130303, 68.44983319, 76.92471145
 2, 11.74443143, 23.62625851, 35.62169635, 47.68768585, 59.76248468, 71.77420133, 83.63899602, 95.27175876
 2.5, 10.96767339, 22.41946337, 34.41959155, 46.97083594, 60.05591821, 73.61586927, 87.57710917, 101.8305202
 3, 9.122542075, 18.92289782, 29.53128661, 41.03357141, 53.48995454, 66.93960538, 81.37940398, 96.78482364
 3.5, 7.137325838, 14.97671133, 23.68308305, 33.39830551, 44.24529378, 56.353012, 69.82218654, 84.74985902
 4, 5.419001151, 11.47927204, 18.35211567, 26.1890575, 35.15539347, 45.41949424, 57.16284914, 70.56509916
 4.5, 4.044161405, 8.643689616, 13.95936861, 20.13849321, 27.34805336, 35.76697791, 45.60756495, 57.10260803
 5, 2.970233893, 6.417288173, 10.47522155, 15.28215293, 20.99454451, 27.78532256, 35.86185794, 45.473943
 5.5, 2.13714156, 4.674578551, 7.736987608, 11.44036263, 15.92276463, 21.34582916, 27.90654532, 35.83791206
 6, 1.482392449, 3.30371486, 5.575148667, 8.39538635, 11.88329357, 16.18824325, 21.48265341, 27.98087306
 6.5, 0.959245108, 2.21543133, 3.853178934, 5.961269877, 8.650520029, 12.0383941, 16.29064599, 21.59285197
 7, 0.542227671, 1.337084389, 2.461369732, 3.995589128, 6.03179882, 8.676040678, 12.06763631, 16.38173376
 7.5, 0.197709305, 0.618047049, 1.325280968, 2.389598435, 3.891619551, 5.921286011, 8.605957496, 12.09662467
 8, -0.087042267, 0.023489511, 0.387017386, 1.061296605, 2.119439583, 3.642792007, 5.738979325, 8.543108516
 8.5, -0.324443679, -0.474805078, -0.401070818, -0.051280358, 0.635046768, 1.734623103, 3.339823438, 5.571607342
 9, -0.526651204, -0.898610862, -1.067856374, -0.993614804, -0.618381073, 0.121591261, 1.313704185, 3.056497503
 9.5, -0.699834109, -1.260520239, -1.641548768, -1.801143368, -1.693188302, -1.257106259, -0.41891511, 0.911271955
 10, -0.850047206, -1.572827873, -2.135045241, -2.499552612, -2.619269832, -2.445293973, -1.910263562, -0.931977435
 10.5, -0.980335157, -1.84762192, -2.566826454, -3.104987936, -3.425774767, -3.479561876, -3.20805171, -2.536088481
 11, -1.096591118, -2.091021553, -2.94918743, -3.642240051, -4.135219915, -4.386419389, -4.343149537, -3.936686718
 11.5, -1.201770076, -2.306060869, -3.288347975, -4.117790845, -4.763616099, -5.188753072, -5.345682635, -5.174875018
 12, -1.295872734, -2.498678879, -3.59036317, -4.540928827, -5.32365716, -5.905927377, -6.238939527, -6.274905524
 12.5, -1.37891982, -2.674768086, -3.864216916, -4.923843639, -5.827815295, -6.547732161, -7.039459151, -7.257273084
 13, -1.4537937, -2.831360412, -4.109920515, -5.269607342, -6.282366325, -7.12686778, -7.760373058, -8.142087748
 13.5, -1.523359668, -2.977234243, -4.336319959, -5.584193004, -6.696496754, -7.652792055, -8.414593434, -8.942725778
 14, -1.587602411, -3.109394582, -4.543364246, -5.870582039, -7.07629129, -8.131725361, -9.008596783, -9.669136443
 14.5, -1.646464461, -3.230697854, -4.733966272, -6.137724695, -7.424731633, -8.572944709, -9.555021505, -10.33758867
 15, -1.702858601, -3.344046838, -4.910973486, -6.382494155, -7.744782408, -8.979496216, -10.06016691, -10.94806843
 15.5, -1.753809988, -3.449362042, -5.07430977, -6.610812065, -8.045511586, -9.357473242, -10.52392997, -11.5134668
 16, -1.802208411, -3.549542946, -5.226852856, -6.822570925, -8.320608279, -9.706712278, -10.95569575, -12.03688084
 16.5, -1.848021182, -3.641525051, -5.368516251, -7.020636384, -8.582247882, -10.0333132, -11.35847343, -12.52465075
 17, -1.888279674, -3.728253902, -5.505205966, -7.20795245, -8.824124572, -10.34022802, -11.73204573, -12.98311133
 17.5, -1.928801647, -3.809605574, -5.630774089, -7.384423548, -9.052247146, -10.62729644, -12.08584214, -13.40877993
 18, -1.966672621, -3.888565339, -5.751220093, -7.549863981, -9.269589549, -10.8974694, -12.41964953, -13.81122754
 18.5, -2.001812, -3.962062308, -5.86642358, -7.707265752, -9.472868519, -11.15376829, -12.73329498, -14.18699714
 19, -2.037195221, -4.030015108, -5.973286505, -7.856521906, -9.668216545, -11.39599876, -13.02979542, -14.5456923
 19.5, -2.069781353, -4.098431725, -6.077782978, -7.997483509, -9.852352312, -11.62717123, -13.30898271, -14.88384402
 20, -2.099597028, -4.161188024, -6.176839821, -8.13318378, -10.02829867, -11.84716212, -13.57711333, -15.20783486
 20.5, -2.129571102, -4.221294637, -6.270341358, -8.263543881, -10.19595061, -12.05585423, -13.83405302, -15.51418331
 21, -2.159693551, -4.281761917, -6.358250514, -8.388427979, -10.35515812, -12.25625792, -14.0764105, -15.80599194
 21.5, -2.186974273, -4.336412718, -6.446660725, -8.504692065, -10.50899951, -12.44825642, -14.31051737, -16.0864329
 22, -2.211334173, -4.391361244, -6.529337881, -8.621594796, -10.65738825, -12.63177241, -14.53299819, -16.35200842
 22.5, -2.238856814, -4.443504924, -6.609343532, -8.729707159, -10.79706617, -12.80664131, -14.74694998, -16.60919195
 23, -2.263448974, -4.492791277, -6.686615255, -8.835213062, -10.93429681, -12.97927074, -14.95557897, -16.85458016
 23.5, -2.285073155, -4.542311582, -6.7611099, -8.938059357, -11.06580848, -13.14307549, -15.1522051, -17.09464775
 24, -2.309838271, -4.588898156, -6.832787181, -9.03820591, -11.19474363, -13.3012125, -15.3465585, -17.32263556
 24.5, -2.331625008, -4.635669156, -6.904771149, -9.132429111, -11.31784295, -13.45357654, -15.53197875, -17.54173239
 25, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
 26, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
ENDTABLE
MZ_TIRE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! unit 1, axle 2, left side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 3.63841689, 7.167976437, 10.57049835, 13.83887621, 16.96898498, 19.96037444, 22.80465341, 25.50938705
 1, 7.380277171, 14.54752918, 21.46738822, 28.11913715, 34.49190055, 40.57246253, 46.35456265, 51.83878832
 1.5, 10.48921868, 20.81311684, 30.92379499, 40.78308075, 50.3458885, 59.58130303, 68.44983319, 76.92471145
 2, 11.74443143, 23.62625851, 35.62169635, 47.68768585, 59.76248468, 71.77420133, 83.63899602, 95.27175876
 2.5, 10.96767339, 22.41946337, 34.41959155, 46.97083594, 60.05591821, 73.61586927, 87.57710917, 101.8305202
 3, 9.122542075, 18.92289782, 29.53128661, 41.03357141, 53.48995454, 66.93960538, 81.37940398, 96.78482364
 3.5, 7.137325838, 14.97671133, 23.68308305, 33.39830551, 44.24529378, 56.353012, 69.82218654, 84.74985902
 4, 5.419001151, 11.47927204, 18.35211567, 26.1890575, 35.15539347, 45.41949424, 57.16284914, 70.56509916
 4.5, 4.044161405, 8.643689616, 13.95936861, 20.13849321, 27.34805336, 35.76697791, 45.60756495, 57.10260803
 5, 2.970233893, 6.417288173, 10.47522155, 15.28215293, 20.99454451, 27.78532256, 35.86185794, 45.473943
 5.5, 2.13714156, 4.674578551, 7.736987608, 11.44036263, 15.92276463, 21.34582916, 27.90654532, 35.83791206
 6, 1.482392449, 3.30371486, 5.575148667, 8.39538635, 11.88329357, 16.18824325, 21.48265341, 27.98087306
 6.5, 0.959245108, 2.21543133, 3.853178934, 5.961269877, 8.650520029, 12.0383941, 16.29064599, 21.59285197
 7, 0.542227671, 1.337084389, 2.461369732, 3.995589128, 6.03179882, 8.676040678, 12.06763631, 16.38173376
 7.5, 0.197709305, 0.618047049, 1.325280968, 2.389598435, 3.891619551, 5.921286011, 8.605957496, 12.09662467
 8, -0.087042267, 0.023489511, 0.387017386, 1.061296605, 2.119439583, 3.642792007, 5.738979325, 8.543108516
 8.5, -0.324443679, -0.474805078, -0.401070818, -0.051280358, 0.635046768, 1.734623103, 3.339823438, 5.571607342
 9, -0.526651204, -0.898610862, -1.067856374, -0.993614804, -0.618381073, 0.121591261, 1.313704185, 3.056497503
 9.5, -0.699834109, -1.260520239, -1.641548768, -1.801143368, -1.693188302, -1.257106259, -0.41891511, 0.911271955
 10, -0.850047206, -1.572827873, -2.135045241, -2.499552612, -2.619269832, -2.445293973, -1.910263562, -0.931977435
 10.5, -0.980335157, -1.84762192, -2.566826454, -3.104987936, -3.425774767, -3.479561876, -3.20805171, -2.536088481
 11, -1.096591118, -2.091021553, -2.94918743, -3.642240051, -4.135219915, -4.386419389, -4.343149537, -3.936686718
 11.5, -1.201770076, -2.306060869, -3.288347975, -4.117790845, -4.763616099, -5.188753072, -5.345682635, -5.174875018
 12, -1.295872734, -2.498678879, -3.59036317, -4.540928827, -5.32365716, -5.905927377, -6.238939527, -6.274905524
 12.5, -1.37891982, -2.674768086, -3.864216916, -4.923843639, -5.827815295, -6.547732161, -7.039459151, -7.257273084
 13, -1.4537937, -2.831360412, -4.109920515, -5.269607342, -6.282366325, -7.12686778, -7.760373058, -8.142087748
 13.5, -1.523359668, -2.977234243, -4.336319959, -5.584193004, -6.696496754, -7.652792055, -8.414593434, -8.942725778
 14, -1.587602411, -3.109394582, -4.543364246, -5.870582039, -7.07629129, -8.131725361, -9.008596783, -9.669136443
 14.5, -1.646464461, -3.230697854, -4.733966272, -6.137724695, -7.424731633, -8.572944709, -9.555021505, -10.33758867
 15, -1.702858601, -3.344046838, -4.910973486, -6.382494155, -7.744782408, -8.979496216, -10.06016691, -10.94806843
 15.5, -1.753809988, -3.449362042, -5.07430977, -6.610812065, -8.045511586, -9.357473242, -10.52392997, -11.5134668
 16, -1.802208411, -3.549542946, -5.226852856, -6.822570925, -8.320608279, -9.706712278, -10.95569575, -12.03688084
 16.5, -1.848021182, -3.641525051, -5.368516251, -7.020636384, -8.582247882, -10.0333132, -11.35847343, -12.52465075
 17, -1.888279674, -3.728253902, -5.505205966, -7.20795245, -8.824124572, -10.34022802, -11.73204573, -12.98311133
 17.5, -1.928801647, -3.809605574, -5.630774089, -7.384423548, -9.052247146, -10.62729644, -12.08584214, -13.40877993
 18, -1.966672621, -3.888565339, -5.751220093, -7.549863981, -9.269589549, -10.8974694, -12.41964953, -13.81122754
 18.5, -2.001812, -3.962062308, -5.86642358, -7.707265752, -9.472868519, -11.15376829, -12.73329498, -14.18699714
 19, -2.037195221, -4.030015108, -5.973286505, -7.856521906, -9.668216545, -11.39599876, -13.02979542, -14.5456923
 19.5, -2.069781353, -4.098431725, -6.077782978, -7.997483509, -9.852352312, -11.62717123, -13.30898271, -14.88384402
 20, -2.099597028, -4.161188024, -6.176839821, -8.13318378, -10.02829867, -11.84716212, -13.57711333, -15.20783486
 20.5, -2.129571102, -4.221294637, -6.270341358, -8.263543881, -10.19595061, -12.05585423, -13.83405302, -15.51418331
 21, -2.159693551, -4.281761917, -6.358250514, -8.388427979, -10.35515812, -12.25625792, -14.0764105, -15.80599194
 21.5, -2.186974273, -4.336412718, -6.446660725, -8.504692065, -10.50899951, -12.44825642, -14.31051737, -16.0864329
 22, -2.211334173, -4.391361244, -6.529337881, -8.621594796, -10.65738825, -12.63177241, -14.53299819, -16.35200842
 22.5, -2.238856814, -4.443504924, -6.609343532, -8.729707159, -10.79706617, -12.80664131, -14.74694998, -16.60919195
 23, -2.263448974, -4.492791277, -6.686615255, -8.835213062, -10.93429681, -12.97927074, -14.95557897, -16.85458016
 23.5, -2.285073155, -4.542311582, -6.7611099, -8.938059357, -11.06580848, -13.14307549, -15.1522051, -17.09464775
 24, -2.309838271, -4.588898156, -6.832787181, -9.03820591, -11.19474363, -13.3012125, -15.3465585, -17.32263556
 24.5, -2.331625008, -4.635669156, -6.904771149, -9.132429111, -11.31784295, -13.45357654, -15.53197875, -17.54173239
 25, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
 26, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right side
 0, 980.665, 1961.33, 2941.995, 3922.66, 4903.325, 5883.99, 6864.655, 7845.32
 0.5, 3.63841689, 7.167976437, 10.57049835, 13.83887621, 16.96898498, 19.96037444, 22.80465341, 25.50938705
 1, 7.380277171, 14.54752918, 21.46738822, 28.11913715, 34.49190055, 40.57246253, 46.35456265, 51.83878832
 1.5, 10.48921868, 20.81311684, 30.92379499, 40.78308075, 50.3458885, 59.58130303, 68.44983319, 76.92471145
 2, 11.74443143, 23.62625851, 35.62169635, 47.68768585, 59.76248468, 71.77420133, 83.63899602, 95.27175876
 2.5, 10.96767339, 22.41946337, 34.41959155, 46.97083594, 60.05591821, 73.61586927, 87.57710917, 101.8305202
 3, 9.122542075, 18.92289782, 29.53128661, 41.03357141, 53.48995454, 66.93960538, 81.37940398, 96.78482364
 3.5, 7.137325838, 14.97671133, 23.68308305, 33.39830551, 44.24529378, 56.353012, 69.82218654, 84.74985902
 4, 5.419001151, 11.47927204, 18.35211567, 26.1890575, 35.15539347, 45.41949424, 57.16284914, 70.56509916
 4.5, 4.044161405, 8.643689616, 13.95936861, 20.13849321, 27.34805336, 35.76697791, 45.60756495, 57.10260803
 5, 2.970233893, 6.417288173, 10.47522155, 15.28215293, 20.99454451, 27.78532256, 35.86185794, 45.473943
 5.5, 2.13714156, 4.674578551, 7.736987608, 11.44036263, 15.92276463, 21.34582916, 27.90654532, 35.83791206
 6, 1.482392449, 3.30371486, 5.575148667, 8.39538635, 11.88329357, 16.18824325, 21.48265341, 27.98087306
 6.5, 0.959245108, 2.21543133, 3.853178934, 5.961269877, 8.650520029, 12.0383941, 16.29064599, 21.59285197
 7, 0.542227671, 1.337084389, 2.461369732, 3.995589128, 6.03179882, 8.676040678, 12.06763631, 16.38173376
 7.5, 0.197709305, 0.618047049, 1.325280968, 2.389598435, 3.891619551, 5.921286011, 8.605957496, 12.09662467
 8, -0.087042267, 0.023489511, 0.387017386, 1.061296605, 2.119439583, 3.642792007, 5.738979325, 8.543108516
 8.5, -0.324443679, -0.474805078, -0.401070818, -0.051280358, 0.635046768, 1.734623103, 3.339823438, 5.571607342
 9, -0.526651204, -0.898610862, -1.067856374, -0.993614804, -0.618381073, 0.121591261, 1.313704185, 3.056497503
 9.5, -0.699834109, -1.260520239, -1.641548768, -1.801143368, -1.693188302, -1.257106259, -0.41891511, 0.911271955
 10, -0.850047206, -1.572827873, -2.135045241, -2.499552612, -2.619269832, -2.445293973, -1.910263562, -0.931977435
 10.5, -0.980335157, -1.84762192, -2.566826454, -3.104987936, -3.425774767, -3.479561876, -3.20805171, -2.536088481
 11, -1.096591118, -2.091021553, -2.94918743, -3.642240051, -4.135219915, -4.386419389, -4.343149537, -3.936686718
 11.5, -1.201770076, -2.306060869, -3.288347975, -4.117790845, -4.763616099, -5.188753072, -5.345682635, -5.174875018
 12, -1.295872734, -2.498678879, -3.59036317, -4.540928827, -5.32365716, -5.905927377, -6.238939527, -6.274905524
 12.5, -1.37891982, -2.674768086, -3.864216916, -4.923843639, -5.827815295, -6.547732161, -7.039459151, -7.257273084
 13, -1.4537937, -2.831360412, -4.109920515, -5.269607342, -6.282366325, -7.12686778, -7.760373058, -8.142087748
 13.5, -1.523359668, -2.977234243, -4.336319959, -5.584193004, -6.696496754, -7.652792055, -8.414593434, -8.942725778
 14, -1.587602411, -3.109394582, -4.543364246, -5.870582039, -7.07629129, -8.131725361, -9.008596783, -9.669136443
 14.5, -1.646464461, -3.230697854, -4.733966272, -6.137724695, -7.424731633, -8.572944709, -9.555021505, -10.33758867
 15, -1.702858601, -3.344046838, -4.910973486, -6.382494155, -7.744782408, -8.979496216, -10.06016691, -10.94806843
 15.5, -1.753809988, -3.449362042, -5.07430977, -6.610812065, -8.045511586, -9.357473242, -10.52392997, -11.5134668
 16, -1.802208411, -3.549542946, -5.226852856, -6.822570925, -8.320608279, -9.706712278, -10.95569575, -12.03688084
 16.5, -1.848021182, -3.641525051, -5.368516251, -7.020636384, -8.582247882, -10.0333132, -11.35847343, -12.52465075
 17, -1.888279674, -3.728253902, -5.505205966, -7.20795245, -8.824124572, -10.34022802, -11.73204573, -12.98311133
 17.5, -1.928801647, -3.809605574, -5.630774089, -7.384423548, -9.052247146, -10.62729644, -12.08584214, -13.40877993
 18, -1.966672621, -3.888565339, -5.751220093, -7.549863981, -9.269589549, -10.8974694, -12.41964953, -13.81122754
 18.5, -2.001812, -3.962062308, -5.86642358, -7.707265752, -9.472868519, -11.15376829, -12.73329498, -14.18699714
 19, -2.037195221, -4.030015108, -5.973286505, -7.856521906, -9.668216545, -11.39599876, -13.02979542, -14.5456923
 19.5, -2.069781353, -4.098431725, -6.077782978, -7.997483509, -9.852352312, -11.62717123, -13.30898271, -14.88384402
 20, -2.099597028, -4.161188024, -6.176839821, -8.13318378, -10.02829867, -11.84716212, -13.57711333, -15.20783486
 20.5, -2.129571102, -4.221294637, -6.270341358, -8.263543881, -10.19595061, -12.05585423, -13.83405302, -15.51418331
 21, -2.159693551, -4.281761917, -6.358250514, -8.388427979, -10.35515812, -12.25625792, -14.0764105, -15.80599194
 21.5, -2.186974273, -4.336412718, -6.446660725, -8.504692065, -10.50899951, -12.44825642, -14.31051737, -16.0864329
 22, -2.211334173, -4.391361244, -6.529337881, -8.621594796, -10.65738825, -12.63177241, -14.53299819, -16.35200842
 22.5, -2.238856814, -4.443504924, -6.609343532, -8.729707159, -10.79706617, -12.80664131, -14.74694998, -16.60919195
 23, -2.263448974, -4.492791277, -6.686615255, -8.835213062, -10.93429681, -12.97927074, -14.95557897, -16.85458016
 23.5, -2.285073155, -4.542311582, -6.7611099, -8.938059357, -11.06580848, -13.14307549, -15.1522051, -17.09464775
 24, -2.309838271, -4.588898156, -6.832787181, -9.03820591, -11.19474363, -13.3012125, -15.3465585, -17.32263556
 24.5, -2.331625008, -4.635669156, -6.904771149, -9.132429111, -11.31784295, -13.45357654, -15.53197875, -17.54173239
 25, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
 26, -2.353483574, -4.679512585, -6.970705389, -9.223863516, -11.43825152, -13.60012803, -15.70835013, -17.75521652
ENDTABLE
MZ_TIRE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! unit 2, axle 1, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 20.97, 40.83, 59.32, 76.25, 91.51, 105, 116.65, 126.42
 1, 32.44, 63.59, 93.15, 120.91, 146.66, 170.24, 191.46, 210.15
 1.5, 32.09, 63.43, 93.92, 123.47, 151.96, 179.23, 205.11, 229.37
 2, 26.48, 52.68, 78.68, 104.53, 130.23, 155.75, 181.01, 205.88
 2.5, 20.56, 41.09, 61.75, 82.65, 103.87, 125.46, 147.46, 169.87
 3, 15.73, 31.55, 47.63, 64.11, 81.1, 98.69, 116.97, 136
 3.5, 12.02, 24.19, 36.67, 49.6, 63.09, 77.26, 92.21, 108.04
 4, 9.18, 18.54, 28.24, 38.38, 49.1, 60.5, 72.69, 85.78
 4.5, 6.99, 14.17, 21.68, 29.64, 38.17, 47.35, 57.29, 68.12
 5, 5.26, 10.71, 16.5, 22.73, 29.49, 36.89, 45.02, 53.98
 5.5, 3.86, 7.93, 12.33, 17.15, 22.49, 28.44, 35.09, 42.53
 6, 2.73, 5.66, 8.92, 12.59, 16.76, 21.52, 26.94, 33.12
 6.5, 1.78, 3.77, 6.09, 8.8, 12, 15.76, 20.16, 25.28
 7, 0.99, 2.19, 3.7, 5.61, 7.99, 10.91, 14.44, 18.67
 7.5, 0.31, 0.83, 1.67, 2.89, 4.57, 6.78, 9.57, 13.03
 8, -0.27, -0.33, -0.08, 0.55, 1.63, 3.22, 5.38, 8.18
 8.5, -0.78, -1.34, -1.6, -1.48, -0.93, 0.12, 1.73, 3.96
 9, -1.23, -2.23, -2.93, -3.27, -3.17, -2.59, -1.46, 0.26
 9.5, -1.62, -3.02, -4.11, -4.84, -5.15, -4.98, -4.28, -3
 10, -1.97, -3.71, -5.16, -6.24, -6.91, -7.11, -6.79, -5.9
 10.5, -2.28, -4.34, -6.1, -7.49, -8.48, -9.01, -9.04, -8.5
 11, -2.56, -4.9, -6.94, -8.62, -9.9, -10.73, -11.05, -10.83
 11.5, -2.82, -5.41, -7.7, -9.64, -11.18, -12.28, -12.88, -12.94
 12, -3.05, -5.87, -8.39, -10.57, -12.34, -13.68, -14.53, -14.86
 12.5, -3.26, -6.29, -9.03, -11.41, -13.41, -14.96, -16.04, -16.6
 13, -3.45, -6.68, -9.6, -12.19, -14.38, -16.14, -17.43, -18.2
 13.5, -3.63, -7.03, -10.14, -12.9, -15.27, -17.22, -18.7, -19.67
 14, -3.79, -7.36, -10.63, -13.55, -16.09, -18.21, -19.87, -21.02
 14.5, -3.95, -7.66, -11.08, -14.16, -16.86, -19.13, -20.95, -22.27
 15, -4.09, -7.94, -11.5, -14.72, -17.56, -19.98, -21.95, -23.43
 15.5, -4.22, -8.2, -11.89, -15.25, -18.22, -20.78, -22.89, -24.51
 16, -4.34, -8.45, -12.26, -15.73, -18.83, -21.52, -23.76, -25.51
 16.5, -4.45, -8.67, -12.6, -16.19, -19.4, -22.21, -24.57, -26.45
 17, -4.56, -8.89, -12.92, -16.62, -19.94, -22.85, -25.33, -27.33
 17.5, -4.66, -9.09, -13.22, -17.02, -20.44, -23.46, -26.04, -28.16
 18, -4.75, -9.27, -13.5, -17.39, -20.91, -24.03, -26.71, -28.93
 18.5, -4.84, -9.45, -13.77, -17.75, -21.36, -24.57, -27.35, -29.66
 19, -4.93, -9.62, -14.02, -18.08, -21.78, -25.08, -27.94, -30.35
 19.5, -5.01, -9.78, -14.26, -18.4, -22.18, -25.56, -28.51, -31
 20, -5.08, -9.93, -14.48, -18.7, -22.55, -26.01, -29.04, -31.61
 20.5, -5.15, -10.07, -14.69, -18.98, -22.91, -26.44, -29.54, -32.2
 21, -5.22, -10.2, -14.89, -19.25, -23.25, -26.85, -30.02, -32.75
 21.5, -5.28, -10.33, -15.09, -19.51, -23.57, -27.23, -30.48, -33.27
 22, -5.34, -10.45, -15.27, -19.75, -23.87, -27.6, -30.91, -33.77
 22.5, -5.4, -10.57, -15.44, -19.98, -24.16, -27.95, -31.32, -34.25
 23, -5.46, -10.68, -15.61, -20.21, -24.44, -28.29, -31.72, -34.7
 23.5, -5.51, -10.79, -15.77, -20.42, -24.71, -28.61, -32.09, -35.14
 24, -5.56, -10.89, -15.92, -20.62, -24.96, -28.91, -32.45, -35.55
 24.5, -5.61, -10.98, -16.06, -20.81, -25.2, -29.21, -32.8, -35.95
 25, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
 26, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
ENDTABLE
MZ_TIRE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2) 2D_FROM_ZERO ! unit 3, axle 1, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 20.97, 40.83, 59.32, 76.25, 91.51, 105, 116.65, 126.42
 1, 32.44, 63.59, 93.15, 120.91, 146.66, 170.24, 191.46, 210.15
 1.5, 32.09, 63.43, 93.92, 123.47, 151.96, 179.23, 205.11, 229.37
 2, 26.48, 52.68, 78.68, 104.53, 130.23, 155.75, 181.01, 205.88
 2.5, 20.56, 41.09, 61.75, 82.65, 103.87, 125.46, 147.46, 169.87
 3, 15.73, 31.55, 47.63, 64.11, 81.1, 98.69, 116.97, 136
 3.5, 12.02, 24.19, 36.67, 49.6, 63.09, 77.26, 92.21, 108.04
 4, 9.18, 18.54, 28.24, 38.38, 49.1, 60.5, 72.69, 85.78
 4.5, 6.99, 14.17, 21.68, 29.64, 38.17, 47.35, 57.29, 68.12
 5, 5.26, 10.71, 16.5, 22.73, 29.49, 36.89, 45.02, 53.98
 5.5, 3.86, 7.93, 12.33, 17.15, 22.49, 28.44, 35.09, 42.53
 6, 2.73, 5.66, 8.92, 12.59, 16.76, 21.52, 26.94, 33.12
 6.5, 1.78, 3.77, 6.09, 8.8, 12, 15.76, 20.16, 25.28
 7, 0.99, 2.19, 3.7, 5.61, 7.99, 10.91, 14.44, 18.67
 7.5, 0.31, 0.83, 1.67, 2.89, 4.57, 6.78, 9.57, 13.03
 8, -0.27, -0.33, -0.08, 0.55, 1.63, 3.22, 5.38, 8.18
 8.5, -0.78, -1.34, -1.6, -1.48, -0.93, 0.12, 1.73, 3.96
 9, -1.23, -2.23, -2.93, -3.27, -3.17, -2.59, -1.46, 0.26
 9.5, -1.62, -3.02, -4.11, -4.84, -5.15, -4.98, -4.28, -3
 10, -1.97, -3.71, -5.16, -6.24, -6.91, -7.11, -6.79, -5.9
 10.5, -2.28, -4.34, -6.1, -7.49, -8.48, -9.01, -9.04, -8.5
 11, -2.56, -4.9, -6.94, -8.62, -9.9, -10.73, -11.05, -10.83
 11.5, -2.82, -5.41, -7.7, -9.64, -11.18, -12.28, -12.88, -12.94
 12, -3.05, -5.87, -8.39, -10.57, -12.34, -13.68, -14.53, -14.86
 12.5, -3.26, -6.29, -9.03, -11.41, -13.41, -14.96, -16.04, -16.6
 13, -3.45, -6.68, -9.6, -12.19, -14.38, -16.14, -17.43, -18.2
 13.5, -3.63, -7.03, -10.14, -12.9, -15.27, -17.22, -18.7, -19.67
 14, -3.79, -7.36, -10.63, -13.55, -16.09, -18.21, -19.87, -21.02
 14.5, -3.95, -7.66, -11.08, -14.16, -16.86, -19.13, -20.95, -22.27
 15, -4.09, -7.94, -11.5, -14.72, -17.56, -19.98, -21.95, -23.43
 15.5, -4.22, -8.2, -11.89, -15.25, -18.22, -20.78, -22.89, -24.51
 16, -4.34, -8.45, -12.26, -15.73, -18.83, -21.52, -23.76, -25.51
 16.5, -4.45, -8.67, -12.6, -16.19, -19.4, -22.21, -24.57, -26.45
 17, -4.56, -8.89, -12.92, -16.62, -19.94, -22.85, -25.33, -27.33
 17.5, -4.66, -9.09, -13.22, -17.02, -20.44, -23.46, -26.04, -28.16
 18, -4.75, -9.27, -13.5, -17.39, -20.91, -24.03, -26.71, -28.93
 18.5, -4.84, -9.45, -13.77, -17.75, -21.36, -24.57, -27.35, -29.66
 19, -4.93, -9.62, -14.02, -18.08, -21.78, -25.08, -27.94, -30.35
 19.5, -5.01, -9.78, -14.26, -18.4, -22.18, -25.56, -28.51, -31
 20, -5.08, -9.93, -14.48, -18.7, -22.55, -26.01, -29.04, -31.61
 20.5, -5.15, -10.07, -14.69, -18.98, -22.91, -26.44, -29.54, -32.2
 21, -5.22, -10.2, -14.89, -19.25, -23.25, -26.85, -30.02, -32.75
 21.5, -5.28, -10.33, -15.09, -19.51, -23.57, -27.23, -30.48, -33.27
 22, -5.34, -10.45, -15.27, -19.75, -23.87, -27.6, -30.91, -33.77
 22.5, -5.4, -10.57, -15.44, -19.98, -24.16, -27.95, -31.32, -34.25
 23, -5.46, -10.68, -15.61, -20.21, -24.44, -28.29, -31.72, -34.7
 23.5, -5.51, -10.79, -15.77, -20.42, -24.71, -28.61, -32.09, -35.14
 24, -5.56, -10.89, -15.92, -20.62, -24.96, -28.91, -32.45, -35.55
 24.5, -5.61, -10.98, -16.06, -20.81, -25.2, -29.21, -32.8, -35.95
 25, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
 26, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
ENDTABLE
MZ_TIRE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1) 2D_FROM_ZERO ! unit 3, axle 2, left side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 20.97, 40.83, 59.32, 76.25, 91.51, 105, 116.65, 126.42
 1, 32.44, 63.59, 93.15, 120.91, 146.66, 170.24, 191.46, 210.15
 1.5, 32.09, 63.43, 93.92, 123.47, 151.96, 179.23, 205.11, 229.37
 2, 26.48, 52.68, 78.68, 104.53, 130.23, 155.75, 181.01, 205.88
 2.5, 20.56, 41.09, 61.75, 82.65, 103.87, 125.46, 147.46, 169.87
 3, 15.73, 31.55, 47.63, 64.11, 81.1, 98.69, 116.97, 136
 3.5, 12.02, 24.19, 36.67, 49.6, 63.09, 77.26, 92.21, 108.04
 4, 9.18, 18.54, 28.24, 38.38, 49.1, 60.5, 72.69, 85.78
 4.5, 6.99, 14.17, 21.68, 29.64, 38.17, 47.35, 57.29, 68.12
 5, 5.26, 10.71, 16.5, 22.73, 29.49, 36.89, 45.02, 53.98
 5.5, 3.86, 7.93, 12.33, 17.15, 22.49, 28.44, 35.09, 42.53
 6, 2.73, 5.66, 8.92, 12.59, 16.76, 21.52, 26.94, 33.12
 6.5, 1.78, 3.77, 6.09, 8.8, 12, 15.76, 20.16, 25.28
 7, 0.99, 2.19, 3.7, 5.61, 7.99, 10.91, 14.44, 18.67
 7.5, 0.31, 0.83, 1.67, 2.89, 4.57, 6.78, 9.57, 13.03
 8, -0.27, -0.33, -0.08, 0.55, 1.63, 3.22, 5.38, 8.18
 8.5, -0.78, -1.34, -1.6, -1.48, -0.93, 0.12, 1.73, 3.96
 9, -1.23, -2.23, -2.93, -3.27, -3.17, -2.59, -1.46, 0.26
 9.5, -1.62, -3.02, -4.11, -4.84, -5.15, -4.98, -4.28, -3
 10, -1.97, -3.71, -5.16, -6.24, -6.91, -7.11, -6.79, -5.9
 10.5, -2.28, -4.34, -6.1, -7.49, -8.48, -9.01, -9.04, -8.5
 11, -2.56, -4.9, -6.94, -8.62, -9.9, -10.73, -11.05, -10.83
 11.5, -2.82, -5.41, -7.7, -9.64, -11.18, -12.28, -12.88, -12.94
 12, -3.05, -5.87, -8.39, -10.57, -12.34, -13.68, -14.53, -14.86
 12.5, -3.26, -6.29, -9.03, -11.41, -13.41, -14.96, -16.04, -16.6
 13, -3.45, -6.68, -9.6, -12.19, -14.38, -16.14, -17.43, -18.2
 13.5, -3.63, -7.03, -10.14, -12.9, -15.27, -17.22, -18.7, -19.67
 14, -3.79, -7.36, -10.63, -13.55, -16.09, -18.21, -19.87, -21.02
 14.5, -3.95, -7.66, -11.08, -14.16, -16.86, -19.13, -20.95, -22.27
 15, -4.09, -7.94, -11.5, -14.72, -17.56, -19.98, -21.95, -23.43
 15.5, -4.22, -8.2, -11.89, -15.25, -18.22, -20.78, -22.89, -24.51
 16, -4.34, -8.45, -12.26, -15.73, -18.83, -21.52, -23.76, -25.51
 16.5, -4.45, -8.67, -12.6, -16.19, -19.4, -22.21, -24.57, -26.45
 17, -4.56, -8.89, -12.92, -16.62, -19.94, -22.85, -25.33, -27.33
 17.5, -4.66, -9.09, -13.22, -17.02, -20.44, -23.46, -26.04, -28.16
 18, -4.75, -9.27, -13.5, -17.39, -20.91, -24.03, -26.71, -28.93
 18.5, -4.84, -9.45, -13.77, -17.75, -21.36, -24.57, -27.35, -29.66
 19, -4.93, -9.62, -14.02, -18.08, -21.78, -25.08, -27.94, -30.35
 19.5, -5.01, -9.78, -14.26, -18.4, -22.18, -25.56, -28.51, -31
 20, -5.08, -9.93, -14.48, -18.7, -22.55, -26.01, -29.04, -31.61
 20.5, -5.15, -10.07, -14.69, -18.98, -22.91, -26.44, -29.54, -32.2
 21, -5.22, -10.2, -14.89, -19.25, -23.25, -26.85, -30.02, -32.75
 21.5, -5.28, -10.33, -15.09, -19.51, -23.57, -27.23, -30.48, -33.27
 22, -5.34, -10.45, -15.27, -19.75, -23.87, -27.6, -30.91, -33.77
 22.5, -5.4, -10.57, -15.44, -19.98, -24.16, -27.95, -31.32, -34.25
 23, -5.46, -10.68, -15.61, -20.21, -24.44, -28.29, -31.72, -34.7
 23.5, -5.51, -10.79, -15.77, -20.42, -24.71, -28.61, -32.09, -35.14
 24, -5.56, -10.89, -15.92, -20.62, -24.96, -28.91, -32.45, -35.55
 24.5, -5.61, -10.98, -16.06, -20.81, -25.2, -29.21, -32.8, -35.95
 25, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
 26, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
ENDTABLE
MZ_TIRE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right side
 0, 1348.41, 2696.83, 4045.24, 5393.66, 6742.07, 8090.49, 9438.9, 10787.32
 0.5, 20.97, 40.83, 59.32, 76.25, 91.51, 105, 116.65, 126.42
 1, 32.44, 63.59, 93.15, 120.91, 146.66, 170.24, 191.46, 210.15
 1.5, 32.09, 63.43, 93.92, 123.47, 151.96, 179.23, 205.11, 229.37
 2, 26.48, 52.68, 78.68, 104.53, 130.23, 155.75, 181.01, 205.88
 2.5, 20.56, 41.09, 61.75, 82.65, 103.87, 125.46, 147.46, 169.87
 3, 15.73, 31.55, 47.63, 64.11, 81.1, 98.69, 116.97, 136
 3.5, 12.02, 24.19, 36.67, 49.6, 63.09, 77.26, 92.21, 108.04
 4, 9.18, 18.54, 28.24, 38.38, 49.1, 60.5, 72.69, 85.78
 4.5, 6.99, 14.17, 21.68, 29.64, 38.17, 47.35, 57.29, 68.12
 5, 5.26, 10.71, 16.5, 22.73, 29.49, 36.89, 45.02, 53.98
 5.5, 3.86, 7.93, 12.33, 17.15, 22.49, 28.44, 35.09, 42.53
 6, 2.73, 5.66, 8.92, 12.59, 16.76, 21.52, 26.94, 33.12
 6.5, 1.78, 3.77, 6.09, 8.8, 12, 15.76, 20.16, 25.28
 7, 0.99, 2.19, 3.7, 5.61, 7.99, 10.91, 14.44, 18.67
 7.5, 0.31, 0.83, 1.67, 2.89, 4.57, 6.78, 9.57, 13.03
 8, -0.27, -0.33, -0.08, 0.55, 1.63, 3.22, 5.38, 8.18
 8.5, -0.78, -1.34, -1.6, -1.48, -0.93, 0.12, 1.73, 3.96
 9, -1.23, -2.23, -2.93, -3.27, -3.17, -2.59, -1.46, 0.26
 9.5, -1.62, -3.02, -4.11, -4.84, -5.15, -4.98, -4.28, -3
 10, -1.97, -3.71, -5.16, -6.24, -6.91, -7.11, -6.79, -5.9
 10.5, -2.28, -4.34, -6.1, -7.49, -8.48, -9.01, -9.04, -8.5
 11, -2.56, -4.9, -6.94, -8.62, -9.9, -10.73, -11.05, -10.83
 11.5, -2.82, -5.41, -7.7, -9.64, -11.18, -12.28, -12.88, -12.94
 12, -3.05, -5.87, -8.39, -10.57, -12.34, -13.68, -14.53, -14.86
 12.5, -3.26, -6.29, -9.03, -11.41, -13.41, -14.96, -16.04, -16.6
 13, -3.45, -6.68, -9.6, -12.19, -14.38, -16.14, -17.43, -18.2
 13.5, -3.63, -7.03, -10.14, -12.9, -15.27, -17.22, -18.7, -19.67
 14, -3.79, -7.36, -10.63, -13.55, -16.09, -18.21, -19.87, -21.02
 14.5, -3.95, -7.66, -11.08, -14.16, -16.86, -19.13, -20.95, -22.27
 15, -4.09, -7.94, -11.5, -14.72, -17.56, -19.98, -21.95, -23.43
 15.5, -4.22, -8.2, -11.89, -15.25, -18.22, -20.78, -22.89, -24.51
 16, -4.34, -8.45, -12.26, -15.73, -18.83, -21.52, -23.76, -25.51
 16.5, -4.45, -8.67, -12.6, -16.19, -19.4, -22.21, -24.57, -26.45
 17, -4.56, -8.89, -12.92, -16.62, -19.94, -22.85, -25.33, -27.33
 17.5, -4.66, -9.09, -13.22, -17.02, -20.44, -23.46, -26.04, -28.16
 18, -4.75, -9.27, -13.5, -17.39, -20.91, -24.03, -26.71, -28.93
 18.5, -4.84, -9.45, -13.77, -17.75, -21.36, -24.57, -27.35, -29.66
 19, -4.93, -9.62, -14.02, -18.08, -21.78, -25.08, -27.94, -30.35
 19.5, -5.01, -9.78, -14.26, -18.4, -22.18, -25.56, -28.51, -31
 20, -5.08, -9.93, -14.48, -18.7, -22.55, -26.01, -29.04, -31.61
 20.5, -5.15, -10.07, -14.69, -18.98, -22.91, -26.44, -29.54, -32.2
 21, -5.22, -10.2, -14.89, -19.25, -23.25, -26.85, -30.02, -32.75
 21.5, -5.28, -10.33, -15.09, -19.51, -23.57, -27.23, -30.48, -33.27
 22, -5.34, -10.45, -15.27, -19.75, -23.87, -27.6, -30.91, -33.77
 22.5, -5.4, -10.57, -15.44, -19.98, -24.16, -27.95, -31.32, -34.25
 23, -5.46, -10.68, -15.61, -20.21, -24.44, -28.29, -31.72, -34.7
 23.5, -5.51, -10.79, -15.77, -20.42, -24.71, -28.61, -32.09, -35.14
 24, -5.56, -10.89, -15.92, -20.62, -24.96, -28.91, -32.45, -35.55
 24.5, -5.61, -10.98, -16.06, -20.81, -25.2, -29.21, -32.8, -35.95
 25, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
 26, -5.66, -11.08, -16.2, -21, -25.44, -29.49, -33.13, -36.33
ENDTABLE
MZ_TIRE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_BOOST_G: Boost torque applied to steering gear. Boost torque can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_BOOST_G_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost torque from the calculation can be adjusted with M_BOOST_G_GAIN
! and M_BOOST_G_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_M_BOOST and M_TB_START_M_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_M_BOOST and VX_TB_START_M_BOOST. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h). Other
! rows have torsion bar torque (N-m) followed by 6 values of boost torque (N-m).
M_BOOST_G_CARPET(4) 2D_SPLINE
 0, 0, 20, 50, 80, 120, 200
 -16, -1200, -1200, -1200, -1200, -1200, -1200
 -15, -1200, -1200, -1200, -1200, -1200, -1200
 -14.5, -1200, -1200, -1200, -1200, -1200, -1200
 -14, -1200, -1200, -1200, -1200, -1200, -1200
 -13.5, -1200, -1200, -1200, -1200, -1200, -1200
 -13, -1200, -1200, -1200, -1200, -1200, -1200
 -12.5, -1200, -1200, -1200, -1200, -1200, -1200
 -12, -1200, -1200, -1200, -1200, -1200, -1200
 -11.5, -1200, -1200, -1200, -1200, -1088.064, -1027.8336
 -11, -1200, -1161.6, -1165.4112, -1094.808, -833.3424, -720.2448
 -10.5, -1200, -1058.4, -990.2976, -871.6464, -630.3792, -496.4256
 -10, -1200, -960, -834.84, -686.2992, -470.4, -336
 -9.5, -1200, -866.4, -697.6464, -533.7744, -345.7872, -222.9072
 -9, -1200, -777.6, -577.368, -409.5456, -249.9888, -144.6384
 -8.5, -1200, -693.6, -472.6848, -309.504, -177.4128, -91.5552
 -8, -1200, -614.4, -382.3152, -229.9632, -123.312, -56.3712
 -7.5, -1200, -540, -305.0112, -167.616, -83.7216, -33.6384
 -7, -1200, -470.4, -239.5776, -119.5344, -55.344, -19.368
 -6.5, -1200, -405.6, -184.8432, -83.136, -35.4768, -10.7088
 -6, -1200, -345.6, -139.68, -56.1648, -21.9456, -5.6448
 -5.5, -1200, -290.4, -103.008, -36.6672, -13.0224, -2.8128
 -5, -1200, -240, -73.7904, -22.9872, -7.3488, -1.3104
 -4.5, -1093.5024, -194.4, -51.0336, -13.7184, -3.9072, -0.5664
 -4, -768, -153.6, -33.792, -7.704, -1.9248, -0.2208
 -3.5, -514.5024, -117.6, -21.1776, -4.0032, -0.864, -0.0768
 -3, -324, -86.4, -12.3456, -1.8816, -0.3408, -0.024
 -2.5, -187.5024, -60, -6.5232, -0.768, -0.1152, -0.0048
 -2, -96, -38.4, -2.9856, -0.2592, -0.0288, 0
 -1.5, -40.5024, -21.6, -1.0896, -0.0624, -0.0048, 0
 -1, -12, -9.6, -0.264, -0.0096, 0, 0
 -0.5, -1.5024, -2.4, -0.024, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 1.5024, 2.4, 0.024, 0, 0, 0
 1, 12, 9.6, 0.264, 0.0096, 0, 0
 1.5, 40.5024, 21.6, 1.0896, 0.0624, 0.0048, 0
 2, 96, 38.4, 2.9856, 0.2592, 0.0288, 0
 2.5, 187.5024, 60, 6.5232, 0.768, 0.1152, 0.0048
 3, 324, 86.4, 12.3456, 1.8816, 0.3408, 0.024
 3.5, 514.5024, 117.6, 21.1776, 4.0032, 0.864, 0.0768
 4, 768, 153.6, 33.792, 7.704, 1.9248, 0.2208
 4.5, 1093.5024, 194.4, 51.0336, 13.7184, 3.9072, 0.5664
 5, 1200, 240, 73.7904, 22.9872, 7.3488, 1.3104
 5.5, 1200, 290.4, 103.008, 36.6672, 13.0224, 2.8128
 6, 1200, 345.6, 139.68, 56.1648, 21.9456, 5.6448
 6.5, 1200, 405.6, 184.8432, 83.136, 35.4768, 10.7088
 7, 1200, 470.4, 239.5776, 119.5344, 55.344, 19.368
 7.5, 1200, 540, 305.0112, 167.616, 83.7216, 33.6384
 8, 1200, 614.4, 382.3152, 229.9632, 123.312, 56.3712
 8.5, 1200, 693.6, 472.6848, 309.504, 177.4128, 91.5552
 9, 1200, 777.6, 577.368, 409.5456, 249.9888, 144.6384
 9.5, 1200, 866.4, 697.6464, 533.7744, 345.7872, 222.9072
 10, 1200, 960, 834.84, 686.2992, 470.4, 336
 10.5, 1200, 1058.4, 990.2976, 871.6464, 630.3792, 496.4256
 11, 1200, 1161.6, 1165.4112, 1094.808, 833.3424, 720.2448
 11.5, 1200, 1200, 1200, 1200, 1088.064, 1027.8336
 12, 1200, 1200, 1200, 1200, 1200, 1200
 12.5, 1200, 1200, 1200, 1200, 1200, 1200
 13, 1200, 1200, 1200, 1200, 1200, 1200
 13.5, 1200, 1200, 1200, 1200, 1200, 1200
 14, 1200, 1200, 1200, 1200, 1200, 1200
 14.5, 1200, 1200, 1200, 1200, 1200, 1200
 15, 1200, 1200, 1200, 1200, 1200, 1200
 16, 1200, 1200, 1200, 1200, 1200, 1200
ENDTABLE
M_BOOST_G_GAIN(4)   1 ! Gain multiplied with calculated value to get boost torque
M_BOOST_G_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get boost torque
M_TB_START_M_BOOST(4) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_M_BOOST(4) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_M_BOOST)
VX_TB_START_M_BOOST(4) 0 ; km/h ! Offset subtracted from speed
VX_TB_SCALE_M_BOOST(4) 1 ! Scale factor divided into (speed - VX_TB_START_M_BOOST)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 12 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IDIFF are used to identify the dataset when
! reading data.

M_DIFF_VISC_CONSTANT(1,1) 0 ; N-m ! Constant this torque difference, veh 1, front
                            ! diff
M_DIFF_VISC_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,1) SPLINE ! veh 2, front diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,1) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,1) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,2) SPLINE ! veh 2, rear diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,2) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,2) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,3) SPLINE ! veh 2, transfer case
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,3) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,3) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,3) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(3,2) SPLINE ! veh 3, rear diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(3,2) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(3,2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(3,2) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

M_DIFF_VISC_CONSTANT(4,2) 0 ; N-m ! Constant this torque difference, veh 4, rear
                            ! diff
M_DIFF_VISC_OFFSET(4,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

M_TBAR_COEFFICIENT(1) 2 ! [D] Coefficient: torsion bar torque per unit angle
                        ! (N-m/deg)
M_TBAR_GAIN(1)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

M_TBAR_COEFFICIENT(2) 2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN(2)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

M_TBAR_COEFFICIENT(3) 2.2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN(3)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(3)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

M_TBAR_COEFFICIENT(4) 2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN(4)      1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET(4)    0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_AV_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(3) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(4) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_ROT_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(3) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(4) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

PBK_CON_CONSTANT(1) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(1)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(2) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(2)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(3) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(3)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(4) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(4)   0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,1) MPa ;
PBK_DL_FZ_CONSTANT(1,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,2) MPa ;
PBK_DL_FZ_CONSTANT(1,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

PBK_DL_COEFFICIENT(2,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, left
                            ! side
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

PBK_DL_COEFFICIENT(2,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, right
                            ! side
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(3,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

PBK_DL_COEFFICIENT(3,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, left
                            ! side
PBK_DL_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, left side

PBK_DL_COEFFICIENT(3,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, right
                            ! side
PBK_DL_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, right side

PBK_DL_COEFFICIENT(4,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, left
                            ! side
PBK_DL_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, left side

PBK_DL_COEFFICIENT(4,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, right
                            ! side
PBK_DL_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,1) MPa ;
PBK_DL_FZ_CONSTANT(4,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,2) MPa ;
PBK_DL_FZ_CONSTANT(4,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, right side

! POLY_SHAPE: Coordinates for polygonal shape vertices. Each Y or L coordinate is
! paired with a X or S coordinate. This configurable function supports 200 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IPOLYGON is used to identify the dataset when reading data.

POLY_SHAPE_ID(1)    1  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(1)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(2)    2  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(2)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(3)    3  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(3)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(4)    4  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(4)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 16 datasets; if indices shown below
! are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -62.5, -26.19055136
 -61.875, -25.93300444
 -61.25, -25.67585616
 -60.625, -25.41908646
 -60, -25.16267566
 -59.375, -24.90660443
 -58.75, -24.65085383
 -58.125, -24.39540522
 -57.5, -24.14024032
 -56.875, -23.88534114
 -56.25, -23.63069001
 -55.625, -23.37626954
 -55, -23.12206262
 -54.375, -22.86805242
 -53.75, -22.61422236
 -53.125, -22.36055613
 -52.5, -22.10703762
 -51.875, -21.85365101
 -51.25, -21.60038066
 -50.625, -21.34721116
 -50, -21.0941273
 -49.375, -20.8411141
 -48.75, -20.58815673
 -48.125, -20.33524058
 -47.5, -20.08235121
 -46.875, -19.82947434
 -46.25, -19.57659586
 -45.625, -19.32370184
 -45, -19.07077847
 -44.375, -18.81781213
 -43.75, -18.56478931
 -43.125, -18.31169665
 -42.5, -18.05852091
 -41.875, -17.805249
 -41.25, -17.55186794
 -40.625, -17.29836486
 -40, -17.04472701
 -39.375, -16.79094176
 -38.75, -16.53699656
 -38.125, -16.28287899
 -37.5, -16.02857669
 -36.875, -15.77407743
 -36.25, -15.51936905
 -35.625, -15.26443947
 -35, -15.0092767
 -34.375, -14.75386882
 -33.75, -14.498204
 -33.125, -14.24227047
 -32.5, -13.98605653
 -31.875, -13.72955055
 -31.25, -13.47274094
 -30.625, -13.2156162
 -30, -12.95816487
 -29.375, -12.70037554
 -28.75, -12.44223687
 -28.125, -12.18373755
 -27.5, -11.92486631
 -26.875, -11.66561195
 -26.25, -11.40596329
 -25.625, -11.14590919
 -25, -10.88543855
 -24.375, -10.6245403
 -23.75, -10.36320342
 -23.125, -10.1014169
 -22.5, -9.839169753
 -21.875, -9.576451036
 -21.25, -9.313249819
 -20.625, -9.049555195
 -20, -8.785356278
 -19.375, -8.520642199
 -18.75, -8.255402106
 -18.125, -7.989625161
 -17.5, -7.723300538
 -16.875, -7.456417423
 -16.25, -7.188965011
 -15.625, -6.920932506
 -15, -6.652309115
 -14.375, -6.383084054
 -13.75, -6.113246539
 -13.125, -5.84278579
 -12.5, -5.571691027
 -11.875, -5.299951467
 -11.25, -5.027556327
 -10.625, -4.75449482
 -10, -4.480756153
 -9.375, -4.206329529
 -8.75, -3.931204141
 -8.125, -3.655369176
 -7.5, -3.378813808
 -6.875, -3.101527204
 -6.25, -2.823498515
 -5.625, -2.544716883
 -5, -2.265171433
 -4.375, -1.984851275
 -3.75, -1.703745504
 -3.125, -1.421843197
 -2.5, -1.139133413
 -1.875, -0.855605192
 -1.25, -0.571247554
 -0.625, -0.286049497
 0, 0
 0.625, 0.286911984
 1.25, 0.574697522
 1.875, 0.863367709
 2.5, 1.152933662
 3.125, 1.443406526
 3.75, 1.73479747
 4.375, 2.027117693
 5, 2.32037842
 5.625, 2.614590905
 6.25, 2.909766432
 6.875, 3.205916315
 7.5, 3.503051898
 8.125, 3.801184555
 8.75, 4.100325694
 9.375, 4.400486753
 10, 4.701679206
 10.625, 5.003914557
 11.25, 5.307204346
 11.875, 5.611560146
 12.5, 5.916993566
 13.125, 6.22351625
 13.75, 6.531139877
 14.375, 6.839876163
 15, 7.14973686
 15.625, 7.460733758
 16.25, 7.772878683
 16.875, 8.0861835
 17.5, 8.40066011
 18.125, 8.716320456
 18.75, 9.033176515
 19.375, 9.351240309
 20, 9.670523893
 20.625, 9.991039366
 21.25, 10.31279887
 21.875, 10.63581457
 22.5, 10.9600987
 23.125, 11.28566351
 23.75, 11.6125213
 24.375, 11.94068441
 25, 12.27016524
 25.625, 12.60097619
 26.25, 12.93312974
 26.875, 13.2666384
 27.5, 13.60151472
 28.125, 13.93777128
 28.75, 14.27542074
 29.375, 14.61447577
 30, 14.95494909
 30.625, 15.29685347
 31.25, 15.64020173
 31.875, 15.98500671
 32.5, 16.33128132
 33.125, 16.6790385
 33.75, 17.02829125
 34.375, 17.3790526
 35, 17.73133563
 35.625, 18.08515347
 36.25, 18.44051931
 36.875, 18.79744635
 37.5, 19.15594787
 38.125, 19.5160372
 38.75, 19.8777277
 39.375, 20.24103279
 40, 20.60596593
 40.625, 20.97254066
 41.25, 21.34077055
 41.875, 21.71066921
 42.5, 22.08225034
 43.125, 22.45552766
 43.75, 22.83051497
 44.375, 23.20722612
 45, 23.58567503
 45.625, 23.96587565
 46.25, 24.34784203
 46.875, 24.73158826
 47.5, 25.11712851
 48.125, 25.504477
 48.75, 25.89364803
 49.375, 26.28465599
 50, 26.67751532
 50.625, 27.07224054
 51.25, 27.46884627
 51.875, 27.8673472
 52.5, 28.26775811
 53.125, 28.67009386
 53.75, 29.07436943
 54.375, 29.48059989
 55, 29.88880039
 55.625, 30.29898622
 56.25, 30.71117276
 56.875, 31.12537554
 57.5, 31.54161018
 58.125, 31.95989246
 58.75, 32.38023827
 59.375, 32.80266367
 60, 33.22718486
 60.625, 33.65381821
 61.25, 34.08258025
 61.875, 34.5134877
 62.5, 34.94655745
ENDTABLE
RACK_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -61.875, -34.5134877
 -61.25, -34.08258025
 -60.625, -33.65381821
 -60, -33.22718486
 -59.375, -32.80266367
 -58.75, -32.38023827
 -58.125, -31.95989246
 -57.5, -31.54161018
 -56.875, -31.12537554
 -56.25, -30.71117276
 -55.625, -30.29898622
 -55, -29.88880039
 -54.375, -29.48059989
 -53.75, -29.07436943
 -53.125, -28.67009386
 -52.5, -28.26775811
 -51.875, -27.8673472
 -51.25, -27.46884627
 -50.625, -27.07224054
 -50, -26.67751532
 -49.375, -26.28465599
 -48.75, -25.89364803
 -48.125, -25.504477
 -47.5, -25.11712851
 -46.875, -24.73158826
 -46.25, -24.34784203
 -45.625, -23.96587565
 -45, -23.58567503
 -44.375, -23.20722612
 -43.75, -22.83051497
 -43.125, -22.45552766
 -42.5, -22.08225034
 -41.875, -21.71066921
 -41.25, -21.34077055
 -40.625, -20.97254066
 -40, -20.60596593
 -39.375, -20.24103279
 -38.75, -19.8777277
 -38.125, -19.5160372
 -37.5, -19.15594787
 -36.875, -18.79744635
 -36.25, -18.44051931
 -35.625, -18.08515347
 -35, -17.73133563
 -34.375, -17.3790526
 -33.75, -17.02829125
 -33.125, -16.6790385
 -32.5, -16.33128132
 -31.875, -15.98500671
 -31.25, -15.64020173
 -30.625, -15.29685347
 -30, -14.95494909
 -29.375, -14.61447577
 -28.75, -14.27542074
 -28.125, -13.93777128
 -27.5, -13.60151472
 -26.875, -13.2666384
 -26.25, -12.93312974
 -25.625, -12.60097619
 -25, -12.27016524
 -24.375, -11.94068441
 -23.75, -11.6125213
 -23.125, -11.28566351
 -22.5, -10.9600987
 -21.875, -10.63581457
 -21.25, -10.31279887
 -20.625, -9.991039366
 -20, -9.670523893
 -19.375, -9.351240309
 -18.75, -9.033176515
 -18.125, -8.716320456
 -17.5, -8.40066011
 -16.875, -8.0861835
 -16.25, -7.772878683
 -15.625, -7.460733758
 -15, -7.14973686
 -14.375, -6.839876163
 -13.75, -6.531139877
 -13.125, -6.22351625
 -12.5, -5.916993566
 -11.875, -5.611560146
 -11.25, -5.307204346
 -10.625, -5.003914557
 -10, -4.701679206
 -9.375, -4.400486753
 -8.75, -4.100325694
 -8.125, -3.801184555
 -7.5, -3.503051898
 -6.875, -3.205916315
 -6.25, -2.909766432
 -5.625, -2.614590905
 -5, -2.32037842
 -4.375, -2.027117693
 -3.75, -1.73479747
 -3.125, -1.443406526
 -2.5, -1.152933662
 -1.875, -0.863367709
 -1.25, -0.574697522
 -0.625, -0.286911984
 0, 0
 0.625, 0.286049497
 1.25, 0.571247554
 1.875, 0.855605192
 2.5, 1.139133413
 3.125, 1.421843197
 3.75, 1.703745504
 4.375, 1.984851275
 5, 2.265171433
 5.625, 2.544716883
 6.25, 2.823498515
 6.875, 3.101527204
 7.5, 3.378813808
 8.125, 3.655369176
 8.75, 3.931204141
 9.375, 4.206329529
 10, 4.480756153
 10.625, 4.75449482
 11.25, 5.027556327
 11.875, 5.299951467
 12.5, 5.571691027
 13.125, 5.84278579
 13.75, 6.113246539
 14.375, 6.383084054
 15, 6.652309115
 15.625, 6.920932506
 16.25, 7.188965011
 16.875, 7.456417423
 17.5, 7.723300538
 18.125, 7.989625161
 18.75, 8.255402106
 19.375, 8.520642199
 20, 8.785356278
 20.625, 9.049555195
 21.25, 9.313249819
 21.875, 9.576451036
 22.5, 9.839169753
 23.125, 10.1014169
 23.75, 10.36320342
 24.375, 10.6245403
 25, 10.88543855
 25.625, 11.14590919
 26.25, 11.40596329
 26.875, 11.66561195
 27.5, 11.92486631
 28.125, 12.18373755
 28.75, 12.44223687
 29.375, 12.70037554
 30, 12.95816487
 30.625, 13.2156162
 31.25, 13.47274094
 31.875, 13.72955055
 32.5, 13.98605653
 33.125, 14.24227047
 33.75, 14.498204
 34.375, 14.75386882
 35, 15.0092767
 35.625, 15.26443947
 36.25, 15.51936905
 36.875, 15.77407743
 37.5, 16.02857669
 38.125, 16.28287899
 38.75, 16.53699656
 39.375, 16.79094176
 40, 17.04472701
 40.625, 17.29836486
 41.25, 17.55186794
 41.875, 17.805249
 42.5, 18.05852091
 43.125, 18.31169665
 43.75, 18.56478931
 44.375, 18.81781213
 45, 19.07077847
 45.625, 19.32370184
 46.25, 19.57659586
 46.875, 19.82947434
 47.5, 20.08235121
 48.125, 20.33524058
 48.75, 20.58815673
 49.375, 20.8411141
 50, 21.0941273
 50.625, 21.34721116
 51.25, 21.60038066
 51.875, 21.85365101
 52.5, 22.10703762
 53.125, 22.36055613
 53.75, 22.61422236
 54.375, 22.86805242
 55, 23.12206262
 55.625, 23.37626954
 56.25, 23.63069001
 56.875, 23.88534114
 57.5, 24.14024032
 58.125, 24.39540522
 58.75, 24.65085383
 59.375, 24.90660443
 60, 25.16267566
 60.625, 25.41908646
 61.25, 25.67585616
 61.875, 25.93300444
 62.5, 26.19055136
ENDTABLE
RACK_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -80, -31.32135342
 -79.2, -30.99639101
 -78.4, -30.67266583
 -77.6, -30.35012854
 -76.8, -30.02873131
 -76, -29.70842778
 -75.2, -29.38917298
 -74.4, -29.07092322
 -73.6, -28.75363611
 -72.8, -28.43727041
 -72, -28.12178603
 -71.2, -27.80714397
 -70.4, -27.49330626
 -69.6, -27.18023589
 -68.8, -26.86789682
 -68, -26.55625389
 -67.2, -26.24527281
 -66.4, -25.93492008
 -65.6, -25.62516301
 -64.8, -25.31596965
 -64, -25.00730875
 -63.2, -24.69914977
 -62.4, -24.39146281
 -61.6, -24.08421859
 -60.8, -23.77738844
 -60, -23.47094426
 -59.2, -23.16485851
 -58.4, -22.85910415
 -57.6, -22.55365467
 -56.8, -22.24848404
 -56, -21.94356669
 -55.2, -21.63887748
 -54.4, -21.33439172
 -53.6, -21.03008512
 -52.8, -20.72593377
 -52, -20.42191414
 -51.2, -20.11800308
 -50.4, -19.81417776
 -49.6, -19.51041568
 -48.8, -19.20669467
 -48, -18.90299287
 -47.2, -18.59928868
 -46.4, -18.29556083
 -45.6, -17.99178826
 -44.8, -17.6879502
 -44, -17.38402613
 -43.2, -17.07999575
 -42.4, -16.77583898
 -41.6, -16.47153598
 -40.8, -16.1670671
 -40, -15.86241288
 -39.2, -15.55755406
 -38.4, -15.25247156
 -37.6, -14.94714647
 -36.8, -14.64156005
 -36, -14.33569371
 -35.2, -14.02952902
 -34.4, -13.72304767
 -33.6, -13.41623152
 -32.8, -13.10906252
 -32, -12.80152278
 -31.2, -12.49359451
 -30.4, -12.18526003
 -29.6, -11.87650177
 -28.8, -11.56730225
 -28, -11.2576441
 -27.2, -10.94751004
 -26.4, -10.63688284
 -25.6, -10.3257454
 -24.8, -10.01408065
 -24, -9.70187162
 -23.2, -9.389101384
 -22.4, -9.075753089
 -21.6, -8.761809933
 -20.8, -8.447255169
 -20, -8.132072094
 -19.2, -7.816244052
 -18.4, -7.499754427
 -17.6, -7.182586638
 -16.8, -6.864724138
 -16, -6.546150407
 -15.2, -6.226848953
 -14.4, -5.906803307
 -13.6, -5.585997015
 -12.8, -5.264413642
 -12, -4.942036764
 -11.2, -4.618849969
 -10.4, -4.294836849
 -9.6, -3.969981
 -8.8, -3.64426602
 -8, -3.317675503
 -7.2, -2.99019304
 -6.4, -2.661802214
 -5.6, -2.332486597
 -4.8, -2.00222975
 -4, -1.671015219
 -3.2, -1.338826529
 -2.4, -1.00564719
 -1.6, -0.671460686
 -0.8, -0.336250478
 0, 0
 0.8, 0.337307343
 1.6, 0.675688178
 2.4, 1.015159164
 3.2, 1.355736997
 4, 1.697438409
 4.8, 2.040280172
 5.6, 2.384279101
 6.4, 2.729452051
 7.2, 3.075815925
 8, 3.423387674
 8.8, 3.772184294
 9.6, 4.122222837
 10.4, 4.473520403
 11.2, 4.826094151
 12, 5.179961291
 12.8, 5.535139097
 13.6, 5.891644897
 14.4, 6.249496084
 15.2, 6.608710113
 16, 6.969304504
 16.8, 7.331296844
 17.6, 7.694704786
 18.4, 8.059546055
 19.2, 8.425838448
 20, 8.793599832
 20.8, 9.162848152
 21.6, 9.533601427
 22.4, 9.905877757
 23.2, 10.27969532
 24, 10.65507237
 24.8, 11.03202726
 25.6, 11.41057841
 26.4, 11.79074434
 27.2, 12.17254366
 28, 12.55599505
 28.8, 12.9411173
 29.6, 13.32792929
 30.4, 13.71645001
 31.2, 14.10669852
 32, 14.498694
 32.8, 14.89245574
 33.6, 15.28800311
 34.4, 15.6853556
 35.2, 16.08453282
 36, 16.48555448
 36.8, 16.8884404
 37.6, 17.29321054
 38.4, 17.69988495
 39.2, 18.10848382
 40, 18.51902747
 40.8, 18.93153635
 41.6, 19.34603104
 42.4, 19.76253224
 43.2, 20.18106081
 44, 20.60163777
 44.8, 21.02428425
 45.6, 21.44902156
 46.4, 21.87587117
 47.2, 22.30485471
 48, 22.73599396
 48.8, 23.1693109
 49.6, 23.60482768
 50.4, 24.04256664
 51.2, 24.48255031
 52, 24.92480143
 52.8, 25.36934294
 53.6, 25.816198
 54.4, 26.26538999
 55.2, 26.71694255
 56, 27.17087953
 56.8, 27.62722506
 57.6, 28.08600353
 58.4, 28.5472396
 59.2, 29.01095823
 60, 29.47718469
 60.8, 29.94594455
 61.6, 30.41726374
 62.4, 30.89116851
 63.2, 31.3676855
 64, 31.84684173
 64.8, 32.32866462
 65.6, 32.81318203
 66.4, 33.30042226
 67.2, 33.79041407
 68, 34.28318675
 68.8, 34.77877008
 69.6, 35.27719442
 70.4, 35.77849071
 71.2, 36.2826905
 72, 36.789826
 72.8, 37.29993011
 73.6, 37.81303646
 74.4, 38.32917945
 75.2, 38.84839433
 76, 39.37071717
 76.8, 39.89618501
 77.6, 40.42483584
 78.4, 40.95670869
 79.2, 41.49184372
 80, 42.03028225
ENDTABLE
RACK_KIN_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -80, -42.03028225
 -79.2, -41.49184372
 -78.4, -40.95670869
 -77.6, -40.42483584
 -76.8, -39.89618501
 -76, -39.37071717
 -75.2, -38.84839433
 -74.4, -38.32917945
 -73.6, -37.81303646
 -72.8, -37.29993011
 -72, -36.789826
 -71.2, -36.2826905
 -70.4, -35.77849071
 -69.6, -35.27719442
 -68.8, -34.77877008
 -68, -34.28318675
 -67.2, -33.79041407
 -66.4, -33.30042226
 -65.6, -32.81318203
 -64.8, -32.32866462
 -64, -31.84684173
 -63.2, -31.3676855
 -62.4, -30.89116851
 -61.6, -30.41726374
 -60.8, -29.94594455
 -60, -29.47718469
 -59.2, -29.01095823
 -58.4, -28.5472396
 -57.6, -28.08600353
 -56.8, -27.62722506
 -56, -27.17087953
 -55.2, -26.71694255
 -54.4, -26.26538999
 -53.6, -25.816198
 -52.8, -25.36934294
 -52, -24.92480143
 -51.2, -24.48255031
 -50.4, -24.04256664
 -49.6, -23.60482768
 -48.8, -23.1693109
 -48, -22.73599396
 -47.2, -22.30485471
 -46.4, -21.87587117
 -45.6, -21.44902156
 -44.8, -21.02428425
 -44, -20.60163777
 -43.2, -20.18106081
 -42.4, -19.76253224
 -41.6, -19.34603104
 -40.8, -18.93153635
 -40, -18.51902747
 -39.2, -18.10848382
 -38.4, -17.69988495
 -37.6, -17.29321054
 -36.8, -16.8884404
 -36, -16.48555448
 -35.2, -16.08453282
 -34.4, -15.6853556
 -33.6, -15.28800311
 -32.8, -14.89245574
 -32, -14.498694
 -31.2, -14.10669852
 -30.4, -13.71645001
 -29.6, -13.32792929
 -28.8, -12.9411173
 -28, -12.55599505
 -27.2, -12.17254366
 -26.4, -11.79074434
 -25.6, -11.41057841
 -24.8, -11.03202726
 -24, -10.65507237
 -23.2, -10.27969532
 -22.4, -9.905877757
 -21.6, -9.533601427
 -20.8, -9.162848152
 -20, -8.793599832
 -19.2, -8.425838448
 -18.4, -8.059546055
 -17.6, -7.694704786
 -16.8, -7.331296844
 -16, -6.969304504
 -15.2, -6.608710113
 -14.4, -6.249496084
 -13.6, -5.891644897
 -12.8, -5.535139097
 -12, -5.179961291
 -11.2, -4.826094151
 -10.4, -4.473520403
 -9.6, -4.122222837
 -8.8, -3.772184294
 -8, -3.423387674
 -7.2, -3.075815925
 -6.4, -2.729452051
 -5.6, -2.384279101
 -4.8, -2.040280172
 -4, -1.697438409
 -3.2, -1.355736997
 -2.4, -1.015159164
 -1.6, -0.675688178
 -0.8, -0.337307343
 0, 0
 0.8, 0.336250478
 1.6, 0.671460686
 2.4, 1.00564719
 3.2, 1.338826529
 4, 1.671015219
 4.8, 2.00222975
 5.6, 2.332486597
 6.4, 2.661802214
 7.2, 2.99019304
 8, 3.317675503
 8.8, 3.64426602
 9.6, 3.969981
 10.4, 4.294836849
 11.2, 4.618849969
 12, 4.942036764
 12.8, 5.264413642
 13.6, 5.585997015
 14.4, 5.906803307
 15.2, 6.226848953
 16, 6.546150407
 16.8, 6.864724138
 17.6, 7.182586638
 18.4, 7.499754427
 19.2, 7.816244052
 20, 8.132072094
 20.8, 8.447255169
 21.6, 8.761809933
 22.4, 9.075753089
 23.2, 9.389101384
 24, 9.70187162
 24.8, 10.01408065
 25.6, 10.3257454
 26.4, 10.63688284
 27.2, 10.94751004
 28, 11.2576441
 28.8, 11.56730225
 29.6, 11.87650177
 30.4, 12.18526003
 31.2, 12.49359451
 32, 12.80152278
 32.8, 13.10906252
 33.6, 13.41623152
 34.4, 13.72304767
 35.2, 14.02952902
 36, 14.33569371
 36.8, 14.64156005
 37.6, 14.94714647
 38.4, 15.25247156
 39.2, 15.55755406
 40, 15.86241288
 40.8, 16.1670671
 41.6, 16.47153598
 42.4, 16.77583898
 43.2, 17.07999575
 44, 17.38402613
 44.8, 17.6879502
 45.6, 17.99178826
 46.4, 18.29556083
 47.2, 18.59928868
 48, 18.90299287
 48.8, 19.20669467
 49.6, 19.51041568
 50.4, 19.81417776
 51.2, 20.11800308
 52, 20.42191414
 52.8, 20.72593377
 53.6, 21.03008512
 54.4, 21.33439172
 55.2, 21.63887748
 56, 21.94356669
 56.8, 22.24848404
 57.6, 22.55365467
 58.4, 22.85910415
 59.2, 23.16485851
 60, 23.47094426
 60.8, 23.77738844
 61.6, 24.08421859
 62.4, 24.39146281
 63.2, 24.69914977
 64, 25.00730875
 64.8, 25.31596965
 65.6, 25.62516301
 66.4, 25.93492008
 67.2, 26.24527281
 68, 26.55625389
 68.8, 26.86789682
 69.6, 27.18023589
 70.4, 27.49330626
 71.2, 27.80714397
 72, 28.12178603
 72.8, 28.43727041
 73.6, 28.75363611
 74.4, 29.07092322
 75.2, 29.38917298
 76, 29.70842778
 76.8, 30.02873131
 77.6, 30.35012854
 78.4, 30.67266583
 79.2, 30.99639101
 80, 31.32135342
ENDTABLE
RACK_KIN_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -60, -29.80500823
 -59.4, -29.50421501
 -58.8, -29.20436201
 -58.2, -28.90540777
 -57.6, -28.60731197
 -57, -28.31003543
 -56.4, -28.01354003
 -55.8, -27.71778862
 -55.2, -27.42274506
 -54.6, -27.12837409
 -54, -26.83464135
 -53.4, -26.5415133
 -52.8, -26.24895719
 -52.2, -25.95694104
 -51.6, -25.66543361
 -51, -25.37440432
 -50.4, -25.08382328
 -49.8, -24.79366123
 -49.2, -24.5038895
 -48.6, -24.21448001
 -48, -23.92540525
 -47.4, -23.63663821
 -46.8, -23.34815241
 -46.2, -23.05992185
 -45.6, -22.77192098
 -45, -22.48412471
 -44.4, -22.19650837
 -43.8, -21.90904771
 -43.2, -21.62171886
 -42.6, -21.3344983
 -42, -21.04736292
 -41.4, -20.7602899
 -40.8, -20.47325677
 -40.2, -20.18624139
 -39.6, -19.89922188
 -39, -19.61217669
 -38.4, -19.32508451
 -37.8, -19.03792431
 -37.2, -18.75067531
 -36.6, -18.46331696
 -36, -18.17582896
 -35.4, -17.8881912
 -34.8, -17.60038381
 -34.2, -17.31238709
 -33.6, -17.02418156
 -33, -16.73574789
 -32.4, -16.44706696
 -31.8, -16.15811978
 -31.2, -15.86888754
 -30.6, -15.57935158
 -30, -15.28949335
 -29.4, -14.99929448
 -28.8, -14.70873671
 -28.2, -14.41780188
 -27.6, -14.12647197
 -27, -13.83472907
 -26.4, -13.54255536
 -25.8, -13.24993312
 -25.2, -12.95684472
 -24.6, -12.66327262
 -24, -12.36919936
 -23.4, -12.07460755
 -22.8, -11.77947986
 -22.2, -11.48379905
 -21.6, -11.18754793
 -21, -10.89070936
 -20.4, -10.59326624
 -19.8, -10.29520155
 -19.2, -9.996498285
 -18.6, -9.697139484
 -18, -9.397108227
 -17.4, -9.096387619
 -16.8, -8.794960794
 -16.2, -8.492810909
 -15.6, -8.189921141
 -15, -7.886274682
 -14.4, -7.581854737
 -13.8, -7.276644522
 -13.2, -6.970627259
 -12.6, -6.663786171
 -12, -6.356104485
 -11.4, -6.047565421
 -10.8, -5.738152198
 -10.2, -5.427848024
 -9.6, -5.116636097
 -9, -4.8044996
 -8.4, -4.491421702
 -7.8, -4.177385553
 -7.2, -3.86237428
 -6.6, -3.54637099
 -6, -3.229358762
 -5.4, -2.911320648
 -4.8, -2.59223967
 -4.2, -2.272098819
 -3.6, -1.950881051
 -3, -1.628569287
 -2.4, -1.305146409
 -1.8, -0.980595261
 -1.2, -0.654898645
 -0.6, -0.32803932
 0, 0
 0.6, 0.329236646
 1.2, 0.659687997
 1.8, 0.991371483
 2.4, 1.324304581
 3, 1.658504822
 3.6, 1.993989792
 4.2, 2.330777127
 4.8, 2.668884522
 5.4, 3.008329728
 6, 3.349130552
 6.6, 3.691304861
 7.2, 4.034870582
 7.8, 4.379845703
 8.4, 4.726248271
 9, 5.074096398
 9.6, 5.423408256
 10.2, 5.774202085
 10.8, 6.126496183
 11.4, 6.480308919
 12, 6.835658724
 12.6, 7.192564095
 13.2, 7.551043595
 13.8, 7.911115855
 14.4, 8.272799571
 15, 8.636113509
 15.6, 9.001076499
 16.2, 9.367707442
 16.8, 9.736025303
 17.4, 10.10604912
 18, 10.47779799
 18.6, 10.85129109
 19.2, 11.22654765
 19.8, 11.60358698
 20.4, 11.98242846
 21, 12.36309152
 21.6, 12.74559568
 22.2, 13.12996051
 22.8, 13.51620565
 23.4, 13.90435081
 24, 14.29441577
 24.6, 14.68642037
 25.2, 15.08038452
 25.8, 15.47632818
 26.4, 15.87427141
 27, 16.2742343
 27.6, 16.67623702
 28.2, 17.0802998
 28.8, 17.48644294
 29.4, 17.8946868
 30, 18.30505181
 30.6, 18.71755845
 31.2, 19.13222727
 31.8, 19.5490789
 32.4, 19.968134
 33, 20.38941332
 33.6, 20.81293768
 34.2, 21.23872793
 34.8, 21.66680501
 35.4, 22.09718994
 36, 22.52990377
 36.6, 22.96496764
 37.2, 23.40240274
 37.8, 23.84223037
 38.4, 24.28447185
 39, 24.72914861
 39.6, 25.17628214
 40.2, 25.62589401
 40.8, 26.07800586
 41.4, 26.53263943
 42, 26.98981655
 42.6, 27.44955911
 43.2, 27.91188913
 43.8, 28.3768287
 44.4, 28.84440004
 45, 29.31462548
 45.6, 29.78752743
 46.2, 30.26312847
 46.8, 30.7414513
 47.4, 31.22251873
 48, 31.70635376
 48.6, 32.19297954
 49.2, 32.68241937
 49.8, 33.17469676
 50.4, 33.66983541
 51, 34.16785922
 51.6, 34.66879233
 52.2, 35.17265913
 52.8, 35.67948424
 53.4, 36.18929261
 54, 36.70210947
 54.6, 37.21796036
 55.2, 37.73687121
 55.8, 38.25886831
 56.4, 38.78397838
 57, 39.31222854
 57.6, 39.84364644
 58.2, 40.37826022
 58.8, 40.91609857
 59.4, 41.45719079
 60, 42.00156682
ENDTABLE
RACK_KIN_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -60, -42.00156682
 -59.4, -41.45719079
 -58.8, -40.91609857
 -58.2, -40.37826022
 -57.6, -39.84364644
 -57, -39.31222854
 -56.4, -38.78397838
 -55.8, -38.25886831
 -55.2, -37.73687121
 -54.6, -37.21796036
 -54, -36.70210947
 -53.4, -36.18929261
 -52.8, -35.67948424
 -52.2, -35.17265913
 -51.6, -34.66879233
 -51, -34.16785922
 -50.4, -33.66983541
 -49.8, -33.17469676
 -49.2, -32.68241937
 -48.6, -32.19297954
 -48, -31.70635376
 -47.4, -31.22251873
 -46.8, -30.7414513
 -46.2, -30.26312847
 -45.6, -29.78752743
 -45, -29.31462548
 -44.4, -28.84440004
 -43.8, -28.3768287
 -43.2, -27.91188913
 -42.6, -27.44955911
 -42, -26.98981655
 -41.4, -26.53263943
 -40.8, -26.07800586
 -40.2, -25.62589401
 -39.6, -25.17628214
 -39, -24.72914861
 -38.4, -24.28447185
 -37.8, -23.84223037
 -37.2, -23.40240274
 -36.6, -22.96496764
 -36, -22.52990377
 -35.4, -22.09718994
 -34.8, -21.66680501
 -34.2, -21.23872793
 -33.6, -20.81293768
 -33, -20.38941332
 -32.4, -19.968134
 -31.8, -19.5490789
 -31.2, -19.13222727
 -30.6, -18.71755845
 -30, -18.30505181
 -29.4, -17.8946868
 -28.8, -17.48644294
 -28.2, -17.0802998
 -27.6, -16.67623702
 -27, -16.2742343
 -26.4, -15.87427141
 -25.8, -15.47632818
 -25.2, -15.08038452
 -24.6, -14.68642037
 -24, -14.29441577
 -23.4, -13.90435081
 -22.8, -13.51620565
 -22.2, -13.12996051
 -21.6, -12.74559568
 -21, -12.36309152
 -20.4, -11.98242846
 -19.8, -11.60358698
 -19.2, -11.22654765
 -18.6, -10.85129109
 -18, -10.47779799
 -17.4, -10.10604912
 -16.8, -9.736025303
 -16.2, -9.367707442
 -15.6, -9.001076499
 -15, -8.636113509
 -14.4, -8.272799571
 -13.8, -7.911115855
 -13.2, -7.551043595
 -12.6, -7.192564095
 -12, -6.835658724
 -11.4, -6.480308919
 -10.8, -6.126496183
 -10.2, -5.774202085
 -9.6, -5.423408256
 -9, -5.074096398
 -8.4, -4.726248271
 -7.8, -4.379845703
 -7.2, -4.034870582
 -6.6, -3.691304861
 -6, -3.349130552
 -5.4, -3.008329728
 -4.8, -2.668884522
 -4.2, -2.330777127
 -3.6, -1.993989792
 -3, -1.658504822
 -2.4, -1.324304581
 -1.8, -0.991371483
 -1.2, -0.659687997
 -0.6, -0.329236646
 0, 0
 0.6, 0.32803932
 1.2, 0.654898645
 1.8, 0.980595261
 2.4, 1.305146409
 3, 1.628569287
 3.6, 1.950881051
 4.2, 2.272098819
 4.8, 2.59223967
 5.4, 2.911320648
 6, 3.229358762
 6.6, 3.54637099
 7.2, 3.86237428
 7.8, 4.177385553
 8.4, 4.491421702
 9, 4.8044996
 9.6, 5.116636097
 10.2, 5.427848024
 10.8, 5.738152198
 11.4, 6.047565421
 12, 6.356104485
 12.6, 6.663786171
 13.2, 6.970627259
 13.8, 7.276644522
 14.4, 7.581854737
 15, 7.886274682
 15.6, 8.189921141
 16.2, 8.492810909
 16.8, 8.794960794
 17.4, 9.096387619
 18, 9.397108227
 18.6, 9.697139484
 19.2, 9.996498285
 19.8, 10.29520155
 20.4, 10.59326624
 21, 10.89070936
 21.6, 11.18754793
 22.2, 11.48379905
 22.8, 11.77947986
 23.4, 12.07460755
 24, 12.36919936
 24.6, 12.66327262
 25.2, 12.95684472
 25.8, 13.24993312
 26.4, 13.54255536
 27, 13.83472907
 27.6, 14.12647197
 28.2, 14.41780188
 28.8, 14.70873671
 29.4, 14.99929448
 30, 15.28949335
 30.6, 15.57935158
 31.2, 15.86888754
 31.8, 16.15811978
 32.4, 16.44706696
 33, 16.73574789
 33.6, 17.02418156
 34.2, 17.31238709
 34.8, 17.60038381
 35.4, 17.8881912
 36, 18.17582896
 36.6, 18.46331696
 37.2, 18.75067531
 37.8, 19.03792431
 38.4, 19.32508451
 39, 19.61217669
 39.6, 19.89922188
 40.2, 20.18624139
 40.8, 20.47325677
 41.4, 20.7602899
 42, 21.04736292
 42.6, 21.3344983
 43.2, 21.62171886
 43.8, 21.90904771
 44.4, 22.19650837
 45, 22.48412471
 45.6, 22.77192098
 46.2, 23.05992185
 46.8, 23.34815241
 47.4, 23.63663821
 48, 23.92540525
 48.6, 24.21448001
 49.2, 24.5038895
 49.8, 24.79366123
 50.4, 25.08382328
 51, 25.37440432
 51.6, 25.66543361
 52.2, 25.95694104
 52.8, 26.24895719
 53.4, 26.5415133
 54, 26.83464135
 54.6, 27.12837409
 55.2, 27.42274506
 55.8, 27.71778862
 56.4, 28.01354003
 57, 28.31003543
 57.6, 28.60731197
 58.2, 28.90540777
 58.8, 29.20436201
 59.4, 29.50421501
 60, 29.80500823
ENDTABLE
RACK_KIN_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                       ! steer
RACK_KIN_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1,1) 0.102125 ! Coefficient: rack displacement per unit
                                      ! pinion angle (mm/deg), unit 1, axle 1
RACK_TRAVEL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rack
                        ! displacement
RACK_TRAVEL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rack displacement

RACK_TRAVEL_COEFFICIENT(2,1) 0.1279444444 ! Coefficient: rack displacement per unit
                                          ! pinion angle (mm/deg), unit 2, axle 1
RACK_TRAVEL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rack
                        ! displacement
RACK_TRAVEL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rack displacement

RACK_TRAVEL_COEFFICIENT(3,1) 0.1111111111 ! Coefficient: rack displacement per unit
                                          ! pinion angle (mm/deg), unit 3, axle 1
RACK_TRAVEL_GAIN(3,1) 1 ! Gain multiplied with calculated value to get rack
                        ! displacement
RACK_TRAVEL_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get rack displacement

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(1)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(1)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(1) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(1) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(2)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(2)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(2) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(3) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(3)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(3)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(3) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(3) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 8 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(2,1) 0 ; - ! [D] Constant gain, unit 2, axle 1
R_STEER_SPEED_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(3,1) 0 ; - ! [D] Constant gain, unit 3, axle 1
R_STEER_SPEED_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(4,1) 0 ; - ! [D] Constant gain, unit 4, axle 1
R_STEER_SPEED_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(2) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(2) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(2) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(3) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(3) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(3) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(4) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(4) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(4) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(2) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(2) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(2) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(2) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(3) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(3) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(3) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(3) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(4) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(4) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(4) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(4) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AX_BRAKE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(3) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(3) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(3) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(4) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(4) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(4) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AX_THROTTLE_CONSTANT(1) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(2) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(3) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(3) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(3) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(4) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(4) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(4) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AY_LEFT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(3) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(3) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(3) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(4) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(4) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(4) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AY_RIGHT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(3) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(3) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(3) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(4) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(4) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(4) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1) 2001  ! Need to Stop
SPEED_TARGET_CONSTANT(1) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(1) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(1) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(1) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(2) 2000  ! Path Preview: 0.15/0.2 G Ax/Ay, SPEED_LIMIT_ID
SPEED_TARGET_CONSTANT(2) 40 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;
SPEED_TARGET_S_CONSTANT(2) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(3) 2002  ! Need to Stop, v2
SPEED_TARGET_CONSTANT(3) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(3) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(3) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(3) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(3) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(3) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(3) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(3) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(4) 2003  ! Need to Stop, v3
SPEED_TARGET_CONSTANT(4) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(4) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(4) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(4) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(4) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(4) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(4) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(4) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(5) 2004  ! Need to Stop, v4
SPEED_TARGET_CONSTANT(5) 20 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(5) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(5) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(5) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(5) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(5) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(5) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(5) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1,1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 1, axle 1
STEER_COMP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

STEER_COMP_COEFFICIENT(2,1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 2, axle 1
STEER_COMP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(2,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(2,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

STEER_COMP_COEFFICIENT(3,1) 7e-07 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 3, axle 1
STEER_COMP_GAIN(3,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(3,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(3,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

STEER_COMP_COEFFICIENT(4,1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 4, axle 1
STEER_COMP_GAIN(4,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(4,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(4,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -28.8, -25.49
 -27.65, -24.57
 -26.5, -23.64
 -25.34, -22.7
 -24.19, -21.76
 -23.04, -20.82
 -21.89, -19.86
 -20.74, -18.9
 -19.58, -17.94
 -18.43, -16.96
 -17.28, -15.97
 -16.13, -14.98
 -14.98, -13.98
 -13.82, -12.97
 -12.67, -11.95
 -11.52, -10.92
 -10.37, -9.88
 -9.22, -8.82
 -8.06, -7.76
 -6.91, -6.69
 -5.76, -5.6
 -4.61, -4.51
 -3.46, -3.4
 -2.3, -2.28
 -1.15, -1.15
 0, 0
 1.15, 1.16
 2.3, 2.33
 3.46, 3.52
 4.61, 4.71
 5.76, 5.93
 6.91, 7.15
 8.06, 8.39
 9.22, 9.64
 10.37, 10.91
 11.52, 12.19
 12.67, 13.49
 13.82, 14.8
 14.98, 16.12
 16.13, 17.46
 17.28, 18.81
 18.43, 20.17
 19.58, 21.55
 20.74, 22.94
 21.89, 24.34
 23.04, 25.76
 24.19, 27.18
 25.34, 28.62
 26.5, 30.07
 27.65, 31.53
 28.8, 32.99
ENDTABLE
STEER_KIN_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -28.8, -32.99
 -27.65, -31.53
 -26.5, -30.07
 -25.34, -28.62
 -24.19, -27.18
 -23.04, -25.76
 -21.89, -24.34
 -20.74, -22.94
 -19.58, -21.55
 -18.43, -20.17
 -17.28, -18.81
 -16.13, -17.46
 -14.98, -16.12
 -13.82, -14.8
 -12.67, -13.49
 -11.52, -12.19
 -10.37, -10.91
 -9.22, -9.64
 -8.06, -8.39
 -6.91, -7.15
 -5.76, -5.93
 -4.61, -4.71
 -3.46, -3.52
 -2.3, -2.33
 -1.15, -1.16
 0, 0
 1.15, 1.15
 2.3, 2.28
 3.46, 3.4
 4.61, 4.51
 5.76, 5.6
 6.91, 6.69
 8.06, 7.76
 9.22, 8.82
 10.37, 9.88
 11.52, 10.92
 12.67, 11.95
 13.82, 12.97
 14.98, 13.98
 16.13, 14.98
 17.28, 15.97
 18.43, 16.96
 19.58, 17.94
 20.74, 18.9
 21.89, 19.86
 23.04, 20.82
 24.19, 21.76
 25.34, 22.7
 26.5, 23.64
 27.65, 24.57
 28.8, 25.49
ENDTABLE
STEER_KIN_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, right side

SUSP_DIVE_COEFFICIENT(1,2,1) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 1, axle 2, left side
SUSP_DIVE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, left side

SUSP_DIVE_COEFFICIENT(1,2,2) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 1, axle 2, right side
SUSP_DIVE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, right side

SUSP_DIVE_CONSTANT(2,2,1) 0 ; deg ! [D] Constant suspension dive component due to
                            ! jounce, unit 2, axle 2, left side
SUSP_DIVE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
SUSP_DIVE_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2,1) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 2, left side

SUSP_DIVE_CONSTANT(2,2,2) 0 ; deg ! [D] Constant suspension dive component due to
                            ! jounce, unit 2, axle 2, right side
SUSP_DIVE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
SUSP_DIVE_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2,2) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 1, right side

SUSP_DIVE_COEFFICIENT(3,2,1) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 3, axle 2, left side
SUSP_DIVE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,2,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,2,1) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 2, left side

SUSP_DIVE_COEFFICIENT(3,2,2) 0 ! Coefficient: suspension dive per unit jounce
                               ! (deg/mm), unit 3, axle 2, right side
SUSP_DIVE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,2,2) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(4,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(4,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(4,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(4,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 4, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(4,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(4,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(4,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(4,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 4, axle 1, right side

SUSP_DIVE_CONSTANT(4,2,1) 0 ; deg ! [D] Constant suspension dive component due to
                            ! jounce, unit 4, axle 2, left side
SUSP_DIVE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
SUSP_DIVE_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(4,2,1) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 4, axle 2, left side

SUSP_DIVE_CONSTANT(4,2,2) 0 ; deg ! [D] Constant suspension dive component due to
                            ! jounce, unit 4, axle 2, right side
SUSP_DIVE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
SUSP_DIVE_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(4,2,2) 1 ; - ! [D] Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 4, axle 2, right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, 34.7232
 -135, 28.9298
 -120, 23.7162
 -105, 19.0508
 -90, 14.9073
 -75, 11.2635
 -60, 8.10101
 -45, 5.40464
 -30, 3.16193
 -15, 1.36294
 0, 0
 15, -0.932437
 30, -1.43789
 45, -1.51794
 60, -1.1722
 75, -0.398333
 90, 0.808049
 105, 2.45344
 120, 4.54658
 135, 7.09849
 150, 10.1225
ENDTABLE
SUSP_LAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, 34.7232
 -135, 28.9298
 -120, 23.7162
 -105, 19.0508
 -90, 14.9073
 -75, 11.2635
 -60, 8.10101
 -45, 5.40464
 -30, 3.16193
 -15, 1.36294
 0, 0
 15, -0.932437
 30, -1.43789
 45, -1.51794
 60, -1.1722
 75, -0.398333
 90, 0.808049
 105, 2.45344
 120, 4.54658
 135, 7.09849
 150, 10.1225
ENDTABLE
SUSP_LAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, right
                                          ! side

SUSP_LAT_CONSTANT(2,2,1) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                           ! wheel component due to jounce, unit 2, axle 2, left
                           ! side
SUSP_LAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
SUSP_LAT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2,1) 1 ; - ! [D] Constant Lateral movement inward
                                          ! of unsteered wheel component due to
                                          ! jounce (other side), unit 2, axle 2,
                                          ! left side

SUSP_LAT_CONSTANT(2,2,2) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                           ! wheel component due to jounce, unit 2, axle 2, right
                           ! side
SUSP_LAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
SUSP_LAT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2,2) 1 ; - ! [D] Constant Lateral movement inward
                                          ! of unsteered wheel component due to
                                          ! jounce (other side), unit 2, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 1, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,2,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,2,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,2,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,2,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 2, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(4,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(4,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(4,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(4,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 4, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(4,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(4,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(4,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(4,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 4, axle 1, right
                                          ! side

SUSP_LAT_CONSTANT(4,2,1) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                           ! wheel component due to jounce, unit 4, axle 2, left
                           ! side
SUSP_LAT_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
SUSP_LAT_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(4,2,1) 1 ; - ! [D] Constant Lateral movement inward
                                          ! of unsteered wheel component due to
                                          ! jounce (other side), unit 4, axle 2,
                                          ! left side

SUSP_LAT_CONSTANT(4,2,2) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                           ! wheel component due to jounce, unit 4, axle 2, right
                           ! side
SUSP_LAT_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
SUSP_LAT_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(4,2,2) 1 ; - ! [D] Constant Lateral movement inward
                                          ! of unsteered wheel component due to
                                          ! jounce (other side), unit 4, axle 2,
                                          ! right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, 34.0109
 -135, 29.0492
 -120, 24.4735
 -105, 20.2638
 -90, 16.4039
 -75, 12.8801
 -60, 9.68167
 -45, 6.79994
 -30, 4.22844
 -15, 1.96266
 0, 0
 15, -1.66025
 30, -3.01692
 45, -4.06686
 60, -4.8048
 75, -5.22318
 90, -5.31173
 105, -5.05706
 120, -4.44179
 135, -3.4432
 150, -2.03055
ENDTABLE
SUSP_X_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, 34.0109
 -135, 29.0492
 -120, 24.4735
 -105, 20.2638
 -90, 16.4039
 -75, 12.8801
 -60, 9.68167
 -45, 6.79994
 -30, 4.22844
 -15, 1.96266
 0, 0
 15, -1.66025
 30, -3.01692
 45, -4.06686
 60, -4.8048
 75, -5.22318
 90, -5.31173
 105, -5.05706
 120, -4.44179
 135, -3.4432
 150, -2.03055
ENDTABLE
SUSP_X_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 2, left side

SUSP_X_CONSTANT(2,2,2) 0 ; mm ! [D] Constant X movement forward of unsteered wheel
                         ! component due to jounce, unit 2, axle 2, right side
SUSP_X_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
SUSP_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2,2) 1 ; - ! [D] Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,2,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(4,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(4,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(4,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(4,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 4, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(4,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(4,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(4,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(4,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 4, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(4,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(4,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(4,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(4,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(4,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 4, axle 2, left side

SUSP_X_CONSTANT(4,2,2) 0 ; mm ! [D] Constant X movement forward of unsteered wheel
                         ! component due to jounce, unit 4, axle 2, right side
SUSP_X_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
SUSP_X_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(4,2,2) 1 ; - ! [D] Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 4, axle 2, right side

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

THROTTLE_ENGINE_CONSTANT(1) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(2) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(3) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(4) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(4) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, -0.230886
 -135, -0.137958
 -120, -0.067203
 -105, -0.0158
 -90, 0.018818
 -75, 0.03903
 -60, 0.047078
 -45, 0.045112
 -30, 0.035225
 -15, 0.019492
 0, 0
 15, -0.021118
 30, -0.041648
 45, -0.059255
 60, -0.071439
 75, -0.075487
 90, -0.068408
 105, -0.046854
 120, -0.007025
 135, 0.055466
 150, 0.145778
ENDTABLE
TOE_GAIN(1,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, -0.230886
 -135, -0.137958
 -120, -0.067203
 -105, -0.0158
 -90, 0.018818
 -75, 0.03903
 -60, 0.047078
 -45, 0.045112
 -30, 0.035225
 -15, 0.019492
 0, 0
 15, -0.021118
 30, -0.041648
 45, -0.059255
 60, -0.071439
 75, -0.075487
 90, -0.068408
 105, -0.046854
 120, -0.007025
 135, 0.055466
 150, 0.145778
ENDTABLE
TOE_GAIN(1,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! right side

TOE_CONSTANT(2,2,1) 0 ; deg ! [D] Constant toe component due to jounce, unit 2, axle
                      ! 2, left side
TOE_GAIN(2,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2,1)   0 ; deg ! Offset added (after gain) to get toe
TOE_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2,1) 1 ; - ! [D] Constant toe component due to
                                          ! jounce (other side), unit 2, axle 2,
                                          ! left side

TOE_CONSTANT(2,2,2) 0 ; deg ! [D] Constant toe component due to jounce, unit 2, axle
                      ! 2, right side
TOE_GAIN(2,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2,2)   0 ; deg ! Offset added (after gain) to get toe
TOE_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2,2) 1 ; - ! [D] Constant toe component due to
                                          ! jounce (other side), unit 2, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(3,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(3,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 1,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(3,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,2,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,2,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,2,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 2,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(3,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,2,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,2,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,2,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(4,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(4,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(4,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(4,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(4,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(4,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 4, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(4,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(4,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(4,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(4,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(4,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(4,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 4, axle 1,
                                          ! right side

TOE_CONSTANT(4,2,1) 0 ; deg ! [D] Constant toe component due to jounce, unit 4, axle
                      ! 2, left side
TOE_GAIN(4,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(4,2,1)   0 ; deg ! Offset added (after gain) to get toe
TOE_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(4,2,1) 1 ; - ! [D] Constant toe component due to
                                          ! jounce (other side), unit 4, axle 2,
                                          ! left side

TOE_CONSTANT(4,2,2) 0 ; deg ! [D] Constant toe component due to jounce, unit 4, axle
                      ! 2, right side
TOE_GAIN(4,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(4,2,2)   0 ; deg ! Offset added (after gain) to get toe
TOE_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(4,2,2) 1 ; - ! [D] Constant toe component due to
                                          ! jounce (other side), unit 4, axle 2,
                                          ! right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

TPREV_CONSTANT(1) 0.5 ; s ! Constant preview time
TPREV_GAIN(1)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(1)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(2) 0.5 ; s ! Constant preview time
TPREV_GAIN(2)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(2)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(3) 0.5 ; s ! Constant preview time
TPREV_GAIN(3)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(3)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(4) 0.5 ; s ! Constant preview time
TPREV_GAIN(4)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(4)     0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 68 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IGEAR are used to identify the dataset when
! reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 849
 0.2, 849
 0.8, 1429
 1, 1429
ENDTABLE
UPSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 1324
 0.2, 1324
 0.8, 2547
 1, 2547
ENDTABLE
UPSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 1748
 0.2, 1748
 0.8, 3971
 1, 3971
ENDTABLE
UPSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 2143
 0.2, 2143
 0.8, 5243
 1, 5243
ENDTABLE
UPSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,1) LINEAR_FLAT ! vehicle 4, gear shift 1<->2
 0, 401.81
 0.1, 401.81
 0.2, 639.68
 0.3, 850.8
 0.4, 938.22
 0.5, 998.48
 0.6, 1015.2
 0.7, 1032
 1, 1032
ENDTABLE
UPSHIFT_TRANS_GAIN(4,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,2) LINEAR_FLAT ! vehicle 4, gear shift 2<->3
 0, 401.81
 0.1, 401.81
 0.2, 639.68
 0.3, 850.8
 0.4, 938.22
 0.5, 998.48
 0.6, 1015.2
 0.7, 1032
 1, 1032
ENDTABLE
UPSHIFT_TRANS_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,3) LINEAR_FLAT ! vehicle 4, gear shift 3<->4
 0, 1638.9
 0.1, 1638.9
 0.2, 2093.7
 0.3, 2426.8
 0.4, 2759.9
 0.5, 3012.8
 0.6, 3221
 0.7, 3259.7
 0.8, 3293.3
 1, 3293.3
ENDTABLE
UPSHIFT_TRANS_GAIN(4,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,4) LINEAR_FLAT ! vehicle 4, gear shift 4<->5
 0, 3653.5
 0.2, 3653.5
 0.3, 3872.9
 0.4, 4092.3
 0.5, 4311.6
 0.6, 4508.6
 0.7, 4578
 0.8, 4583.5
 1, 4583.5
ENDTABLE
UPSHIFT_TRANS_GAIN(4,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 16 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; SW Loop, CW, 1000
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 0, 146.342, 0
 100, 146.342, 100
 139.1578, 146.3425, 139.158
 141.6701, 145.8907, 141.71
 144.2277, 144.2443, 144.752
 145.5496, 142.4319, 146.995
 146.343, 139.1335, 150.388
 146.343, 100, 189.521
 146.342, 0, 289.521
 146.342, -39.1335, 328.655
 145.5894, -42.3158, 331.925
 144.0178, -44.4016, 334.537
 141.5487, -45.9072, 337.428
 139.0693, -46.343, 339.946
 100, -46.343, 379.015
 0, -46.343, 479.015
 -0.8717, -46.343, 479.887
 -2.8741, -46.2513, 481.891
 -4.9006, -46.0827, 483.925
 -6.9294, -45.8238, 485.97
 -8.9446, -45.4669, 488.017
 -10.9459, -45.0284, 490.065
 -12.9382, -44.5062, 492.125
 -14.9031, -43.8872, 494.185
 -16.922, -43.1457, 496.336
 -18.7387, -42.3889, 498.304
 -20.6089, -41.5095, 500.371
 -22.4348, -40.5491, 502.434
 -24.2267, -39.5016, 504.509
 -25.97, -38.375, 506.585
 -27.6508, -37.1795, 508.648
 -29.2848, -35.9043, 510.72
 -30.873, -34.5466, 512.81
 -32.378, -33.1395, 514.87
 -33.8246, -31.6617, 516.938
 -35.2169, -30.1068, 519.025
 -36.5235, -28.51, 521.088
 -37.7662, -26.8457, 523.165
 -38.9263, -25.1383, 525.23
 -40.02, -23.3628, 527.315
 -41.0165, -21.5708, 529.365
 -41.9433, -19.7136, 531.441
 -42.7818, -17.8259, 533.507
 -43.5341, -15.904, 535.57
 -44.1978, -13.9555, 537.629
 -44.7754, -11.9725, 539.694
 -45.2566, -9.9967, 541.728
 -45.6536, -7.9801, 543.783
 -45.9599, -5.9516, 545.835
 -46.1737, -3.9405, 547.857
 -46.3006, -1.9026, 549.899
 -46.342, -0.7068, 551.095
 -46.342, 0, 551.802
 -46.342, 100, 651.802
 -46.3425, 139.1578, 690.96
 -45.8907, 141.6701, 693.513
 -44.2443, 144.2277, 696.554
 -42.4319, 145.5496, 698.798
 -39.1335, 146.343, 702.19
 0, 146.342, 741.324
ENDTABLE

XY_TABLE_ID(2)      2 ; SW Loop, CCW, 1001
SEGMENT_XY_TABLE(2) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 102.5658, 102.566
 153.3726, 107.219, 107.228
 152.5437, 111.6622, 111.748
 150.5829, 119.9654, 120.279
 150.128, 123.6307, 123.973
 150, 127.0854, 127.43
 150, 142.5051, 142.849
 149.1364, 146.816, 147.246
 146.6976, 150.4242, 151.601
 143.448, 152.6634, 155.547
 138.8255, 153.658, 160.276
 100, 153.658, 199.101
 0, 153.658, 299.101
 -2.5658, 153.658, 301.667
 -7.2272, 153.3715, 306.337
 -13.7829, 152.0102, 313.033
 -19.9132, 150.5919, 319.325
 -27.0854, 150, 326.522
 -42.5051, 150, 341.941
 -47.2013, 148.9659, 346.75
 -50.4384, 146.6833, 350.711
 -52.7125, 143.3382, 354.756
 -53.658, 138.8255, 359.366
 -53.658, 100, 398.192
 -53.658, 0, 498.192
 -53.658, -1.3894, 499.581
 -53.494, -3.9148, 502.112
 -53.1509, -7.2933, 505.508
 -52.2842, -11.9767, 510.271
 -51.0756, -16.4471, 514.902
 -49.4338, -20.8694, 519.619
 -47.3984, -25.1461, 524.355
 -44.9958, -29.2216, 529.086
 -42.2402, -33.0741, 533.823
 -39.1505, -36.6763, 538.569
 -35.7727, -39.9783, 543.292
 -32.0917, -42.9923, 548.05
 -28.1794, -45.6569, 552.783
 -24.047, -47.9663, 557.517
 -19.7319, -49.899, 562.245
 -15.2823, -51.4356, 566.953
 -10.7165, -52.5642, 571.656
 -6.0884, -53.3008, 576.342
 -1.4435, -53.657, 581.001
 0, -53.657, 582.444
 100, -53.659, 682.444
 103.5823, -53.658, 686.027
 108.5995, -53.2292, 691.062
 114.1807, -51.9184, 696.795
 120.7004, -50.481, 703.472
 127.2658, -50, 710.055
 142.4348, -50, 725.224
 146.2015, -49.3558, 729.045
 149.7763, -47.2851, 733.176
 152.5142, -43.768, 737.633
 153.658, -38.8661, 742.667
 153.658, 0, 781.533
ENDTABLE

XY_TABLE_ID(3)      3 ; NW Loop, CW, 1002
SEGMENT_XY_TABLE(3) ! table with X (m), Y (m), and calculated station S (m)
 146.342, 300, 0
 146.342, 200, 100
 146.3425, 160.8422, 139.158
 145.8907, 158.3299, 141.71
 144.2443, 155.7723, 144.752
 142.4319, 154.4504, 146.995
 139.1335, 153.657, 150.388
 100, 153.657, 189.521
 0, 153.658, 289.521
 -39.1335, 153.658, 328.655
 -42.3158, 154.4106, 331.925
 -44.4016, 155.9822, 334.537
 -45.9072, 158.4513, 337.428
 -46.343, 160.9307, 339.946
 -46.343, 200, 379.015
 -46.341, 300, 479.015
 -46.343, 300.8717, 479.887
 -46.2513, 302.8741, 481.891
 -46.0827, 304.9006, 483.925
 -45.8238, 306.9294, 485.97
 -45.4669, 308.9446, 488.017
 -45.0284, 310.9459, 490.065
 -44.5062, 312.9382, 492.125
 -43.8872, 314.9031, 494.185
 -43.1457, 316.922, 496.336
 -42.3889, 318.7387, 498.304
 -41.5095, 320.6089, 500.371
 -40.5491, 322.4348, 502.434
 -39.5016, 324.2267, 504.509
 -38.375, 325.97, 506.585
 -37.1795, 327.6508, 508.648
 -35.9043, 329.2848, 510.72
 -34.5466, 330.873, 512.81
 -33.1395, 332.378, 514.87
 -31.6617, 333.8246, 516.938
 -30.1068, 335.2169, 519.025
 -28.51, 336.5235, 521.088
 -26.8457, 337.7662, 523.165
 -25.1383, 338.9263, 525.23
 -23.3628, 340.02, 527.315
 -21.5708, 341.0165, 529.365
 -19.7136, 341.9433, 531.441
 -17.8259, 342.7818, 533.507
 -15.904, 343.5341, 535.57
 -13.9555, 344.1978, 537.629
 -11.9725, 344.7754, 539.694
 -9.9967, 345.2566, 541.728
 -7.9801, 345.6536, 543.783
 -5.9516, 345.9599, 545.835
 -3.9405, 346.1737, 547.857
 -1.9026, 346.3006, 549.899
 -0.7068, 346.342, 551.095
 0, 346.342, 551.802
 100, 346.342, 651.802
 139.1578, 346.3425, 690.96
 141.6701, 345.8907, 693.513
 144.2277, 344.2443, 696.554
 145.5496, 342.4319, 698.798
 146.343, 339.1335, 702.19
 146.342, 300, 741.324
ENDTABLE

XY_TABLE_ID(4)      4 ; NW Loop, CCW, 1003
SEGMENT_XY_TABLE(4) ! table with X (m), Y (m), and calculated station S (m)
 0, 146.342, 0
 100, 146.342, 100
 103.5823, 146.342, 103.582
 108.5995, 146.7708, 108.618
 114.1807, 148.0816, 114.351
 120.7004, 149.519, 121.027
 127.2658, 150, 127.61
 142.4348, 150, 142.779
 146.2015, 150.6442, 146.601
 149.7763, 152.7149, 150.732
 152.5142, 156.232, 155.189
 153.658, 161.1339, 160.222
 153.658, 200, 199.089
 153.658, 300, 299.089
 153.658, 302.5658, 301.654
 153.3715, 307.2272, 306.325
 152.0102, 313.7829, 313.02
 150.5919, 319.9132, 319.312
 150, 327.0854, 326.509
 150, 342.5051, 341.929
 148.9659, 347.2013, 346.737
 146.6833, 350.4384, 350.698
 143.3382, 352.7125, 354.743
 138.8255, 353.658, 359.354
 100, 353.658, 398.179
 0, 353.658, 498.179
 -1.3894, 353.658, 499.569
 -3.9148, 353.494, 502.099
 -7.2933, 353.1509, 505.495
 -11.9767, 352.2842, 510.258
 -16.4471, 351.0756, 514.889
 -20.8694, 349.4338, 519.606
 -25.1461, 347.3984, 524.343
 -29.2216, 344.9958, 529.074
 -33.0741, 342.2402, 533.81
 -36.6763, 339.1505, 538.556
 -39.9783, 335.7727, 543.28
 -42.9923, 332.0917, 548.037
 -45.6569, 328.1794, 552.771
 -47.9663, 324.047, 557.505
 -49.899, 319.7319, 562.233
 -51.4356, 315.2823, 566.94
 -52.5642, 310.7165, 571.643
 -53.3008, 306.0884, 576.33
 -53.657, 301.4435, 580.988
 -53.657, 300, 582.432
 -53.657, 200, 682.432
 -53.658, 196.4177, 686.014
 -53.2292, 191.4005, 691.05
 -51.9184, 185.8193, 696.783
 -50.481, 179.2996, 703.459
 -50, 172.7342, 710.042
 -50, 157.5652, 725.211
 -49.3558, 153.7985, 729.032
 -47.2851, 150.2237, 733.164
 -43.768, 147.4858, 737.621
 -38.8661, 146.342, 742.654
 0, 146.342, 781.52
ENDTABLE

XY_TABLE_ID(5)      5 ; NE Loop, CW, 1004
SEGMENT_XY_TABLE(5) ! table with X (m), Y (m), and calculated station S (m)
 300, 153.658, 0
 200, 153.658, 100
 160.8422, 153.6575, 139.158
 158.3299, 154.1093, 141.71
 155.7723, 155.7557, 144.752
 154.4504, 157.5681, 146.995
 153.657, 160.8665, 150.388
 153.657, 200, 189.521
 153.658, 300, 289.521
 153.658, 339.1335, 328.655
 154.4106, 342.3158, 331.925
 155.9822, 344.4016, 334.537
 158.4513, 345.9072, 337.428
 160.9307, 346.343, 339.946
 200, 346.343, 379.015
 300, 346.341, 479.015
 300.8717, 346.343, 479.887
 302.8741, 346.2513, 481.891
 304.9006, 346.0827, 483.925
 306.9294, 345.8238, 485.97
 308.9446, 345.4669, 488.017
 310.9459, 345.0284, 490.065
 312.9382, 344.5062, 492.125
 314.9031, 343.8872, 494.185
 316.922, 343.1457, 496.336
 318.7387, 342.3889, 498.304
 320.6089, 341.5095, 500.371
 322.4348, 340.5491, 502.434
 324.2267, 339.5016, 504.509
 325.97, 338.375, 506.585
 327.6508, 337.1795, 508.648
 329.2848, 335.9043, 510.72
 330.873, 334.5466, 512.81
 332.378, 333.1395, 514.87
 333.8246, 331.6617, 516.938
 335.2169, 330.1068, 519.025
 336.5235, 328.51, 521.088
 337.7662, 326.8457, 523.165
 338.9263, 325.1383, 525.23
 340.02, 323.3628, 527.315
 341.0165, 321.5708, 529.365
 341.9433, 319.7136, 531.441
 342.7818, 317.8259, 533.507
 343.5341, 315.904, 535.57
 344.1978, 313.9555, 537.629
 344.7754, 311.9725, 539.694
 345.2566, 309.9967, 541.728
 345.6536, 307.9801, 543.783
 345.9599, 305.9516, 545.835
 346.1737, 303.9405, 547.857
 346.3006, 301.9026, 549.899
 346.342, 300.7068, 551.095
 346.342, 300, 551.802
 346.342, 200, 651.802
 346.3425, 160.8422, 690.96
 345.8907, 158.3299, 693.513
 344.2443, 155.7723, 696.554
 342.4319, 154.4504, 698.798
 339.1335, 153.657, 702.19
 300, 153.658, 741.324
ENDTABLE

XY_TABLE_ID(6)      6 ; NE Loop, CCW, 1005
SEGMENT_XY_TABLE(6) ! table with X (m), Y (m), and calculated station S (m)
 146.342, 300, 0
 146.342, 200, 100
 146.342, 196.4177, 103.582
 146.7708, 191.4005, 108.618
 148.0816, 185.8193, 114.351
 149.519, 179.2996, 121.027
 150, 172.7342, 127.61
 150, 157.5652, 142.779
 150.6442, 153.7985, 146.601
 152.7149, 150.2237, 150.732
 156.232, 147.4858, 155.189
 161.1339, 146.342, 160.222
 200, 146.342, 199.089
 300, 146.342, 299.089
 302.5658, 146.342, 301.654
 307.9577, 146.7287, 307.06
 312.3213, 147.6166, 311.513
 320.1003, 149.44, 319.503
 327.0854, 150, 326.51
 342.5051, 150, 341.93
 346.7485, 150.8356, 346.255
 350.4725, 153.3515, 350.749
 352.6418, 156.5044, 354.576
 353.658, 161.1745, 359.356
 353.658, 200, 398.181
 353.658, 300, 498.181
 353.658, 301.3894, 499.571
 353.494, 303.9148, 502.101
 353.1509, 307.2933, 505.497
 352.2842, 311.9767, 510.26
 351.0756, 316.4471, 514.891
 349.4338, 320.8694, 519.608
 347.3984, 325.1461, 524.345
 344.9958, 329.2216, 529.076
 342.2402, 333.0741, 533.812
 339.1505, 336.6763, 538.558
 335.7727, 339.9783, 543.282
 332.0917, 342.9923, 548.039
 328.1794, 345.6569, 552.773
 324.047, 347.9663, 557.507
 319.7319, 349.899, 562.235
 315.2823, 351.4356, 566.942
 310.7165, 352.5642, 571.645
 306.0884, 353.3008, 576.332
 301.4435, 353.657, 580.99
 300, 353.657, 582.434
 200, 353.657, 682.434
 196.4177, 353.658, 686.016
 191.4005, 353.2292, 691.052
 185.8193, 351.9184, 696.785
 179.2996, 350.481, 703.461
 172.7342, 350, 710.044
 157.5652, 350, 725.213
 153.7985, 349.3558, 729.034
 150.2237, 347.2851, 733.165
 147.4858, 343.768, 737.623
 146.342, 338.8661, 742.656
 146.342, 300, 781.522
ENDTABLE

XY_TABLE_ID(7)      7 ; SE Loop, CW, 1006
SEGMENT_XY_TABLE(7) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 139.1335, 139.133
 154.4106, 142.3158, 142.404
 155.9822, 144.4016, 145.015
 158.4513, 145.9072, 147.907
 160.9307, 146.343, 150.425
 200, 146.343, 189.494
 300, 146.342, 289.494
 339.1335, 146.342, 328.627
 342.3158, 145.5894, 331.897
 344.4016, 144.0178, 334.509
 345.9072, 141.5487, 337.401
 346.343, 139.0693, 339.918
 346.343, 100, 378.988
 346.343, 0, 478.988
 346.343, -0.8717, 479.859
 346.2513, -2.8741, 481.864
 346.0827, -4.9006, 483.897
 345.8238, -6.9294, 485.943
 345.4669, -8.9446, 487.989
 345.0284, -10.9459, 490.038
 344.5062, -12.9382, 492.098
 343.8872, -14.9031, 494.158
 343.1457, -16.922, 496.308
 342.3889, -18.7387, 498.276
 341.5095, -20.6089, 500.343
 340.5491, -22.4348, 502.406
 339.5016, -24.2267, 504.482
 338.375, -25.97, 506.557
 337.1795, -27.6508, 508.62
 335.9043, -29.2848, 510.693
 334.5466, -30.873, 512.782
 333.1395, -32.378, 514.842
 331.6617, -33.8246, 516.91
 330.1068, -35.2169, 518.998
 328.51, -36.5235, 521.061
 326.8457, -37.7662, 523.138
 325.1383, -38.9263, 525.202
 323.3628, -40.02, 527.287
 321.5708, -41.0165, 529.338
 319.7136, -41.9433, 531.414
 317.8259, -42.7818, 533.479
 315.904, -43.5341, 535.543
 313.9555, -44.1978, 537.601
 311.9725, -44.7754, 539.667
 309.9967, -45.2566, 541.7
 307.9801, -45.6536, 543.756
 305.9516, -45.9599, 545.807
 303.9405, -46.1737, 547.83
 301.9026, -46.3006, 549.871
 300.7068, -46.342, 551.068
 300, -46.342, 551.775
 200, -46.342, 651.775
 160.8422, -46.3425, 690.933
 158.3299, -45.8907, 693.485
 155.7723, -44.2443, 696.527
 154.4504, -42.4319, 698.77
 153.657, -39.1335, 702.163
 153.658, 0, 741.296
ENDTABLE

XY_TABLE_ID(8)      8 ; SE Loop, CCW, 1007
SEGMENT_XY_TABLE(8) ! table with X (m), Y (m), and calculated station S (m)
 300, 153.658, 0
 200, 153.658, 100
 196.4177, 153.658, 103.582
 191.4005, 153.2292, 108.618
 185.8193, 151.9184, 114.351
 179.2996, 150.481, 121.027
 172.7342, 150, 127.61
 157.5652, 150, 142.779
 153.7985, 149.3558, 146.601
 150.2237, 147.2851, 150.732
 147.4858, 143.768, 155.189
 146.342, 138.8661, 160.222
 146.342, 100, 199.089
 146.342, 0, 299.089
 146.342, -2.5658, 301.654
 146.7287, -7.9577, 307.06
 147.6166, -12.3213, 311.513
 149.44, -20.1003, 319.503
 150, -27.0854, 326.51
 150, -42.5051, 341.93
 150.8356, -46.7485, 346.255
 153.3515, -50.4725, 350.749
 156.5044, -52.6418, 354.576
 161.1745, -53.658, 359.356
 200, -53.658, 398.181
 300, -53.658, 498.181
 301.3894, -53.658, 499.571
 303.9148, -53.494, 502.101
 307.2933, -53.1509, 505.497
 311.9767, -52.2842, 510.26
 316.4471, -51.0756, 514.891
 320.8694, -49.4338, 519.608
 325.1461, -47.3984, 524.345
 329.2216, -44.9958, 529.076
 333.0741, -42.2402, 533.812
 336.6763, -39.1505, 538.558
 339.9783, -35.7727, 543.282
 342.9923, -32.0917, 548.039
 345.6569, -28.1794, 552.773
 347.9663, -24.047, 557.507
 349.899, -19.7319, 562.235
 351.4356, -15.2823, 566.942
 352.5642, -10.7165, 571.645
 353.3008, -6.0884, 576.332
 353.657, -1.4435, 580.99
 353.657, 0, 582.434
 353.659, 100, 682.434
 353.658, 103.5823, 686.016
 353.2292, 108.5995, 691.052
 351.9184, 114.1807, 696.785
 350.481, 120.7004, 703.461
 350, 127.2658, 710.044
 350, 142.4348, 725.213
 349.3558, 146.2015, 729.034
 347.2851, 149.7763, 733.165
 343.768, 152.5142, 737.623
 338.8661, 153.658, 742.656
 300, 153.658, 781.522
ENDTABLE

XY_TABLE_ID(9)      9 ; E Loop, CW, 1008
SEGMENT_XY_TABLE(9) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 200, 200
 153.658, 300, 300
 153.658, 339.1335, 339.134
 154.4106, 342.3158, 342.404
 155.9822, 344.4016, 345.015
 158.4513, 345.9072, 347.907
 160.9307, 346.343, 350.425
 200, 346.343, 389.494
 300, 346.341, 489.494
 300.8717, 346.343, 490.366
 302.8741, 346.2513, 492.37
 304.9006, 346.0827, 494.404
 306.9294, 345.8238, 496.449
 308.9446, 345.4669, 498.495
 310.9459, 345.0284, 500.544
 312.9382, 344.5062, 502.604
 314.9031, 343.8872, 504.664
 316.922, 343.1457, 506.815
 318.7387, 342.3889, 508.783
 320.6089, 341.5095, 510.849
 322.4348, 340.5491, 512.912
 324.2267, 339.5016, 514.988
 325.97, 338.375, 517.064
 327.6508, 337.1795, 519.126
 329.2848, 335.9043, 521.199
 330.873, 334.5466, 523.288
 332.378, 333.1395, 525.349
 333.8246, 331.6617, 527.417
 335.2169, 330.1068, 529.504
 336.5235, 328.51, 531.567
 337.7662, 326.8457, 533.644
 338.9263, 325.1383, 535.708
 340.02, 323.3628, 537.794
 341.0165, 321.5708, 539.844
 341.9433, 319.7136, 541.92
 342.7818, 317.8259, 543.985
 343.5341, 315.904, 546.049
 344.1978, 313.9555, 548.108
 344.7754, 311.9725, 550.173
 345.2566, 309.9967, 552.207
 345.6536, 307.9801, 554.262
 345.9599, 305.9516, 556.313
 346.1737, 303.9405, 558.336
 346.3006, 301.9026, 560.378
 346.342, 300.7068, 561.574
 346.342, 300, 562.281
 346.342, 200, 662.281
 346.342, 100, 762.281
 346.343, 0, 862.281
 346.343, -0.8717, 863.153
 346.2513, -2.8741, 865.157
 346.0827, -4.9006, 867.191
 345.8238, -6.9294, 869.236
 345.4669, -8.9446, 871.282
 345.0284, -10.9459, 873.331
 344.5062, -12.9382, 875.391
 343.8872, -14.9031, 877.451
 343.1457, -16.922, 879.602
 342.3889, -18.7387, 881.57
 341.5095, -20.6089, 883.636
 340.5491, -22.4348, 885.699
 339.5016, -24.2267, 887.775
 338.375, -25.97, 889.851
 337.1795, -27.6508, 891.913
 335.9043, -29.2848, 893.986
 334.5466, -30.873, 896.075
 333.1395, -32.378, 898.136
 331.6617, -33.8246, 900.204
 330.1068, -35.2169, 902.291
 328.51, -36.5235, 904.354
 326.8457, -37.7662, 906.431
 325.1383, -38.9263, 908.495
 323.3628, -40.02, 910.581
 321.5708, -41.0165, 912.631
 319.7136, -41.9433, 914.707
 317.8259, -42.7818, 916.772
 315.904, -43.5341, 918.836
 313.9555, -44.1978, 920.895
 311.9725, -44.7754, 922.96
 309.9967, -45.2566, 924.994
 307.9801, -45.6536, 927.049
 305.9516, -45.9599, 929.1
 303.9405, -46.1737, 931.123
 301.9026, -46.3006, 933.165
 300.7068, -46.342, 934.361
 300, -46.342, 935.068
 200, -46.342, 1035.068
 160.8422, -46.3425, 1074.226
 158.3299, -45.8907, 1076.778
 155.7723, -44.2443, 1079.82
 154.4504, -42.4319, 1082.063
 153.657, -39.1335, 1085.456
 153.658, 0, 1124.589
ENDTABLE

XY_TABLE_ID(10)    10 ; W Loop, CW, 1009
SEGMENT_XY_TABLE(10) ! table with X (m), Y (m), and calculated station S (m)
 146.342, 300, 0
 146.342, 200, 100
 146.342, 100, 200
 146.342, 0, 300
 146.342, -39.1335, 339.134
 145.5894, -42.3158, 342.404
 144.0178, -44.4016, 345.015
 141.5487, -45.9072, 347.907
 139.0693, -46.343, 350.425
 100, -46.343, 389.494
 0, -46.343, 489.494
 -0.8717, -46.343, 490.366
 -2.8741, -46.2513, 492.37
 -4.9006, -46.0827, 494.404
 -6.9294, -45.8238, 496.449
 -8.9446, -45.4669, 498.495
 -10.9459, -45.0284, 500.544
 -12.9382, -44.5062, 502.604
 -14.9031, -43.8872, 504.664
 -16.922, -43.1457, 506.815
 -18.7387, -42.3889, 508.783
 -20.6089, -41.5095, 510.849
 -22.4348, -40.5491, 512.912
 -24.2267, -39.5016, 514.988
 -25.97, -38.375, 517.064
 -27.6508, -37.1795, 519.126
 -29.2848, -35.9043, 521.199
 -30.873, -34.5466, 523.288
 -32.378, -33.1395, 525.349
 -33.8246, -31.6617, 527.417
 -35.2169, -30.1068, 529.504
 -36.5235, -28.51, 531.567
 -37.7662, -26.8457, 533.644
 -38.9263, -25.1383, 535.708
 -40.02, -23.3628, 537.794
 -41.0165, -21.5708, 539.844
 -41.9433, -19.7136, 541.92
 -42.7818, -17.8259, 543.985
 -43.5341, -15.904, 546.049
 -44.1978, -13.9555, 548.108
 -44.7754, -11.9725, 550.173
 -45.2566, -9.9967, 552.207
 -45.6536, -7.9801, 554.262
 -45.9599, -5.9516, 556.313
 -46.1737, -3.9405, 558.336
 -46.3006, -1.9026, 560.378
 -46.342, -0.7068, 561.574
 -46.342, 0, 562.281
 -46.342, 100, 662.281
 -46.342, 200, 762.281
 -46.341, 300, 862.281
 -46.343, 300.8717, 863.153
 -46.2513, 302.8741, 865.157
 -46.0827, 304.9006, 867.191
 -45.8238, 306.9294, 869.236
 -45.4669, 308.9446, 871.282
 -45.0284, 310.9459, 873.331
 -44.5062, 312.9382, 875.391
 -43.8872, 314.9031, 877.451
 -43.1457, 316.922, 879.602
 -42.3889, 318.7387, 881.57
 -41.5095, 320.6089, 883.636
 -40.5491, 322.4348, 885.699
 -39.5016, 324.2267, 887.775
 -38.375, 325.97, 889.851
 -37.1795, 327.6508, 891.913
 -35.9043, 329.2848, 893.986
 -34.5466, 330.873, 896.075
 -33.1395, 332.378, 898.136
 -31.6617, 333.8246, 900.204
 -30.1068, 335.2169, 902.291
 -28.51, 336.5235, 904.354
 -26.8457, 337.7662, 906.431
 -25.1383, 338.9263, 908.495
 -23.3628, 340.02, 910.581
 -21.5708, 341.0165, 912.631
 -19.7136, 341.9433, 914.707
 -17.8259, 342.7818, 916.772
 -15.904, 343.5341, 918.836
 -13.9555, 344.1978, 920.895
 -11.9725, 344.7754, 922.96
 -9.9967, 345.2566, 924.994
 -7.9801, 345.6536, 927.049
 -5.9516, 345.9599, 929.1
 -3.9405, 346.1737, 931.123
 -1.9026, 346.3006, 933.165
 -0.7068, 346.342, 934.361
 0, 346.342, 935.068
 100, 346.342, 1035.068
 139.1578, 346.3425, 1074.226
 141.6701, 345.8907, 1076.778
 144.2277, 344.2443, 1079.82
 145.5496, 342.4319, 1082.063
 146.343, 339.1335, 1085.456
 146.342, 300, 1124.589
ENDTABLE

XY_TABLE_ID(11)    11 ; N Loop, CW, 1010
SEGMENT_XY_TABLE(11) ! table with X (m), Y (m), and calculated station S (m)
 300, 153.658, 0
 200, 153.658, 100
 100, 153.658, 200
 0, 153.658, 300
 -39.1335, 153.658, 339.134
 -42.3158, 154.4106, 342.404
 -44.4016, 155.9822, 345.015
 -45.9072, 158.4513, 347.907
 -46.343, 160.9307, 350.425
 -46.343, 200, 389.494
 -46.341, 300, 489.494
 -46.343, 300.8717, 490.366
 -46.2513, 302.8741, 492.37
 -46.0827, 304.9006, 494.404
 -45.8238, 306.9294, 496.449
 -45.4669, 308.9446, 498.495
 -45.0284, 310.9459, 500.544
 -44.5062, 312.9382, 502.604
 -43.8872, 314.9031, 504.664
 -43.1457, 316.922, 506.815
 -42.3889, 318.7387, 508.783
 -41.5095, 320.6089, 510.849
 -40.5491, 322.4348, 512.912
 -39.5016, 324.2267, 514.988
 -38.375, 325.97, 517.064
 -37.1795, 327.6508, 519.126
 -35.9043, 329.2848, 521.199
 -34.5466, 330.873, 523.288
 -33.1395, 332.378, 525.349
 -31.6617, 333.8246, 527.417
 -30.1068, 335.2169, 529.504
 -28.51, 336.5235, 531.567
 -26.8457, 337.7662, 533.644
 -25.1383, 338.9263, 535.708
 -23.3628, 340.02, 537.794
 -21.5708, 341.0165, 539.844
 -19.7136, 341.9433, 541.92
 -17.8259, 342.7818, 543.985
 -15.904, 343.5341, 546.049
 -13.9555, 344.1978, 548.108
 -11.9725, 344.7754, 550.173
 -9.9967, 345.2566, 552.207
 -7.9801, 345.6536, 554.262
 -5.9516, 345.9599, 556.313
 -3.9405, 346.1737, 558.336
 -1.9026, 346.3006, 560.378
 -0.7068, 346.342, 561.574
 0, 346.342, 562.281
 100, 346.342, 662.281
 200, 346.342, 762.281
 300, 346.341, 862.281
 300.8717, 346.343, 863.153
 302.8741, 346.2513, 865.157
 304.9006, 346.0827, 867.191
 306.9294, 345.8238, 869.236
 308.9446, 345.4669, 871.282
 310.9459, 345.0284, 873.331
 312.9382, 344.5062, 875.391
 314.9031, 343.8872, 877.451
 316.922, 343.1457, 879.602
 318.7387, 342.3889, 881.57
 320.6089, 341.5095, 883.636
 322.4348, 340.5491, 885.699
 324.2267, 339.5016, 887.775
 325.97, 338.375, 889.851
 327.6508, 337.1795, 891.913
 329.2848, 335.9043, 893.986
 330.873, 334.5466, 896.075
 332.378, 333.1395, 898.136
 333.8246, 331.6617, 900.204
 335.2169, 330.1068, 902.291
 336.5235, 328.51, 904.354
 337.7662, 326.8457, 906.431
 338.9263, 325.1383, 908.495
 340.02, 323.3628, 910.581
 341.0165, 321.5708, 912.631
 341.9433, 319.7136, 914.707
 342.7818, 317.8259, 916.772
 343.5341, 315.904, 918.836
 344.1978, 313.9555, 920.895
 344.7754, 311.9725, 922.96
 345.2566, 309.9967, 924.994
 345.6536, 307.9801, 927.049
 345.9599, 305.9516, 929.1
 346.1737, 303.9405, 931.123
 346.3006, 301.9026, 933.165
 346.342, 300.7068, 934.361
 346.342, 300, 935.068
 346.342, 200, 1035.068
 346.3425, 160.8422, 1074.226
 345.8907, 158.3299, 1076.778
 344.2443, 155.7723, 1079.82
 342.4319, 154.4504, 1082.063
 339.1335, 153.657, 1085.456
 300, 153.658, 1124.589
ENDTABLE

XY_TABLE_ID(12)    12 ; S Loop, CW, 1011
SEGMENT_XY_TABLE(12) ! table with X (m), Y (m), and calculated station S (m)
 0, 146.342, 0
 100, 146.342, 100
 200, 146.342, 200
 300, 146.342, 300
 339.1335, 146.342, 339.134
 342.3158, 145.5894, 342.404
 344.4016, 144.0178, 345.015
 345.9072, 141.5487, 347.907
 346.343, 139.0693, 350.425
 346.343, 100, 389.494
 346.343, 0, 489.494
 346.343, -0.8717, 490.366
 346.2513, -2.8741, 492.37
 346.0827, -4.9006, 494.404
 345.8238, -6.9294, 496.449
 345.4669, -8.9446, 498.495
 345.0284, -10.9459, 500.544
 344.5062, -12.9382, 502.604
 343.8872, -14.9031, 504.664
 343.1457, -16.922, 506.815
 342.3889, -18.7387, 508.783
 341.5095, -20.6089, 510.849
 340.5491, -22.4348, 512.912
 339.5016, -24.2267, 514.988
 338.375, -25.97, 517.064
 337.1795, -27.6508, 519.126
 335.9043, -29.2848, 521.199
 334.5466, -30.873, 523.288
 333.1395, -32.378, 525.349
 331.6617, -33.8246, 527.417
 330.1068, -35.2169, 529.504
 328.51, -36.5235, 531.567
 326.8457, -37.7662, 533.644
 325.1383, -38.9263, 535.708
 323.3628, -40.02, 537.794
 321.5708, -41.0165, 539.844
 319.7136, -41.9433, 541.92
 317.8259, -42.7818, 543.985
 315.904, -43.5341, 546.049
 313.9555, -44.1978, 548.108
 311.9725, -44.7754, 550.173
 309.9967, -45.2566, 552.207
 307.9801, -45.6536, 554.262
 305.9516, -45.9599, 556.313
 303.9405, -46.1737, 558.336
 301.9026, -46.3006, 560.378
 300.7068, -46.342, 561.574
 300, -46.342, 562.281
 200, -46.342, 662.281
 100, -46.342, 762.281
 0, -46.343, 862.281
 -0.8717, -46.343, 863.153
 -2.8741, -46.2513, 865.157
 -4.9006, -46.0827, 867.191
 -6.9294, -45.8238, 869.236
 -8.9446, -45.4669, 871.282
 -10.9459, -45.0284, 873.331
 -12.9382, -44.5062, 875.391
 -14.9031, -43.8872, 877.451
 -16.922, -43.1457, 879.602
 -18.7387, -42.3889, 881.57
 -20.6089, -41.5095, 883.636
 -22.4348, -40.5491, 885.699
 -24.2267, -39.5016, 887.775
 -25.97, -38.375, 889.851
 -27.6508, -37.1795, 891.913
 -29.2848, -35.9043, 893.986
 -30.873, -34.5466, 896.075
 -32.378, -33.1395, 898.136
 -33.8246, -31.6617, 900.204
 -35.2169, -30.1068, 902.291
 -36.5235, -28.51, 904.354
 -37.7662, -26.8457, 906.431
 -38.9263, -25.1383, 908.495
 -40.02, -23.3628, 910.581
 -41.0165, -21.5708, 912.631
 -41.9433, -19.7136, 914.707
 -42.7818, -17.8259, 916.772
 -43.5341, -15.904, 918.836
 -44.1978, -13.9555, 920.895
 -44.7754, -11.9725, 922.96
 -45.2566, -9.9967, 924.994
 -45.6536, -7.9801, 927.049
 -45.9599, -5.9516, 929.1
 -46.1737, -3.9405, 931.123
 -46.3006, -1.9026, 933.165
 -46.342, -0.7068, 934.361
 -46.342, 0, 935.068
 -46.342, 100, 1035.068
 -46.3425, 139.1578, 1074.226
 -45.8907, 141.6701, 1076.778
 -44.2443, 144.2277, 1079.82
 -42.4319, 145.5496, 1082.063
 -39.1335, 146.343, 1085.456
 0, 146.342, 1124.589
ENDTABLE

XY_TABLE_ID(13)    13 ; E Loop, CCW, 1012
SEGMENT_XY_TABLE(13) ! table with X (m), Y (m), and calculated station S (m)
 146.342, 300, 0
 146.342, 200, 100
 146.342, 100, 200
 146.342, 0, 300
 146.342, -2.5658, 302.566
 146.7287, -7.9577, 307.972
 147.6166, -12.3213, 312.425
 149.44, -20.1003, 320.414
 150, -27.0854, 327.422
 150, -42.5051, 342.842
 150.8356, -46.7485, 347.167
 153.3515, -50.4725, 351.661
 156.5044, -52.6418, 355.488
 161.1745, -53.658, 360.267
 200, -53.658, 399.093
 300, -53.658, 499.093
 301.3894, -53.658, 500.482
 303.9148, -53.494, 503.013
 307.2933, -53.1509, 506.409
 311.9767, -52.2842, 511.172
 316.4471, -51.0756, 515.803
 320.8694, -49.4338, 520.52
 325.1461, -47.3984, 525.256
 329.2216, -44.9958, 529.987
 333.0741, -42.2402, 534.724
 336.6763, -39.1505, 539.469
 339.9783, -35.7727, 544.193
 342.9923, -32.0917, 548.951
 345.6569, -28.1794, 553.684
 347.9663, -24.047, 558.418
 349.899, -19.7319, 563.146
 351.4356, -15.2823, 567.854
 352.5642, -10.7165, 572.557
 353.3008, -6.0884, 577.243
 353.657, -1.4435, 581.902
 353.657, 0, 583.345
 353.659, 100, 683.345
 353.658, 200, 783.345
 353.658, 300, 883.345
 353.658, 301.3894, 884.735
 353.494, 303.9148, 887.265
 353.1509, 307.2933, 890.661
 352.2842, 311.9767, 895.424
 351.0756, 316.4471, 900.055
 349.4338, 320.8694, 904.772
 347.3984, 325.1461, 909.509
 344.9958, 329.2216, 914.24
 342.2402, 333.0741, 918.976
 339.1505, 336.6763, 923.722
 335.7727, 339.9783, 928.446
 332.0917, 342.9923, 933.203
 328.1794, 345.6569, 937.937
 324.047, 347.9663, 942.67
 319.7319, 349.899, 947.399
 315.2823, 351.4356, 952.106
 310.7165, 352.5642, 956.809
 306.0884, 353.3008, 961.496
 301.4435, 353.657, 966.154
 300, 353.657, 967.598
 200, 353.657, 1067.598
 196.4177, 353.658, 1071.18
 191.4005, 353.2292, 1076.215
 185.8193, 351.9184, 1081.949
 179.2996, 350.481, 1088.625
 172.7342, 350, 1095.208
 157.5652, 350, 1110.377
 153.7985, 349.3558, 1114.198
 150.2237, 347.2851, 1118.329
 147.4858, 343.768, 1122.787
 146.342, 338.8661, 1127.82
 146.342, 300, 1166.686
ENDTABLE

XY_TABLE_ID(14)    14 ; W Loop, CCW, 1013
SEGMENT_XY_TABLE(14) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 200, 200
 153.658, 300, 300
 153.658, 302.5658, 302.566
 153.3715, 307.2272, 307.236
 152.0102, 313.7829, 313.932
 150.5919, 319.9132, 320.224
 150, 327.0854, 327.42
 150, 342.5051, 342.84
 148.9659, 347.2013, 347.649
 146.6833, 350.4384, 351.61
 143.3382, 352.7125, 355.655
 138.8255, 353.658, 360.265
 100, 353.658, 399.091
 0, 353.658, 499.091
 -1.3894, 353.658, 500.48
 -3.9148, 353.494, 503.011
 -7.2933, 353.1509, 506.407
 -11.9767, 352.2842, 511.17
 -16.4471, 351.0756, 515.801
 -20.8694, 349.4338, 520.518
 -25.1461, 347.3984, 525.254
 -29.2216, 344.9958, 529.985
 -33.0741, 342.2402, 534.722
 -36.6763, 339.1505, 539.467
 -39.9783, 335.7727, 544.191
 -42.9923, 332.0917, 548.949
 -45.6569, 328.1794, 553.682
 -47.9663, 324.047, 558.416
 -49.899, 319.7319, 563.144
 -51.4356, 315.2823, 567.852
 -52.5642, 310.7165, 572.555
 -53.3008, 306.0884, 577.241
 -53.657, 301.4435, 581.9
 -53.657, 300, 583.343
 -53.657, 200, 683.343
 -53.658, 100, 783.343
 -53.658, 0, 883.343
 -53.658, -1.3894, 884.733
 -53.494, -3.9148, 887.263
 -53.1509, -7.2933, 890.659
 -52.2842, -11.9767, 895.422
 -51.0756, -16.4471, 900.053
 -49.4338, -20.8694, 904.77
 -47.3984, -25.1461, 909.507
 -44.9958, -29.2216, 914.238
 -42.2402, -33.0741, 918.974
 -39.1505, -36.6763, 923.72
 -35.7727, -39.9783, 928.444
 -32.0917, -42.9923, 933.201
 -28.1794, -45.6569, 937.935
 -24.047, -47.9663, 942.669
 -19.7319, -49.899, 947.397
 -15.2823, -51.4356, 952.104
 -10.7165, -52.5642, 956.807
 -6.0884, -53.3008, 961.494
 -1.4435, -53.657, 966.152
 0, -53.657, 967.596
 100, -53.659, 1067.596
 103.5823, -53.658, 1071.178
 108.5995, -53.2292, 1076.214
 114.1807, -51.9184, 1081.947
 120.7004, -50.481, 1088.623
 127.2658, -50, 1095.206
 142.4348, -50, 1110.375
 146.2015, -49.3558, 1114.196
 149.7763, -47.2851, 1118.328
 152.5142, -43.768, 1122.785
 153.658, -38.8661, 1127.818
 153.658, 0, 1166.684
ENDTABLE

XY_TABLE_ID(15)    15 ; N Loop, CCW, 1014
SEGMENT_XY_TABLE(15) ! table with X (m), Y (m), and calculated station S (m)
 0, 146.342, 0
 100, 146.342, 100
 200, 146.342, 200
 300, 146.342, 300
 302.5658, 146.342, 302.566
 307.9577, 146.7287, 307.972
 312.3213, 147.6166, 312.425
 320.1003, 149.44, 320.414
 327.0854, 150, 327.422
 342.5051, 150, 342.842
 346.7485, 150.8356, 347.167
 350.4725, 153.3515, 351.661
 352.6418, 156.5044, 355.488
 353.658, 161.1745, 360.267
 353.658, 200, 399.093
 353.658, 300, 499.093
 353.658, 301.3894, 500.482
 353.494, 303.9148, 503.013
 353.1509, 307.2933, 506.409
 352.2842, 311.9767, 511.172
 351.0756, 316.4471, 515.803
 349.4338, 320.8694, 520.52
 347.3984, 325.1461, 525.256
 344.9958, 329.2216, 529.987
 342.2402, 333.0741, 534.724
 339.1505, 336.6763, 539.469
 335.7727, 339.9783, 544.193
 332.0917, 342.9923, 548.951
 328.1794, 345.6569, 553.684
 324.047, 347.9663, 558.418
 319.7319, 349.899, 563.146
 315.2823, 351.4356, 567.854
 310.7165, 352.5642, 572.557
 306.0884, 353.3008, 577.243
 301.4435, 353.657, 581.902
 300, 353.657, 583.345
 200, 353.657, 683.345
 100, 353.658, 783.345
 0, 353.658, 883.345
 -1.3894, 353.658, 884.735
 -3.9148, 353.494, 887.265
 -7.2933, 353.1509, 890.661
 -11.9767, 352.2842, 895.424
 -16.4471, 351.0756, 900.055
 -20.8694, 349.4338, 904.772
 -25.1461, 347.3984, 909.509
 -29.2216, 344.9958, 914.24
 -33.0741, 342.2402, 918.976
 -36.6763, 339.1505, 923.722
 -39.9783, 335.7727, 928.446
 -42.9923, 332.0917, 933.203
 -45.6569, 328.1794, 937.937
 -47.9663, 324.047, 942.67
 -49.899, 319.7319, 947.399
 -51.4356, 315.2823, 952.106
 -52.5642, 310.7165, 956.809
 -53.3008, 306.0884, 961.496
 -53.657, 301.4435, 966.154
 -53.657, 300, 967.598
 -53.657, 200, 1067.598
 -53.658, 196.4177, 1071.18
 -53.2292, 191.4005, 1076.215
 -51.9184, 185.8193, 1081.949
 -50.481, 179.2996, 1088.625
 -50, 172.7342, 1095.208
 -50, 157.5652, 1110.377
 -49.3558, 153.7985, 1114.198
 -47.2851, 150.2237, 1118.329
 -43.768, 147.4858, 1122.787
 -38.8661, 146.342, 1127.82
 0, 146.342, 1166.686
ENDTABLE

XY_TABLE_ID(16)    16 ; S Loop, CCW, 1015
SEGMENT_XY_TABLE(16) ! table with X (m), Y (m), and calculated station S (m)
 300, 153.658, 0
 200, 153.658, 100
 100, 153.658, 200
 0, 153.658, 300
 -2.5658, 153.658, 302.566
 -7.2272, 153.3715, 307.236
 -13.7829, 152.0102, 313.932
 -19.9132, 150.5919, 320.224
 -27.0854, 150, 327.42
 -42.5051, 150, 342.84
 -47.2013, 148.9659, 347.649
 -50.4384, 146.6833, 351.61
 -52.7125, 143.3382, 355.655
 -53.658, 138.8255, 360.265
 -53.658, 100, 399.091
 -53.658, 0, 499.091
 -53.658, -1.3894, 500.48
 -53.494, -3.9148, 503.011
 -53.1509, -7.2933, 506.407
 -52.2842, -11.9767, 511.17
 -51.0756, -16.4471, 515.801
 -49.4338, -20.8694, 520.518
 -47.3984, -25.1461, 525.254
 -44.9958, -29.2216, 529.985
 -42.2402, -33.0741, 534.722
 -39.1505, -36.6763, 539.467
 -35.7727, -39.9783, 544.191
 -32.0917, -42.9923, 548.949
 -28.1794, -45.6569, 553.682
 -24.047, -47.9663, 558.416
 -19.7319, -49.899, 563.144
 -15.2823, -51.4356, 567.852
 -10.7165, -52.5642, 572.555
 -6.0884, -53.3008, 577.241
 -1.4435, -53.657, 581.9
 0, -53.657, 583.343
 100, -53.659, 683.343
 200, -53.658, 783.343
 300, -53.658, 883.343
 301.3894, -53.658, 884.733
 303.9148, -53.494, 887.263
 307.2933, -53.1509, 890.659
 311.9767, -52.2842, 895.422
 316.4471, -51.0756, 900.053
 320.8694, -49.4338, 904.77
 325.1461, -47.3984, 909.507
 329.2216, -44.9958, 914.238
 333.0741, -42.2402, 918.974
 336.6763, -39.1505, 923.72
 339.9783, -35.7727, 928.444
 342.9923, -32.0917, 933.201
 345.6569, -28.1794, 937.935
 347.9663, -24.047, 942.669
 349.899, -19.7319, 947.397
 351.4356, -15.2823, 952.104
 352.5642, -10.7165, 956.807
 353.3008, -6.0884, 961.494
 353.657, -1.4435, 966.152
 353.657, 0, 967.596
 353.659, 100, 1067.596
 353.658, 103.5823, 1071.178
 353.2292, 108.5995, 1076.214
 351.9184, 114.1807, 1081.947
 350.481, 120.7004, 1088.623
 350, 127.2658, 1095.206
 350, 142.4348, 1110.375
 349.3558, 146.2015, 1114.196
 347.2851, 149.7763, 1118.328
 343.768, 152.5142, 1122.785
 338.8661, 153.658, 1127.818
 300, 153.658, 1166.684
ENDTABLE


!------------------------------------------------------------------------------------
! VS TERRAIN
!------------------------------------------------------------------------------------
VS_TERRAIN_FILE D:\trunk\Image\CarSim\Core\CarSim_Data\Scene_Import\VS_Scene_Builder\City_Advanced_Intersection.vsterrain ;

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER SPEED_SIGN = 100; - ; Speed limit sign (object type)
DEFINE_PARAMETER STOP_SIGN = 101; - ; Stop sign (object type)
DEFINE_PARAMETER YIELD_SIGN = 102; - ; Yield sign (object type)
DEFINE_PARAMETER LIGHT_GREEN = 110; - ; Traffic light green (object type)
DEFINE_PARAMETER LIGHT_YELLOW = 111; - ; Traffic light yellow (object type)
DEFINE_PARAMETER LIGHT_RED = 112; - ; Traffic light red (object type)
DEFINE_PARAMETER WALL = 150; - ; Wall (object type)
DEFINE_PARAMETER BUILDING = 151; - ; Building (object type)
DEFINE_PARAMETER TRAFFIC = 200; - ; Traffic vehicle (object type)
DEFINE_PARAMETER PEDESTRIAN = 201; - ; Pedestrian or bike (object type)
DEFINE_PARAMETER VEHICLE = 200; - ; Vehicle (object type)
DEFINE_PARAMETER SPEED_LIMIT_ID = 2000; - ; ID for speed limit dataset for path preview
DEFINE_PARAMETER STOP_ID = 2001; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_SIG_PERIOD = 30; s ; Period of a signal cycle
DEFINE_PARAMETER R_SIG_START = 0.75; - ; Fraction of signal period at T = 0
DEFINE_PARAMETER AX_BRAKE = 4; m/s2 ; Deceleration level to apply brakes
DEFINE_PARAMETER S1 = 1; - ; Sensor installed for current vehicle
DEFINE_PARAMETER S2 = 2; - ; Sensor installed for vehicle 2
DEFINE_PARAMETER STOP_ID_2 = 2002; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT2_START = 0; s ; Reference time for T_Event2
DEFINE_PARAMETER S3 = 3; - ; Sensor installed for vehicle 3
DEFINE_PARAMETER STOP_ID_3 = 2003; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT3_START = 0; s ; Reference time for T_Event3
DEFINE_PARAMETER S4 = 4; - ; Sensor installed for vehicle 4
DEFINE_PARAMETER STOP_ID_4 = 2004; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT4_START = 0; s ; Reference time for T_Event4

DEFINE_VARIABLE V_CMD_OBJ_4 = 4.5; km/h ; Speed command
DEFINE_VARIABLE HEADV_O_4 = 0; - ; Heading vector for ODEs
DEFINE_VARIABLE V_CMD_OBJ_5 = 4.68; km/h ; Speed command
DEFINE_VARIABLE HEADV_O_5 = 1.5708; - ; Heading vector for ODEs
DEFINE_VARIABLE V_CMD_OBJ_6 = 18; km/h ; Speed command
DEFINE_VARIABLE HEADV_O_6 = 0; - ; Heading vector for ODEs

DEFINE_OUTPUT ObjCrit = 1; - ; Critical object for this vehicle 
DEFINE_OUTPUT AxCrit = 0; m/s2 ; Required decel for ObjCrit 
DEFINE_OUTPUT IDcrit = 8; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB = 0; - ; Boolean: apply brakes? 
DEFINE_OUTPUT DistCrit = 0; m ; Distance to object bdry 
DEFINE_OUTPUT TypeNear = 151; - ; Type of nearest object 
DEFINE_OUTPUT ID_near = 8; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB = 0; - ; 1 if AEB is needed for any close 
DEFINE_OUTPUT ClearGo = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event2 = 0; s ; Event time for vehicle 2 
DEFINE_OUTPUT ObjCrit2 = 1; - ; Critical object for vehicle 2 
DEFINE_OUTPUT AxCrit2 = 0; m/s2 ; Required decel for ObjCrit2 
DEFINE_OUTPUT IDcrit2 = 5; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB2 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit2 = 7.89316; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear2 = 201; - ; Type of nearest object 
DEFINE_OUTPUT ID_near2 = 5; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB2 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo2 = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event3 = 0; s ; Event time for vehicle 3 
DEFINE_OUTPUT ObjCrit3 = 1; - ; Critical object for vehicle 3 
DEFINE_OUTPUT AxCrit3 = 0; m/s2 ; Required decel for ObjCrit3 
DEFINE_OUTPUT IDcrit3 = 7; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB3 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit3 = 0; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear3 = 151; - ; Type of nearest object 
DEFINE_OUTPUT ID_near3 = 7; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB3 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo3 = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event4 = 0; s ; Event time for vehicle 4 
DEFINE_OUTPUT ObjCrit4 = 1; - ; Critical object for vehicle 4 
DEFINE_OUTPUT AxCrit4 = 0; m/s2 ; Required decel for ObjCrit4 
DEFINE_OUTPUT IDcrit4 = 8; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB4 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit4 = 0; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear4 = 151; - ; Type of nearest object 
DEFINE_OUTPUT ID_near4 = 8; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB4 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo4 = 1; - ; Boolean: 1 if clear to go 

!------------------------------------------------------------------------------------
! DEFINED FUNCTIONS
!------------------------------------------------------------------------------------
! Each defined function has optional variables, a sequence of equations, and an
! optional return statement. A defined function may also have arguments.
BEGIN_FUNCTION LIGHT_TYPE(R_TIME); r_time is fraction of cycle for a light
  DEFINE_LOCAL T_CYCLE
  T_CYCLE = FMOD(T + R_TIME*T_SIG_PERIOD, T_SIG_PERIOD);
  RETURN LIGHT_GREEN + T_CYCLE > (T_SIG_PERIOD/2 -5) + T_CYCLE > (T_SIG_PERIOD/2 -2);
END_FUNCTION

BEGIN_FUNCTION DIST_BDRY(IDS, IDO); X distance from vehicle bumper to object boundary
  RETURN IF(IDO & (DETECT_TYPE(IDS, IDO) >= VEHICLE), DETECT_X(IDS, IDO) + X_SENSOR(IDS) -1 -DETECT_MSG(IDS, IDO), 0);
END_FUNCTION

BEGIN_FUNCTION AX_AEB(IDS, IDO); Ax needed to slow for target within 2m laterally
  DEFINE_LOCAL COND, DISTX, VX
  DISTX = IF(IDO, DIST_BDRY(IDS, IDO), 0);
  VX = IF(IDO, DETECT_VX(IDS, IDO), 0);
  COND = IF(DISTX & (VX < 0), ABS(DETECT_Y(IDS, IDO) -(DETECT_VY(IDS, IDO)*DISTX/VX)) < 2, 0);
  RETURN IF(COND, VX*VX/(2*DISTX), 0);
END_FUNCTION

BEGIN_FUNCTION OBJ_CRIT(IDS); find object requiring most decel among the 1st 4
  DEFINE_LOCAL IOBJ, AX_CRIT, AX
  IOBJ = 1;
  AX_CRIT = 0;
  AX = AX_AEB(IDS, 1);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 2);
  IOBJ = IF(AX > AX_CRIT, 2, IOBJ);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 3);
  IOBJ = IF(AX > AX_CRIT, 3, IOBJ);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 4);
  IOBJ = IF(AX > AX_CRIT, 4, IOBJ);
  RETURN IOBJ;
END_FUNCTION

BEGIN_FUNCTION IS_CLR(IDS, IOBJ); True if there's a clear path for object iobj
  DEFINE_LOCAL DIST
  DIST = DETECT_DIST(IDS, IOBJ);
  RETURN (((DETECT_TYPE(IDS, IOBJ) < VEHICLE) | (DIST > 45)) | (DIST <= 0)) | (AX_AEB(IDS, IOBJ) < 0.01);
END_FUNCTION

BEGIN_FUNCTION NEED_AEB(IDS, IOBJ); Need to brake?
  RETURN IF(IOBJ, AX_AEB(IDS, IOBJ) > AX_BRAKE, 0);
END_FUNCTION

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT X_OBJ_2 = 155.75;
EQ_INIT Y_OBJ_2 = 138.25;
EQ_INIT X_OBJ_3 = 144.25;
EQ_INIT Y_OBJ_3 = 161.75;
EQ_INIT HEADO_4 = 0;
EQ_INIT S_OBJ_4 = 142;
EQ_INIT LATO_4 = -141;
EQ_INIT V_CMD_OBJ_4 = 1.25;
EQ_INIT HEADO_5 = PI/2;
EQ_INIT S_OBJ_5 = 141;
EQ_INIT LATO_5 = -178;
EQ_INIT V_CMD_OBJ_5 = 1.3;
EQ_INIT HEADO_6 = 0;
EQ_INIT S_OBJ_6 = 65;
EQ_INIT LATO_6 = -155;
EQ_INIT V_CMD_OBJ_6 = 5;
EQ_INIT X_OBJ_7 = 150;
EQ_INIT Y_OBJ_7 = 150;
EQ_INIT X_OBJ_8 = 150;
EQ_INIT Y_OBJ_8 = 150;
EQ_INIT X_OBJ_9 = 150;
EQ_INIT Y_OBJ_9 = 150;
EQ_INIT X_OBJ_10 = 150;
EQ_INIT Y_OBJ_10 = 150;
EQ_INIT X_OBJ_11 = 0;
EQ_INIT Y_OBJ_11 = 0;
EQ_INIT X_OBJ_12 = 0;
EQ_INIT Y_OBJ_12 = 0;
EQ_INIT X_OBJ_13 = 0;
EQ_INIT Y_OBJ_13 = 0;
EQ_INIT X_OBJ_14 = 0;
EQ_INIT Y_OBJ_14 = 0;

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN CLEARGO = ((IS_CLR(S1, 1) & IS_CLR(S1, 2)) & IS_CLR(S1, 3)) & IS_CLR(S1, 4);
EQ_IN CLEARGO2 = ((IS_CLR(S2, 1) & IS_CLR(S2, 2)) & IS_CLR(S2, 3)) & IS_CLR(S2, 4);
EQ_IN CLEARGO3 = ((IS_CLR(S3, 1) & IS_CLR(S3, 2)) & IS_CLR(S3, 3)) & IS_CLR(S3, 4);
EQ_IN CLEARGO4 = ((IS_CLR(S4, 1) & IS_CLR(S4, 2)) & IS_CLR(S4, 3)) & IS_CLR(S4, 4);

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT OBJCRIT = OBJ_CRIT(S1);
EQ_OUT AXCRIT = AX_AEB(S1, OBJCRIT);
EQ_OUT IDCRIT = DETECT_ID(S1, OBJCRIT);
EQ_OUT APPLYAEB = AXCRIT > AX_BRAKE;
EQ_OUT DISTCRIT = DIST_BDRY(S1, OBJCRIT);
EQ_OUT TYPENEAR = DETECT_TYPE(S1, 1);
EQ_OUT ID_NEAR = DETECT_ID(S1, 1);
EQ_OUT NEEDAEB = ((NEED_AEB(S1, 1) | NEED_AEB(S1, 2)) | NEED_AEB(S1, 3)) | NEED_AEB(S1, 4);
EQ_OUT AX_SCCMD = -AXCRIT;
EQ_OUT T_EVENT2 = T -T_EVENT2_START;
EQ_OUT OBJCRIT2 = OBJ_CRIT(S2);
EQ_OUT AXCRIT2 = AX_AEB(S2, OBJCRIT2);
EQ_OUT IDCRIT2 = DETECT_ID(S2, OBJCRIT2);
EQ_OUT APPLYAEB2 = AXCRIT2 > AX_BRAKE;
EQ_OUT DISTCRIT2 = DIST_BDRY(S2, OBJCRIT2);
EQ_OUT TYPENEAR2 = DETECT_TYPE(S2, 1);
EQ_OUT ID_NEAR2 = DETECT_ID(S2, 1);
EQ_OUT NEEDAEB2 = ((NEED_AEB(S2, 1) | NEED_AEB(S2, 2)) | NEED_AEB(S2, 3)) | NEED_AEB(S2, 4);
EQ_OUT AX_SCCMD_2 = -AXCRIT2;
EQ_OUT T_EVENT3 = T -T_EVENT3_START;
EQ_OUT OBJCRIT3 = OBJ_CRIT(S3);
EQ_OUT AXCRIT3 = AX_AEB(S3, OBJCRIT3);
EQ_OUT IDCRIT3 = DETECT_ID(S3, OBJCRIT3);
EQ_OUT APPLYAEB3 = AXCRIT3 > AX_BRAKE;
EQ_OUT DISTCRIT3 = DIST_BDRY(S3, OBJCRIT3);
EQ_OUT TYPENEAR3 = DETECT_TYPE(S3, 1);
EQ_OUT ID_NEAR3 = DETECT_ID(S3, 1);
EQ_OUT NEEDAEB3 = ((NEED_AEB(S3, 1) | NEED_AEB(S3, 2)) | NEED_AEB(S3, 3)) | NEED_AEB(S3, 4);
EQ_OUT AX_SCCMD_3 = -AXCRIT3;
EQ_OUT T_EVENT4 = T -T_EVENT4_START;
EQ_OUT OBJCRIT4 = OBJ_CRIT(S4);
EQ_OUT AXCRIT4 = AX_AEB(S4, OBJCRIT4);
EQ_OUT IDCRIT4 = DETECT_ID(S4, OBJCRIT4);
EQ_OUT APPLYAEB4 = AXCRIT4 > AX_BRAKE;
EQ_OUT DISTCRIT4 = DIST_BDRY(S4, OBJCRIT4);
EQ_OUT TYPENEAR4 = DETECT_TYPE(S4, 1);
EQ_OUT ID_NEAR4 = DETECT_ID(S4, 1);
EQ_OUT NEEDAEB4 = ((NEED_AEB(S4, 1) | NEED_AEB(S4, 2)) | NEED_AEB(S4, 3)) | NEED_AEB(S4, 4);
EQ_OUT AX_SCCMD_4 = -AXCRIT4;

!------------------------------------------------------------------------------------
! DIFFERENTIAL EQUATIONS FOR NEW STATE VARIABLES (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_DIFFERENTIAL LATO_4 = SIN(HEADV_O_4)*V_CMD_OBJ_4;
EQ_DIFFERENTIAL S_OBJ_4 = COS(HEADV_O_4)*V_CMD_OBJ_4;
EQ_DIFFERENTIAL LATO_5 = SIN(HEADV_O_5)*V_CMD_OBJ_5;
EQ_DIFFERENTIAL S_OBJ_5 = COS(HEADV_O_5)*V_CMD_OBJ_5;
EQ_DIFFERENTIAL LATO_6 = SIN(HEADV_O_6)*V_CMD_OBJ_6;
EQ_DIFFERENTIAL S_OBJ_6 = COS(HEADV_O_6)*V_CMD_OBJ_6;

!------------------------------------------------------------------------------------
! EVENTS
!------------------------------------------------------------------------------------
! Each event is defined with a formula and an optional pathname for a parsfile to
! read if the specified formula is not zero. If no pathname is specified and the
! specified formula is not zero, then the run stops.
SET_EVENT_ID 1
DEFINE_EVENT TYPENEAR == STOP_SIGN; Events\Events_01526331-e915-4074-9756-4030d53885d4.par ! ID 1
DEFINE_EVENT APPLYAEB; Events\Events_31395730-702c-44eb-b0a0-e828d8329c1f.par ! ID 1
DEFINE_EVENT VXZ_FWD < 0.277778; Events\Events_fd627ae8-7976-4d33-877b-60966d2bb401.par ! ID 1
SET_EVENT_ID 2
DEFINE_EVENT TYPENEAR2 == STOP_SIGN; Events\Events_176a7475-7c4c-4f88-9cff-979a0066afdf.par ! ID 2
DEFINE_EVENT APPLYAEB2; Events\Events_2e95037c-61b4-41d9-91aa-1bcddd42c2cf.par ! ID 2
DEFINE_EVENT VXZ_FWD_2 < 0.277778; Events\Events_6c2f4ad3-a543-4255-b120-33435533c6b9.par ! ID 2
SET_EVENT_ID 3
DEFINE_EVENT TYPENEAR3 == STOP_SIGN; Events\Events_b248ae5d-bcf0-44c4-8bf3-b5707d315675.par ! ID 3
DEFINE_EVENT APPLYAEB3; Events\Events_acffe74c-af43-4d5f-aa62-05379a49096c.par ! ID 3
DEFINE_EVENT VXZ_FWD_3 < 0.277778; Events\Events_7d2b2703-87ff-435a-a675-dd7ae6117f98.par ! ID 3
SET_EVENT_ID 4
DEFINE_EVENT TYPENEAR4 == STOP_SIGN; Events\Events_96b2daa5-7055-4265-85b4-aea2549ae5b6.par ! ID 4
DEFINE_EVENT APPLYAEB4; Events\Events_ecdada3f-44c4-41b4-a3e8-3aee41b03b6c.par ! ID 4
DEFINE_EVENT VXZ_FWD_4 < 0.277778; Events\Events_b2d8a1d9-d28e-4d84-b9a6-b84e54d7af55.par ! ID 4
SET_EVENT_ID 0

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_X_OBJ_11 REPLACE 0 ; m ! #1. X coordinate of object 11
IMPORT IMP_Y_OBJ_11 REPLACE 0 ; m ! #2. Y coordinate of object 11
IMPORT IMP_Z_OBJ_11 REPLACE 0 ; m ! #3. Z coordinate of object 11
IMPORT IMP_ROLL_OBJ_11 REPLACE 0 ; deg ! #4. Roll angle of object 11
IMPORT IMP_PITCH_OBJ_11 REPLACE 0 ; deg ! #5. Pitch angle of object 11
IMPORT IMP_YAW_OBJ_11 REPLACE 0 ; deg ! #6. Yaw angle of object 11
IMPORT IMP_X_OBJ_12 REPLACE 0 ; m ! #7. X coordinate of object 12
IMPORT IMP_Y_OBJ_12 REPLACE 0 ; m ! #8. Y coordinate of object 12
IMPORT IMP_Z_OBJ_12 REPLACE 0 ; m ! #9. Z coordinate of object 12
IMPORT IMP_ROLL_OBJ_12 REPLACE 0 ; deg ! #10. Roll angle of object 12
IMPORT IMP_PITCH_OBJ_12 REPLACE 0 ; deg ! #11. Pitch angle of object 12
IMPORT IMP_YAW_OBJ_12 REPLACE 0 ; deg ! #12. Yaw angle of object 12
IMPORT IMP_X_OBJ_13 REPLACE 0 ; m ! #13. X coordinate of object 13
IMPORT IMP_Y_OBJ_13 REPLACE 0 ; m ! #14. Y coordinate of object 13
IMPORT IMP_Z_OBJ_13 REPLACE 0 ; m ! #15. Z coordinate of object 13
IMPORT IMP_ROLL_OBJ_13 REPLACE 0 ; deg ! #16. Roll angle of object 13
IMPORT IMP_PITCH_OBJ_13 REPLACE 0 ; deg ! #17. Pitch angle of object 13
IMPORT IMP_YAW_OBJ_13 REPLACE 0 ; deg ! #18. Yaw angle of object 13
IMPORT IMP_X_OBJ_14 REPLACE 0 ; m ! #19. X coordinate of object 14
IMPORT IMP_Y_OBJ_14 REPLACE 0 ; m ! #20. Y coordinate of object 14
IMPORT IMP_Z_OBJ_14 REPLACE 0 ; m ! #21. Z coordinate of object 14
IMPORT IMP_ROLL_OBJ_14 REPLACE 0 ; deg ! #22. Roll angle of object 14
IMPORT IMP_PITCH_OBJ_14 REPLACE 0 ; deg ! #23. Pitch angle of object 14
IMPORT IMP_YAW_OBJ_14 REPLACE 0 ; deg ! #24. Yaw angle of object 14

!------------------------------------------------------------------------------------
! EXPORTED VARIABLES
!------------------------------------------------------------------------------------
EXPORT XO 153.5751003 ! #1. X coordinate, unit 1 origin (m)
EXPORT YO -40.00091369 ! #2. Y coordinate, unit 1 origin (m)
EXPORT ZO 0.00194533934 ! #3. Z coordinate, unit 1 origin (m)
EXPORT ROLL_E -3.274680039e-06 ! #4. Roll (Euler), unit 1 (deg)
EXPORT PITCH 0.2684847847 ! #5. Pitch, unit 1 (deg)
EXPORT YAW 83.17894417 ! #6. Yaw, unit 1 (deg)
EXPORT XO_2 189.9998885 ! #7. X coordinate, unit 2 origin (m)
EXPORT YO_2 153.6373052 ! #8. Y coordinate, unit 2 origin (m)
EXPORT ZO_3 -0.03424891363 ! #9. Z coordinate, unit 3 origin (m)
EXPORT ROLL_E_2 -6.794721786e-09 ! #10. Roll (Euler), unit 2 (deg)
EXPORT PITCH_2 0.2701424574 ! #11. Pitch, unit 2 (deg)
EXPORT YAW_2 -179.8036149 ! #12. Yaw, unit 2 (deg)
EXPORT XO_3        50 ! #13. X coordinate, unit 3 origin (m)
EXPORT YO_3   146.342 ! #14. Y coordinate, unit 3 origin (m)
EXPORT ZO_3 -0.03424891363 ! #15. Z coordinate, unit 3 origin (m)
EXPORT ROLL_E_3 -1.655987367e-06 ! #16. Roll (Euler), unit 3 (deg)
EXPORT PITCH_3 0.4878115277 ! #17. Pitch, unit 3 (deg)
EXPORT YAW_3        0 ! #18. Yaw, unit 3 (deg)
EXPORT XO_4 346.3317017 ! #19. X coordinate, unit 4 origin (m)
EXPORT YO_4 160.4775167 ! #20. Y coordinate, unit 4 origin (m)
EXPORT ZO_4 0.01276043125 ! #21. Z coordinate, unit 4 origin (m)
EXPORT ROLL_E_4 -3.264074955e-06 ! #22. Roll (Euler), unit 4 (deg)
EXPORT PITCH_4 0.1877215537 ! #23. Pitch, unit 4 (deg)
EXPORT YAW_4 -92.81127546 ! #24. Yaw, unit 4 (deg)


END
